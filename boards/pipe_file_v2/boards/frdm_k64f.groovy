   def test_modbus_subsys_modbus_rtu_result
   def test_modbus_subsys_modbus_rtu() {
      echo 'Test subsys.modbus.rtu'
      echo 'subsys.modbus.rtu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_modbus_subsys_modbus_rtu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/modbus frdm_k64f build_ffe8920 subsys.modbus.rtu tests/subsys/modbus'''
        script {
          test_modbus_subsys_modbus_rtu_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/modbus/build_ffe8920'
        script {
          test_modbus_subsys_modbus_rtu_result = "SUCCESS"
        }
      }
      script {
        echo test_modbus_subsys_modbus_rtu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'subsys.modbus.rtu', 'result': test_modbus_subsys_modbus_rtu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'subsys.modbus.rtu', 'result': test_modbus_subsys_modbus_rtu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_modbus_sample_modbus_tcp_gateway_result
   def test_modbus_sample_modbus_tcp_gateway() {
      echo 'Test sample.modbus.tcp_gateway'
      echo 'sample.modbus.tcp_gateway'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_modbus_sample_modbus_tcp_gateway_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/modbus/tcp_gateway frdm_k64f build_35d5d23 sample.modbus.tcp_gateway samples/subsys/modbus/tcp_gateway'''
        script {
          test_modbus_sample_modbus_tcp_gateway_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/modbus/tcp_gateway/build_35d5d23 sample.modbus.tcp_gateway '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/modbus/tcp_gateway/build_35d5d23'
        script {
          test_modbus_sample_modbus_tcp_gateway_result = "SUCCESS"
        }
      }
      script {
        echo test_modbus_sample_modbus_tcp_gateway_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.modbus.tcp_gateway', 'result': test_modbus_sample_modbus_tcp_gateway_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.modbus.tcp_gateway', 'result': test_modbus_sample_modbus_tcp_gateway_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations_result
   def test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations() {
      echo 'Test arch.interrupt.no_optimizations'
      echo 'arch.interrupt.no_optimizations'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_interrupt frdm_k64f build_7a0a201 -DCONFIG_NO_OPTIMIZATIONS=y -DCONFIG_IDLE_STACK_SIZE=512 -DCONFIG_MAIN_STACK_SIZE=1024 arch.interrupt.no_optimizations tests/arch/arm/arm_interrupt -DCONFIG_NO_OPTIMIZATIONS=y -DCONFIG_IDLE_STACK_SIZE=512 -DCONFIG_MAIN_STACK_SIZE=1024'''
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_interrupt/build_7a0a201'
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.no_optimizations', 'result': test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.no_optimizations', 'result': test_arm_fpu_interrupt_ignore_faults_arch_interrupt_no_optimizations_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm_result
   def test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm() {
      echo 'Test arch.interrupt.arm'
      echo 'arch.interrupt.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_interrupt frdm_k64f build_73886de arch.interrupt.arm tests/arch/arm/arm_interrupt'''
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_interrupt/build_73886de arch.interrupt.arm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_interrupt/build_73886de'
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.arm', 'result': test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.arm', 'result': test_arm_fpu_interrupt_ignore_faults_arch_interrupt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info_result
   def test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info() {
      echo 'Test arch.interrupt.extra_exception_info'
      echo 'arch.interrupt.extra_exception_info'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_interrupt frdm_k64f build_eba6ca6 -DCONFIG_EXTRA_EXCEPTION_INFO=y arch.interrupt.extra_exception_info tests/arch/arm/arm_interrupt -DCONFIG_EXTRA_EXCEPTION_INFO=y'''
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_interrupt/build_eba6ca6 arch.interrupt.extra_exception_info '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_interrupt/build_eba6ca6'
        script {
          test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.extra_exception_info', 'result': test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.extra_exception_info', 'result': test_arm_fpu_interrupt_ignore_faults_arch_interrupt_extra_exception_info_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_net_mqtt_result
   def test_net_mqtt_net_mqtt() {
      echo 'Test net.mqtt'
      echo 'net.mqtt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_net_mqtt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/mqtt_publisher frdm_k64f build_9d8b96b net.mqtt tests/net/lib/mqtt_publisher'''
        script {
          test_net_mqtt_net_mqtt_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/mqtt_publisher/build_9d8b96b'
        script {
          test_net_mqtt_net_mqtt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_net_mqtt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mqtt', 'result': test_net_mqtt_net_mqtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mqtt', 'result': test_net_mqtt_net_mqtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_net_mqtt_pubsub_result
   def test_net_mqtt_net_mqtt_pubsub() {
      echo 'Test net.mqtt.pubsub'
      echo 'net.mqtt.pubsub'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_net_mqtt_pubsub_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/mqtt_pubsub frdm_k64f build_3a28fa4 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.mqtt.pubsub tests/net/lib/mqtt_pubsub -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_mqtt_net_mqtt_pubsub_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/mqtt_pubsub/build_3a28fa4'
        script {
          test_net_mqtt_net_mqtt_pubsub_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_net_mqtt_pubsub_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.pubsub', 'result': test_net_mqtt_net_mqtt_pubsub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.pubsub', 'result': test_net_mqtt_net_mqtt_pubsub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_net_mqtt_pubsub_preempt_result
   def test_net_mqtt_net_mqtt_pubsub_preempt() {
      echo 'Test net.mqtt.pubsub.preempt'
      echo 'net.mqtt.pubsub.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_net_mqtt_pubsub_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/mqtt_pubsub frdm_k64f build_70b9a00 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.mqtt.pubsub.preempt tests/net/lib/mqtt_pubsub -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_mqtt_net_mqtt_pubsub_preempt_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/mqtt_pubsub/build_70b9a00'
        script {
          test_net_mqtt_net_mqtt_pubsub_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_net_mqtt_pubsub_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.pubsub.preempt', 'result': test_net_mqtt_net_mqtt_pubsub_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.pubsub.preempt', 'result': test_net_mqtt_net_mqtt_pubsub_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_net_mqtt_subscriber_result
   def test_net_mqtt_net_mqtt_subscriber() {
      echo 'Test net.mqtt.subscriber'
      echo 'net.mqtt.subscriber'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_net_mqtt_subscriber_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/mqtt_subscriber frdm_k64f build_2dcdffe -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.mqtt.subscriber tests/net/lib/mqtt_subscriber -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_mqtt_net_mqtt_subscriber_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/mqtt_subscriber/build_2dcdffe'
        script {
          test_net_mqtt_net_mqtt_subscriber_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_net_mqtt_subscriber_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.subscriber', 'result': test_net_mqtt_net_mqtt_subscriber_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.subscriber', 'result': test_net_mqtt_net_mqtt_subscriber_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_net_mqtt_subscriber_preempt_result
   def test_net_mqtt_net_mqtt_subscriber_preempt() {
      echo 'Test net.mqtt.subscriber.preempt'
      echo 'net.mqtt.subscriber.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_net_mqtt_subscriber_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/mqtt_subscriber frdm_k64f build_92e4d24 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.mqtt.subscriber.preempt tests/net/lib/mqtt_subscriber -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_mqtt_net_mqtt_subscriber_preempt_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/mqtt_subscriber/build_92e4d24'
        script {
          test_net_mqtt_net_mqtt_subscriber_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_net_mqtt_subscriber_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.subscriber.preempt', 'result': test_net_mqtt_net_mqtt_subscriber_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.subscriber.preempt', 'result': test_net_mqtt_net_mqtt_subscriber_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_net_mqtt_tls_result
   def test_net_mqtt_net_mqtt_tls() {
      echo 'Test net.mqtt.tls'
      echo 'net.mqtt.tls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_net_mqtt_tls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/mqtt_publisher frdm_k64f build_965a45b  -DCONF_FILE=prj_tls.conf -DCONFIG_NET_PKT_RX_COUNT=20 -DCONFIG_NET_PKT_TX_COUNT=20 -DCONFIG_NET_BUF_RX_COUNT=20 -DCONFIG_NET_BUF_TX_COUNT=20 net.mqtt.tls tests/net/lib/mqtt_publisher  -DCONF_FILE=prj_tls.conf -DCONFIG_NET_PKT_RX_COUNT=20 -DCONFIG_NET_PKT_TX_COUNT=20 -DCONFIG_NET_BUF_RX_COUNT=20 -DCONFIG_NET_BUF_TX_COUNT=20'''
        script {
          test_net_mqtt_net_mqtt_tls_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/mqtt_publisher/build_965a45b'
        script {
          test_net_mqtt_net_mqtt_tls_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_net_mqtt_tls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.tls', 'result': test_net_mqtt_net_mqtt_tls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.tls', 'result': test_net_mqtt_net_mqtt_tls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_sample_net_mqtt_publisher_result
   def test_net_mqtt_sample_net_mqtt_publisher() {
      echo 'Test sample.net.mqtt_publisher'
      echo 'sample.net.mqtt_publisher'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_sample_net_mqtt_publisher_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/mqtt_publisher frdm_k64f build_5dba95e sample.net.mqtt_publisher samples/net/mqtt_publisher'''
        script {
          test_net_mqtt_sample_net_mqtt_publisher_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/mqtt_publisher/build_5dba95e sample.net.mqtt_publisher '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/mqtt_publisher/build_5dba95e'
        script {
          test_net_mqtt_sample_net_mqtt_publisher_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_sample_net_mqtt_publisher_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.mqtt_publisher', 'result': test_net_mqtt_sample_net_mqtt_publisher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.mqtt_publisher', 'result': test_net_mqtt_sample_net_mqtt_publisher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_sample_net_mqtt_publisher_userspace_result
   def test_net_mqtt_sample_net_mqtt_publisher_userspace() {
      echo 'Test sample.net.mqtt_publisher.userspace'
      echo 'sample.net.mqtt_publisher.userspace'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_sample_net_mqtt_publisher_userspace_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/mqtt_publisher frdm_k64f build_4fcfd25  -DCONFIG_USERSPACE=y sample.net.mqtt_publisher.userspace samples/net/mqtt_publisher  -DCONFIG_USERSPACE=y'''
        script {
          test_net_mqtt_sample_net_mqtt_publisher_userspace_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/mqtt_publisher/build_4fcfd25 sample.net.mqtt_publisher.userspace '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/mqtt_publisher/build_4fcfd25'
        script {
          test_net_mqtt_sample_net_mqtt_publisher_userspace_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_sample_net_mqtt_publisher_userspace_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.mqtt_publisher.userspace', 'result': test_net_mqtt_sample_net_mqtt_publisher_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.mqtt_publisher.userspace', 'result': test_net_mqtt_sample_net_mqtt_publisher_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_CAN_sample_drivers_can_result
   def test_CAN_sample_drivers_can() {
      echo 'Test sample.drivers.can'
      echo 'sample.drivers.can'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_CAN_sample_drivers_can_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/can frdm_k64f build_1861bd2 sample.drivers.can samples/drivers/can'''
        script {
          test_CAN_sample_drivers_can_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/can/build_1861bd2 sample.drivers.can '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/can/build_1861bd2'
        script {
          test_CAN_sample_drivers_can_result = "SUCCESS"
        }
      }
      script {
        echo test_CAN_sample_drivers_can_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.can', 'result': test_CAN_sample_drivers_can_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.can', 'result': test_CAN_sample_drivers_can_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_CAN_sample_subsys_canbus_isotp_result
   def test_CAN_sample_subsys_canbus_isotp() {
      echo 'Test sample.subsys.canbus.isotp'
      echo 'sample.subsys.canbus.isotp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_CAN_sample_subsys_canbus_isotp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/canbus/isotp frdm_k64f build_2b741cd sample.subsys.canbus.isotp samples/subsys/canbus/isotp'''
        script {
          test_CAN_sample_subsys_canbus_isotp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/canbus/isotp/build_2b741cd sample.subsys.canbus.isotp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/canbus/isotp/build_2b741cd'
        script {
          test_CAN_sample_subsys_canbus_isotp_result = "SUCCESS"
        }
      }
      script {
        echo test_CAN_sample_subsys_canbus_isotp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.subsys.canbus.isotp', 'result': test_CAN_sample_subsys_canbus_isotp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.subsys.canbus.isotp', 'result': test_CAN_sample_subsys_canbus_isotp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_DAC_sample_drivers_dac_result
   def test_DAC_sample_drivers_dac() {
      echo 'Test sample.drivers.dac'
      echo 'sample.drivers.dac'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_DAC_sample_drivers_dac_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/dac frdm_k64f build_717b4f4 sample.drivers.dac samples/drivers/dac'''
        script {
          test_DAC_sample_drivers_dac_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/dac/build_717b4f4 sample.drivers.dac '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/dac/build_717b4f4'
        script {
          test_DAC_sample_drivers_dac_result = "SUCCESS"
        }
      }
      script {
        echo test_DAC_sample_drivers_dac_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.dac', 'result': test_DAC_sample_drivers_dac_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.dac', 'result': test_DAC_sample_drivers_dac_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_adc_drivers_userspace_drivers_adc_result
   def test_adc_drivers_userspace_drivers_adc() {
      echo 'Test drivers.adc'
      echo 'drivers.adc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_adc_drivers_userspace_drivers_adc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/adc/adc_api frdm_k64f build_4a01d9a drivers.adc tests/drivers/adc/adc_api'''
        script {
          test_adc_drivers_userspace_drivers_adc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/adc/adc_api/build_4a01d9a drivers.adc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/adc/adc_api/build_4a01d9a'
        script {
          test_adc_drivers_userspace_drivers_adc_result = "SUCCESS"
        }
      }
      script {
        echo test_adc_drivers_userspace_drivers_adc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.adc', 'result': test_adc_drivers_userspace_drivers_adc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.adc', 'result': test_adc_drivers_userspace_drivers_adc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_arch_arm_sw_vector_relay_result
   def test_arm_arch_arm_sw_vector_relay() {
      echo 'Test arch.arm.sw_vector_relay'
      echo 'arch.arm.sw_vector_relay'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_arch_arm_sw_vector_relay_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_sw_vector_relay frdm_k64f build_186b63b arch.arm.sw_vector_relay tests/arch/arm/arm_sw_vector_relay'''
        script {
          test_arm_arch_arm_sw_vector_relay_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_sw_vector_relay/build_186b63b arch.arm.sw_vector_relay '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_sw_vector_relay/build_186b63b'
        script {
          test_arm_arch_arm_sw_vector_relay_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_arch_arm_sw_vector_relay_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm.sw_vector_relay', 'result': test_arm_arch_arm_sw_vector_relay_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm.sw_vector_relay', 'result': test_arm_arch_arm_sw_vector_relay_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_fpu_arch_arm_swap_common_result
   def test_arm_fpu_arch_arm_swap_common() {
      echo 'Test arch.arm.swap.common'
      echo 'arch.arm.swap.common'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_fpu_arch_arm_swap_common_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_thread_swap frdm_k64f build_db5d939 arch.arm.swap.common tests/arch/arm/arm_thread_swap'''
        script {
          test_arm_fpu_arch_arm_swap_common_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_thread_swap/build_db5d939 arch.arm.swap.common '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_thread_swap/build_db5d939'
        script {
          test_arm_fpu_arch_arm_swap_common_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_fpu_arch_arm_swap_common_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm.swap.common', 'result': test_arm_fpu_arch_arm_swap_common_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm.swap.common', 'result': test_arm_fpu_arch_arm_swap_common_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_fpu_arch_arm_swap_common_no_optimizations_result
   def test_arm_fpu_arch_arm_swap_common_no_optimizations() {
      echo 'Test arch.arm.swap.common.no_optimizations'
      echo 'arch.arm.swap.common.no_optimizations'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_fpu_arch_arm_swap_common_no_optimizations_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_thread_swap frdm_k64f build_ebfbd2a -DCONFIG_NO_OPTIMIZATIONS=y -DCONFIG_IDLE_STACK_SIZE=512 arch.arm.swap.common.no_optimizations tests/arch/arm/arm_thread_swap -DCONFIG_NO_OPTIMIZATIONS=y -DCONFIG_IDLE_STACK_SIZE=512'''
        script {
          test_arm_fpu_arch_arm_swap_common_no_optimizations_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_thread_swap/build_ebfbd2a arch.arm.swap.common.no_optimizations '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_thread_swap/build_ebfbd2a'
        script {
          test_arm_fpu_arch_arm_swap_common_no_optimizations_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_fpu_arch_arm_swap_common_no_optimizations_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm.swap.common.no_optimizations', 'result': test_arm_fpu_arch_arm_swap_common_no_optimizations_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm.swap.common.no_optimizations', 'result': test_arm_fpu_arch_arm_swap_common_no_optimizations_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_interrupt_arch_arm_irq_advanced_features_result
   def test_arm_interrupt_arch_arm_irq_advanced_features() {
      echo 'Test arch.arm.irq_advanced_features'
      echo 'arch.arm.irq_advanced_features'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_interrupt_arch_arm_irq_advanced_features_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_irq_advanced_features frdm_k64f build_1fc8fbd arch.arm.irq_advanced_features tests/arch/arm/arm_irq_advanced_features'''
        script {
          test_arm_interrupt_arch_arm_irq_advanced_features_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_irq_advanced_features/build_1fc8fbd arch.arm.irq_advanced_features '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_irq_advanced_features/build_1fc8fbd'
        script {
          test_arm_interrupt_arch_arm_irq_advanced_features_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_interrupt_arch_arm_irq_advanced_features_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm.irq_advanced_features', 'result': test_arm_interrupt_arch_arm_irq_advanced_features_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm.irq_advanced_features', 'result': test_arm_interrupt_arch_arm_irq_advanced_features_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_interrupt_vector_table_arch_arm_irq_vector_table_result
   def test_arm_interrupt_vector_table_arch_arm_irq_vector_table() {
      echo 'Test arch.arm.irq_vector_table'
      echo 'arch.arm.irq_vector_table'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_interrupt_vector_table_arch_arm_irq_vector_table_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_irq_vector_table frdm_k64f build_4445063 arch.arm.irq_vector_table tests/arch/arm/arm_irq_vector_table'''
        script {
          test_arm_interrupt_vector_table_arch_arm_irq_vector_table_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_irq_vector_table/build_4445063 arch.arm.irq_vector_table '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_irq_vector_table/build_4445063'
        script {
          test_arm_interrupt_vector_table_arch_arm_irq_vector_table_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_interrupt_vector_table_arch_arm_irq_vector_table_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm.irq_vector_table', 'result': test_arm_interrupt_vector_table_arch_arm_irq_vector_table_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm.irq_vector_table', 'result': test_arm_interrupt_vector_table_arch_arm_irq_vector_table_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func_result
   def test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func() {
      echo 'Test arch.arm.tz_wrap_func'
      echo 'arch.arm.tz_wrap_func'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_tz_wrap_func frdm_k64f build_ccaeb7f arch.arm.tz_wrap_func tests/arch/arm/arm_tz_wrap_func'''
        script {
          test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_tz_wrap_func/build_ccaeb7f arch.arm.tz_wrap_func '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_tz_wrap_func/build_ccaeb7f'
        script {
          test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm.tz_wrap_func', 'result': test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm.tz_wrap_func', 'result': test_arm_tz_ns_tz_wrap_func_arch_arm_tz_wrap_func_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_userspace_arch_arm_ramfunc_result
   def test_arm_userspace_arch_arm_ramfunc() {
      echo 'Test arch.arm.ramfunc'
      echo 'arch.arm.ramfunc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_userspace_arch_arm_ramfunc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_ramfunc frdm_k64f build_8d1919a arch.arm.ramfunc tests/arch/arm/arm_ramfunc'''
        script {
          test_arm_userspace_arch_arm_ramfunc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_ramfunc/build_8d1919a arch.arm.ramfunc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_ramfunc/build_8d1919a'
        script {
          test_arm_userspace_arch_arm_ramfunc_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_userspace_arch_arm_ramfunc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm.ramfunc', 'result': test_arm_userspace_arch_arm_ramfunc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm.ramfunc', 'result': test_arm_userspace_arch_arm_ramfunc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm_result
   def test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm() {
      echo 'Test arch.arm64.high_addr.high_sram_low_vm'
      echo 'arch.arm64.high_addr.high_sram_low_vm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm64/arm64_high_addresses frdm_k64f build_3b44ab8 -DCONFIG_SRAM_BASE_ADDRESS=0x200880000 -DCONFIG_KERNEL_VM_BASE=0x00400000 arch.arm64.high_addr.high_sram_low_vm tests/arch/arm64/arm64_high_addresses -DCONFIG_SRAM_BASE_ADDRESS=0x200880000 -DCONFIG_KERNEL_VM_BASE=0x00400000'''
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm64/arm64_high_addresses/build_3b44ab8'
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.high_sram_low_vm', 'result': test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.high_sram_low_vm', 'result': test_arm_userspace_arch_arm64_high_addr_high_sram_low_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm_result
   def test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm() {
      echo 'Test arch.arm64.high_addr.low_sram_high_vm'
      echo 'arch.arm64.high_addr.low_sram_high_vm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm64/arm64_high_addresses frdm_k64f build_c284aec -DCONFIG_SRAM_BASE_ADDRESS=0x00400000 -DCONFIG_KERNEL_VM_BASE=0x200880000 arch.arm64.high_addr.low_sram_high_vm tests/arch/arm64/arm64_high_addresses -DCONFIG_SRAM_BASE_ADDRESS=0x00400000 -DCONFIG_KERNEL_VM_BASE=0x200880000'''
        script {
          test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm64/arm64_high_addresses/build_c284aec'
        script {
          test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.low_sram_high_vm', 'result': test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.low_sram_high_vm', 'result': test_arm_userspace_arch_arm64_high_addr_low_sram_high_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm_result
   def test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm() {
      echo 'Test arch.arm64.high_addr.high_sram_equal_vm'
      echo 'arch.arm64.high_addr.high_sram_equal_vm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm64/arm64_high_addresses frdm_k64f build_3501cdb -DCONFIG_SRAM_BASE_ADDRESS=0x200880000 -DCONFIG_KERNEL_VM_BASE=0x200880000 arch.arm64.high_addr.high_sram_equal_vm tests/arch/arm64/arm64_high_addresses -DCONFIG_SRAM_BASE_ADDRESS=0x200880000 -DCONFIG_KERNEL_VM_BASE=0x200880000'''
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm64/arm64_high_addresses/build_3501cdb'
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.high_sram_equal_vm', 'result': test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.high_sram_equal_vm', 'result': test_arm_userspace_arch_arm64_high_addr_high_sram_equal_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm_result
   def test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm() {
      echo 'Test arch.arm64.high_addr.high_sram_high_vm'
      echo 'arch.arm64.high_addr.high_sram_high_vm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm64/arm64_high_addresses frdm_k64f build_c48b0a7 -DCONFIG_SRAM_BASE_ADDRESS=0x200880000 -DCONFIG_KERNEL_VM_BASE=0x200800000 arch.arm64.high_addr.high_sram_high_vm tests/arch/arm64/arm64_high_addresses -DCONFIG_SRAM_BASE_ADDRESS=0x200880000 -DCONFIG_KERNEL_VM_BASE=0x200800000'''
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm64/arm64_high_addresses/build_c48b0a7'
        script {
          test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm_result = "SUCCESS"
        }
      }
      script {
        echo test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.high_sram_high_vm', 'result': test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.arm64.high_addr.high_sram_high_vm', 'result': test_arm_userspace_arch_arm64_high_addr_high_sram_high_vm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_base_userspace_kernel_common_result
   def test_base_userspace_kernel_common() {
      echo 'Test kernel.common'
      echo 'kernel.common'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_base_userspace_kernel_common_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/common frdm_k64f build_64cb145 kernel.common tests/kernel/common'''
        script {
          test_base_userspace_kernel_common_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/common/build_64cb145 kernel.common '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/common/build_64cb145'
        script {
          test_base_userspace_kernel_common_result = "SUCCESS"
        }
      }
      script {
        echo test_base_userspace_kernel_common_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common', 'result': test_base_userspace_kernel_common_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common', 'result': test_base_userspace_kernel_common_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_base_userspace_kernel_common_misra_result
   def test_base_userspace_kernel_common_misra() {
      echo 'Test kernel.common.misra'
      echo 'kernel.common.misra'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_base_userspace_kernel_common_misra_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/common frdm_k64f build_3e80c49 -DCONFIG_MISRA_SANE=y kernel.common.misra tests/kernel/common -DCONFIG_MISRA_SANE=y'''
        script {
          test_base_userspace_kernel_common_misra_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/common/build_3e80c49 kernel.common.misra '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/common/build_3e80c49'
        script {
          test_base_userspace_kernel_common_misra_result = "SUCCESS"
        }
      }
      script {
        echo test_base_userspace_kernel_common_misra_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.misra', 'result': test_base_userspace_kernel_common_misra_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.misra', 'result': test_base_userspace_kernel_common_misra_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_base_userspace_kernel_common_nano32_result
   def test_base_userspace_kernel_common_nano32() {
      echo 'Test kernel.common.nano32'
      echo 'kernel.common.nano32'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_base_userspace_kernel_common_nano32_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/common frdm_k64f build_65dcb58 -DCONFIG_CBPRINTF_NANO=y -DCONFIG_CBPRINTF_REDUCED_INTEGRAL=y kernel.common.nano32 tests/kernel/common -DCONFIG_CBPRINTF_NANO=y -DCONFIG_CBPRINTF_REDUCED_INTEGRAL=y'''
        script {
          test_base_userspace_kernel_common_nano32_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/common/build_65dcb58 kernel.common.nano32 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/common/build_65dcb58'
        script {
          test_base_userspace_kernel_common_nano32_result = "SUCCESS"
        }
      }
      script {
        echo test_base_userspace_kernel_common_nano32_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.nano32', 'result': test_base_userspace_kernel_common_nano32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.nano32', 'result': test_base_userspace_kernel_common_nano32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_base_userspace_kernel_common_nano64_result
   def test_base_userspace_kernel_common_nano64() {
      echo 'Test kernel.common.nano64'
      echo 'kernel.common.nano64'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_base_userspace_kernel_common_nano64_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/common frdm_k64f build_abfade7 -DCONFIG_CBPRINTF_NANO=y -DCONFIG_CBPRINTF_FULL_INTEGRAL=y kernel.common.nano64 tests/kernel/common -DCONFIG_CBPRINTF_NANO=y -DCONFIG_CBPRINTF_FULL_INTEGRAL=y'''
        script {
          test_base_userspace_kernel_common_nano64_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/common/build_abfade7 kernel.common.nano64 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/common/build_abfade7'
        script {
          test_base_userspace_kernel_common_nano64_result = "SUCCESS"
        }
      }
      script {
        echo test_base_userspace_kernel_common_nano64_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.nano64', 'result': test_base_userspace_kernel_common_nano64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.nano64', 'result': test_base_userspace_kernel_common_nano64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_benchmark_kernel_application_result
   def test_benchmark_benchmark_kernel_application() {
      echo 'Test benchmark.kernel.application'
      echo 'benchmark.kernel.application'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_benchmark_kernel_application_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/app_kernel frdm_k64f build_164c38f benchmark.kernel.application tests/benchmarks/app_kernel'''
        script {
          test_benchmark_benchmark_kernel_application_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/app_kernel/build_164c38f benchmark.kernel.application '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/app_kernel/build_164c38f'
        script {
          test_benchmark_benchmark_kernel_application_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_benchmark_kernel_application_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.application', 'result': test_benchmark_benchmark_kernel_application_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.application', 'result': test_benchmark_benchmark_kernel_application_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_benchmark_kernel_application_fp_arm_result
   def test_benchmark_benchmark_kernel_application_fp_arm() {
      echo 'Test benchmark.kernel.application.fp.arm'
      echo 'benchmark.kernel.application.fp.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_benchmark_kernel_application_fp_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/app_kernel frdm_k64f build_f05ebb1  -DCONF_FILE=prj_fp.conf benchmark.kernel.application.fp.arm tests/benchmarks/app_kernel  -DCONF_FILE=prj_fp.conf'''
        script {
          test_benchmark_benchmark_kernel_application_fp_arm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/app_kernel/build_f05ebb1 benchmark.kernel.application.fp.arm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/app_kernel/build_f05ebb1'
        script {
          test_benchmark_benchmark_kernel_application_fp_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_benchmark_kernel_application_fp_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.application.fp.arm', 'result': test_benchmark_benchmark_kernel_application_fp_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.application.fp.arm', 'result': test_benchmark_benchmark_kernel_application_fp_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_benchmark_kernel_footprints_default_result
   def test_benchmark_benchmark_kernel_footprints_default() {
      echo 'Test benchmark.kernel.footprints.default'
      echo 'benchmark.kernel.footprints.default'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_benchmark_kernel_footprints_default_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/footprints frdm_k64f build_40bf3cb benchmark.kernel.footprints.default tests/benchmarks/footprints'''
        script {
          test_benchmark_benchmark_kernel_footprints_default_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/footprints/build_40bf3cb'
        script {
          test_benchmark_benchmark_kernel_footprints_default_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_benchmark_kernel_footprints_default_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.footprints.default', 'result': test_benchmark_benchmark_kernel_footprints_default_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.footprints.default', 'result': test_benchmark_benchmark_kernel_footprints_default_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_benchmark_kernel_footprints_pm_result
   def test_benchmark_benchmark_kernel_footprints_pm() {
      echo 'Test benchmark.kernel.footprints.pm'
      echo 'benchmark.kernel.footprints.pm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_benchmark_kernel_footprints_pm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/footprints frdm_k64f build_4da64c4  -DCONF_FILE=prj_pm.conf benchmark.kernel.footprints.pm tests/benchmarks/footprints  -DCONF_FILE=prj_pm.conf'''
        script {
          test_benchmark_benchmark_kernel_footprints_pm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/footprints/build_4da64c4'
        script {
          test_benchmark_benchmark_kernel_footprints_pm_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_benchmark_kernel_footprints_pm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.footprints.pm', 'result': test_benchmark_benchmark_kernel_footprints_pm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.footprints.pm', 'result': test_benchmark_benchmark_kernel_footprints_pm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_benchmark_kernel_scheduler_result
   def test_benchmark_benchmark_kernel_scheduler() {
      echo 'Test benchmark.kernel.scheduler'
      echo 'benchmark.kernel.scheduler'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_benchmark_kernel_scheduler_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/sched frdm_k64f build_409e409 benchmark.kernel.scheduler tests/benchmarks/sched'''
        script {
          test_benchmark_benchmark_kernel_scheduler_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/sched/build_409e409 benchmark.kernel.scheduler '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/sched/build_409e409'
        script {
          test_benchmark_benchmark_kernel_scheduler_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_benchmark_kernel_scheduler_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.scheduler', 'result': test_benchmark_benchmark_kernel_scheduler_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.scheduler', 'result': test_benchmark_benchmark_kernel_scheduler_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_benchmark_kernel_core_result
   def test_benchmark_benchmark_kernel_core() {
      echo 'Test benchmark.kernel.core'
      echo 'benchmark.kernel.core'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_benchmark_kernel_core_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/sys_kernel frdm_k64f build_52cccf9 benchmark.kernel.core tests/benchmarks/sys_kernel'''
        script {
          test_benchmark_benchmark_kernel_core_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/sys_kernel/build_52cccf9 benchmark.kernel.core '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/sys_kernel/build_52cccf9'
        script {
          test_benchmark_benchmark_kernel_core_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_benchmark_kernel_core_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.core', 'result': test_benchmark_benchmark_kernel_core_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.core', 'result': test_benchmark_benchmark_kernel_core_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath_result
   def test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath() {
      echo 'Test benchmark.cmsis_dsp.basicmath'
      echo 'benchmark.cmsis_dsp.basicmath'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/cmsis_dsp/basicmath frdm_k64f build_fc437e5 benchmark.cmsis_dsp.basicmath tests/benchmarks/cmsis_dsp/basicmath'''
        script {
          test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/cmsis_dsp/basicmath/build_fc437e5 benchmark.cmsis_dsp.basicmath '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/cmsis_dsp/basicmath/build_fc437e5'
        script {
          test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.cmsis_dsp.basicmath', 'result': test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.cmsis_dsp.basicmath', 'result': test_benchmark_cmsis_dsp_benchmark_cmsis_dsp_basicmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu_result
   def test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu() {
      echo 'Test benchmark.cmsis_dsp.basicmath.fpu'
      echo 'benchmark.cmsis_dsp.basicmath.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/cmsis_dsp/basicmath frdm_k64f build_89dd8b0 -DCONFIG_FPU=y benchmark.cmsis_dsp.basicmath.fpu tests/benchmarks/cmsis_dsp/basicmath -DCONFIG_FPU=y'''
        script {
          test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/cmsis_dsp/basicmath/build_89dd8b0 benchmark.cmsis_dsp.basicmath.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/cmsis_dsp/basicmath/build_89dd8b0'
        script {
          test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.cmsis_dsp.basicmath.fpu', 'result': test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.cmsis_dsp.basicmath.fpu', 'result': test_benchmark_cmsis_dsp_fpu_benchmark_cmsis_dsp_basicmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_dlist_benchmark_data_structures_result
   def test_benchmark_dlist_benchmark_data_structures() {
      echo 'Test benchmark.data_structures'
      echo 'benchmark.data_structures'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_dlist_benchmark_data_structures_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/data_structure_perf/dlist_perf frdm_k64f build_f6ee9af benchmark.data_structures tests/benchmarks/data_structure_perf/dlist_perf'''
        script {
          test_benchmark_dlist_benchmark_data_structures_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/data_structure_perf/dlist_perf/build_f6ee9af benchmark.data_structures '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/data_structure_perf/dlist_perf/build_f6ee9af'
        script {
          test_benchmark_dlist_benchmark_data_structures_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_dlist_benchmark_data_structures_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.data_structures', 'result': test_benchmark_dlist_benchmark_data_structures_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.data_structures', 'result': test_benchmark_dlist_benchmark_data_structures_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_rbtree_benchmark_data_structures_rbtree_perf_result
   def test_benchmark_rbtree_benchmark_data_structures_rbtree_perf() {
      echo 'Test benchmark.data_structures.rbtree_perf'
      echo 'benchmark.data_structures.rbtree_perf'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_rbtree_benchmark_data_structures_rbtree_perf_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/data_structure_perf/rbtree_perf frdm_k64f build_c598dac benchmark.data_structures.rbtree_perf tests/benchmarks/data_structure_perf/rbtree_perf'''
        script {
          test_benchmark_rbtree_benchmark_data_structures_rbtree_perf_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/benchmarks/data_structure_perf/rbtree_perf/build_c598dac benchmark.data_structures.rbtree_perf '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/data_structure_perf/rbtree_perf/build_c598dac'
        script {
          test_benchmark_rbtree_benchmark_data_structures_rbtree_perf_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_rbtree_benchmark_data_structures_rbtree_perf_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.data_structures.rbtree_perf', 'result': test_benchmark_rbtree_benchmark_data_structures_rbtree_perf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.data_structures.rbtree_perf', 'result': test_benchmark_rbtree_benchmark_data_structures_rbtree_perf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_benchmark_userspace_benchmark_kernel_footprints_userspace_result
   def test_benchmark_userspace_benchmark_kernel_footprints_userspace() {
      echo 'Test benchmark.kernel.footprints.userspace'
      echo 'benchmark.kernel.footprints.userspace'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_benchmark_userspace_benchmark_kernel_footprints_userspace_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/benchmarks/footprints frdm_k64f build_bd91818  -DCONF_FILE=prj_userspace.conf benchmark.kernel.footprints.userspace tests/benchmarks/footprints  -DCONF_FILE=prj_userspace.conf'''
        script {
          test_benchmark_userspace_benchmark_kernel_footprints_userspace_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/benchmarks/footprints/build_bd91818'
        script {
          test_benchmark_userspace_benchmark_kernel_footprints_userspace_result = "SUCCESS"
        }
      }
      script {
        echo test_benchmark_userspace_benchmark_kernel_footprints_userspace_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.footprints.userspace', 'result': test_benchmark_userspace_benchmark_kernel_footprints_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'benchmark.kernel.footprints.userspace', 'result': test_benchmark_userspace_benchmark_kernel_footprints_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield_result
   def test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield() {
      echo 'Test sample.bluetooth.peripheral_hr.frdm_kw41z_shield'
      echo 'sample.bluetooth.peripheral_hr.frdm_kw41z_shield'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/bluetooth/peripheral_hr frdm_k64f build_9ea58d1  -DSHIELD=frdm_kw41z sample.bluetooth.peripheral_hr.frdm_kw41z_shield samples/bluetooth/peripheral_hr  -DSHIELD=frdm_kw41z'''
        script {
          test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/bluetooth/peripheral_hr/build_9ea58d1 sample.bluetooth.peripheral_hr.frdm_kw41z_shield '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/bluetooth/peripheral_hr/build_9ea58d1'
        script {
          test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield_result = "SUCCESS"
        }
      }
      script {
        echo test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.bluetooth.peripheral_hr.frdm_kw41z_shield', 'result': test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.bluetooth.peripheral_hr.frdm_kw41z_shield', 'result': test_bluetooth_sample_bluetooth_peripheral_hr_frdm_kw41z_shield_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield_result
   def test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield() {
      echo 'Test sample.bluetooth.peripheral_ht.frdm_kw41z_shield'
      echo 'sample.bluetooth.peripheral_ht.frdm_kw41z_shield'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/bluetooth/peripheral_ht frdm_k64f build_c74faaf  -DSHIELD=frdm_kw41z sample.bluetooth.peripheral_ht.frdm_kw41z_shield samples/bluetooth/peripheral_ht  -DSHIELD=frdm_kw41z'''
        script {
          test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/bluetooth/peripheral_ht/build_c74faaf sample.bluetooth.peripheral_ht.frdm_kw41z_shield '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/bluetooth/peripheral_ht/build_c74faaf'
        script {
          test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield_result = "SUCCESS"
        }
      }
      script {
        echo test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.bluetooth.peripheral_ht.frdm_kw41z_shield', 'result': test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.bluetooth.peripheral_ht.frdm_kw41z_shield', 'result': test_bluetooth_sample_bluetooth_peripheral_ht_frdm_kw41z_shield_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_bluetooth_sample_mcumg_smp_svr_udp_result
   def test_bluetooth_sample_mcumg_smp_svr_udp() {
      echo 'Test sample.mcumg.smp_svr.udp'
      echo 'sample.mcumg.smp_svr.udp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_bluetooth_sample_mcumg_smp_svr_udp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/mgmt/mcumgr/smp_svr frdm_k64f build_f9a3254  -DOVERLAY_CONFIG=overlay-udp.conf sample.mcumg.smp_svr.udp samples/subsys/mgmt/mcumgr/smp_svr  -DOVERLAY_CONFIG=overlay-udp.conf'''
        script {
          test_bluetooth_sample_mcumg_smp_svr_udp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/mgmt/mcumgr/smp_svr/build_f9a3254 sample.mcumg.smp_svr.udp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/mgmt/mcumgr/smp_svr/build_f9a3254'
        script {
          test_bluetooth_sample_mcumg_smp_svr_udp_result = "SUCCESS"
        }
      }
      script {
        echo test_bluetooth_sample_mcumg_smp_svr_udp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.mcumg.smp_svr.udp', 'result': test_bluetooth_sample_mcumg_smp_svr_udp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.mcumg.smp_svr.udp', 'result': test_bluetooth_sample_mcumg_smp_svr_udp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_can_canopen_sample_modules_canopennode_program_download_result
   def test_can_canopen_sample_modules_canopennode_program_download() {
      echo 'Test sample.modules.canopennode.program_download'
      echo 'sample.modules.canopennode.program_download'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_can_canopen_sample_modules_canopennode_program_download_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/modules/canopennode frdm_k64f build_a92bbaf -DCONFIG_BOOTLOADER_MCUBOOT=y sample.modules.canopennode.program_download samples/modules/canopennode -DCONFIG_BOOTLOADER_MCUBOOT=y'''
        script {
          test_can_canopen_sample_modules_canopennode_program_download_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/modules/canopennode/build_a92bbaf'
        script {
          test_can_canopen_sample_modules_canopennode_program_download_result = "SUCCESS"
        }
      }
      script {
        echo test_can_canopen_sample_modules_canopennode_program_download_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.modules.canopennode.program_download', 'result': test_can_canopen_sample_modules_canopennode_program_download_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.modules.canopennode.program_download', 'result': test_can_canopen_sample_modules_canopennode_program_download_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_can_canopen_sample_modules_canopennode_no_storage_result
   def test_can_canopen_sample_modules_canopennode_no_storage() {
      echo 'Test sample.modules.canopennode.no_storage'
      echo 'sample.modules.canopennode.no_storage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_can_canopen_sample_modules_canopennode_no_storage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/modules/canopennode frdm_k64f build_48056b1  -DCONF_FILE=prj_no_storage.conf sample.modules.canopennode.no_storage samples/modules/canopennode  -DCONF_FILE=prj_no_storage.conf'''
        script {
          test_can_canopen_sample_modules_canopennode_no_storage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/modules/canopennode/build_48056b1 sample.modules.canopennode.no_storage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/modules/canopennode/build_48056b1'
        script {
          test_can_canopen_sample_modules_canopennode_no_storage_result = "SUCCESS"
        }
      }
      script {
        echo test_can_canopen_sample_modules_canopennode_no_storage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.modules.canopennode.no_storage', 'result': test_can_canopen_sample_modules_canopennode_no_storage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.modules.canopennode.no_storage', 'result': test_can_canopen_sample_modules_canopennode_no_storage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_can_isotp_can_isotp_conformance_result
   def test_can_isotp_can_isotp_conformance() {
      echo 'Test can.isotp.conformance'
      echo 'can.isotp.conformance'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_can_isotp_can_isotp_conformance_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/canbus/isotp/conformance frdm_k64f build_37d40b6 can.isotp.conformance tests/subsys/canbus/isotp/conformance'''
        script {
          test_can_isotp_can_isotp_conformance_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/canbus/isotp/conformance/build_37d40b6 can.isotp.conformance '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/canbus/isotp/conformance/build_37d40b6'
        script {
          test_can_isotp_can_isotp_conformance_result = "SUCCESS"
        }
      }
      script {
        echo test_can_isotp_can_isotp_conformance_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'can.isotp.conformance', 'result': test_can_isotp_can_isotp_conformance_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'can.isotp.conformance', 'result': test_can_isotp_can_isotp_conformance_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_can_isotp_can_isotp_implemmentation_result
   def test_can_isotp_can_isotp_implemmentation() {
      echo 'Test can.isotp.implemmentation'
      echo 'can.isotp.implemmentation'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_can_isotp_can_isotp_implemmentation_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/canbus/isotp/implementation frdm_k64f build_cd695a8 can.isotp.implemmentation tests/subsys/canbus/isotp/implementation'''
        script {
          test_can_isotp_can_isotp_implemmentation_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/canbus/isotp/implementation/build_cd695a8 can.isotp.implemmentation '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/canbus/isotp/implementation/build_cd695a8'
        script {
          test_can_isotp_can_isotp_implemmentation_result = "SUCCESS"
        }
      }
      script {
        echo test_can_isotp_can_isotp_implemmentation_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'can.isotp.implemmentation', 'result': test_can_isotp_can_isotp_implemmentation_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'can.isotp.implemmentation', 'result': test_can_isotp_can_isotp_implemmentation_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cbprintf_lib_cbprintf_fp_printk_result
   def test_cbprintf_lib_cbprintf_fp_printk() {
      echo 'Test lib.cbprintf_fp.printk'
      echo 'lib.cbprintf_fp.printk'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cbprintf_lib_cbprintf_fp_printk_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cbprintf_fp frdm_k64f build_4ac5825 -DCONFIG_APP_FORMATTER_PRINTK=y lib.cbprintf_fp.printk tests/lib/cbprintf_fp -DCONFIG_APP_FORMATTER_PRINTK=y'''
        script {
          test_cbprintf_lib_cbprintf_fp_printk_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cbprintf_fp/build_4ac5825 lib.cbprintf_fp.printk '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cbprintf_fp/build_4ac5825'
        script {
          test_cbprintf_lib_cbprintf_fp_printk_result = "SUCCESS"
        }
      }
      script {
        echo test_cbprintf_lib_cbprintf_fp_printk_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printk', 'result': test_cbprintf_lib_cbprintf_fp_printk_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printk', 'result': test_cbprintf_lib_cbprintf_fp_printk_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cbprintf_lib_cbprintf_fp_printf_result
   def test_cbprintf_lib_cbprintf_fp_printf() {
      echo 'Test lib.cbprintf_fp.printf'
      echo 'lib.cbprintf_fp.printf'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cbprintf_lib_cbprintf_fp_printf_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cbprintf_fp frdm_k64f build_3fde892 -DCONFIG_APP_FORMATTER_PRINTF=y lib.cbprintf_fp.printf tests/lib/cbprintf_fp -DCONFIG_APP_FORMATTER_PRINTF=y'''
        script {
          test_cbprintf_lib_cbprintf_fp_printf_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cbprintf_fp/build_3fde892 lib.cbprintf_fp.printf '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cbprintf_fp/build_3fde892'
        script {
          test_cbprintf_lib_cbprintf_fp_printf_result = "SUCCESS"
        }
      }
      script {
        echo test_cbprintf_lib_cbprintf_fp_printf_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printf', 'result': test_cbprintf_lib_cbprintf_fp_printf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printf', 'result': test_cbprintf_lib_cbprintf_fp_printf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cbprintf_lib_cbprintf_fp_printf_nl_result
   def test_cbprintf_lib_cbprintf_fp_printf_nl() {
      echo 'Test lib.cbprintf_fp.printf_nl'
      echo 'lib.cbprintf_fp.printf_nl'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cbprintf_lib_cbprintf_fp_printf_nl_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cbprintf_fp frdm_k64f build_04d93e7 -DCONFIG_APP_FORMATTER_PRINTF=y -DCONFIG_NEWLIB_LIBC=y lib.cbprintf_fp.printf_nl tests/lib/cbprintf_fp -DCONFIG_APP_FORMATTER_PRINTF=y -DCONFIG_NEWLIB_LIBC=y'''
        script {
          test_cbprintf_lib_cbprintf_fp_printf_nl_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cbprintf_fp/build_04d93e7 lib.cbprintf_fp.printf_nl '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cbprintf_fp/build_04d93e7'
        script {
          test_cbprintf_lib_cbprintf_fp_printf_nl_result = "SUCCESS"
        }
      }
      script {
        echo test_cbprintf_lib_cbprintf_fp_printf_nl_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printf_nl', 'result': test_cbprintf_lib_cbprintf_fp_printf_nl_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printf_nl', 'result': test_cbprintf_lib_cbprintf_fp_printf_nl_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cbprintf_lib_cbprintf_fp_printfcb_result
   def test_cbprintf_lib_cbprintf_fp_printfcb() {
      echo 'Test lib.cbprintf_fp.printfcb'
      echo 'lib.cbprintf_fp.printfcb'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cbprintf_lib_cbprintf_fp_printfcb_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cbprintf_fp frdm_k64f build_e64def6 -DCONFIG_APP_FORMATTER_PRINTFCB=y lib.cbprintf_fp.printfcb tests/lib/cbprintf_fp -DCONFIG_APP_FORMATTER_PRINTFCB=y'''
        script {
          test_cbprintf_lib_cbprintf_fp_printfcb_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cbprintf_fp/build_e64def6 lib.cbprintf_fp.printfcb '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cbprintf_fp/build_e64def6'
        script {
          test_cbprintf_lib_cbprintf_fp_printfcb_result = "SUCCESS"
        }
      }
      script {
        echo test_cbprintf_lib_cbprintf_fp_printfcb_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printfcb', 'result': test_cbprintf_lib_cbprintf_fp_printfcb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printfcb', 'result': test_cbprintf_lib_cbprintf_fp_printfcb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cbprintf_lib_cbprintf_fp_printfcb_nl_result
   def test_cbprintf_lib_cbprintf_fp_printfcb_nl() {
      echo 'Test lib.cbprintf_fp.printfcb_nl'
      echo 'lib.cbprintf_fp.printfcb_nl'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cbprintf_lib_cbprintf_fp_printfcb_nl_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cbprintf_fp frdm_k64f build_4bdaa85 -DCONFIG_APP_FORMATTER_PRINTFCB=y -DCONFIG_NEWLIB_LIBC=y lib.cbprintf_fp.printfcb_nl tests/lib/cbprintf_fp -DCONFIG_APP_FORMATTER_PRINTFCB=y -DCONFIG_NEWLIB_LIBC=y'''
        script {
          test_cbprintf_lib_cbprintf_fp_printfcb_nl_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cbprintf_fp/build_4bdaa85 lib.cbprintf_fp.printfcb_nl '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cbprintf_fp/build_4bdaa85'
        script {
          test_cbprintf_lib_cbprintf_fp_printfcb_nl_result = "SUCCESS"
        }
      }
      script {
        echo test_cbprintf_lib_cbprintf_fp_printfcb_nl_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printfcb_nl', 'result': test_cbprintf_lib_cbprintf_fp_printfcb_nl_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.printfcb_nl', 'result': test_cbprintf_lib_cbprintf_fp_printfcb_nl_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cbprintf_lib_cbprintf_fp_fprintf_result
   def test_cbprintf_lib_cbprintf_fp_fprintf() {
      echo 'Test lib.cbprintf_fp.fprintf'
      echo 'lib.cbprintf_fp.fprintf'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cbprintf_lib_cbprintf_fp_fprintf_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cbprintf_fp frdm_k64f build_91367ea -DCONFIG_APP_FORMATTER_FPRINTF=y lib.cbprintf_fp.fprintf tests/lib/cbprintf_fp -DCONFIG_APP_FORMATTER_FPRINTF=y'''
        script {
          test_cbprintf_lib_cbprintf_fp_fprintf_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cbprintf_fp/build_91367ea lib.cbprintf_fp.fprintf '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cbprintf_fp/build_91367ea'
        script {
          test_cbprintf_lib_cbprintf_fp_fprintf_result = "SUCCESS"
        }
      }
      script {
        echo test_cbprintf_lib_cbprintf_fp_fprintf_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.fprintf', 'result': test_cbprintf_lib_cbprintf_fp_fprintf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.fprintf', 'result': test_cbprintf_lib_cbprintf_fp_fprintf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cbprintf_lib_cbprintf_fp_fprintfcb_result
   def test_cbprintf_lib_cbprintf_fp_fprintfcb() {
      echo 'Test lib.cbprintf_fp.fprintfcb'
      echo 'lib.cbprintf_fp.fprintfcb'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cbprintf_lib_cbprintf_fp_fprintfcb_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cbprintf_fp frdm_k64f build_0f1e4ea -DCONFIG_APP_FORMATTER_FPRINTFCB=y lib.cbprintf_fp.fprintfcb tests/lib/cbprintf_fp -DCONFIG_APP_FORMATTER_FPRINTFCB=y'''
        script {
          test_cbprintf_lib_cbprintf_fp_fprintfcb_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cbprintf_fp/build_0f1e4ea lib.cbprintf_fp.fprintfcb '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cbprintf_fp/build_0f1e4ea'
        script {
          test_cbprintf_lib_cbprintf_fp_fprintfcb_result = "SUCCESS"
        }
      }
      script {
        echo test_cbprintf_lib_cbprintf_fp_fprintfcb_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.fprintfcb', 'result': test_cbprintf_lib_cbprintf_fp_fprintfcb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.cbprintf_fp.fprintfcb', 'result': test_cbprintf_lib_cbprintf_fp_fprintfcb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_ignore_faults_libraries_libc_result
   def test_clib_ignore_faults_libraries_libc() {
      echo 'Test libraries.libc'
      echo 'libraries.libc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_ignore_faults_libraries_libc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/c_lib frdm_k64f build_078df88 libraries.libc tests/lib/c_lib'''
        script {
          test_clib_ignore_faults_libraries_libc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/c_lib/build_078df88 libraries.libc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/c_lib/build_078df88'
        script {
          test_clib_ignore_faults_libraries_libc_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_ignore_faults_libraries_libc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc', 'result': test_clib_ignore_faults_libraries_libc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc', 'result': test_clib_ignore_faults_libraries_libc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_result
   def test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc() {
      echo 'Test libraries.libc.minimal.mem_alloc'
      echo 'libraries.libc.minimal.mem_alloc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/mem_alloc frdm_k64f build_6ab94b0  -DCONF_FILE=prj.conf libraries.libc.minimal.mem_alloc tests/lib/mem_alloc  -DCONF_FILE=prj.conf'''
        script {
          test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/mem_alloc/build_6ab94b0 libraries.libc.minimal.mem_alloc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/mem_alloc/build_6ab94b0'
        script {
          test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.minimal.mem_alloc', 'result': test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.minimal.mem_alloc', 'result': test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing_result
   def test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing() {
      echo 'Test libraries.libc.minimal.mem_alloc_negative_testing'
      echo 'libraries.libc.minimal.mem_alloc_negative_testing'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/mem_alloc frdm_k64f build_f871910  -DCONF_FILE=prj_negative_testing.conf libraries.libc.minimal.mem_alloc_negative_testing tests/lib/mem_alloc  -DCONF_FILE=prj_negative_testing.conf'''
        script {
          test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/mem_alloc/build_f871910 libraries.libc.minimal.mem_alloc_negative_testing '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/mem_alloc/build_f871910'
        script {
          test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.minimal.mem_alloc_negative_testing', 'result': test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.minimal.mem_alloc_negative_testing', 'result': test_clib_minimal_libc_userspace_libraries_libc_minimal_mem_alloc_negative_testing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_libraries_libc_newlib_thread_safety_result
   def test_clib_newlib_libraries_libc_newlib_thread_safety() {
      echo 'Test libraries.libc.newlib.thread_safety'
      echo 'libraries.libc.newlib.thread_safety'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_libraries_libc_newlib_thread_safety_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_36fb2be libraries.libc.newlib.thread_safety tests/lib/newlib/thread_safety'''
        script {
          test_clib_newlib_libraries_libc_newlib_thread_safety_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_36fb2be libraries.libc.newlib.thread_safety '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_36fb2be'
        script {
          test_clib_newlib_libraries_libc_newlib_thread_safety_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_libraries_libc_newlib_thread_safety_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety', 'result': test_clib_newlib_libraries_libc_newlib_thread_safety_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety', 'result': test_clib_newlib_libraries_libc_newlib_thread_safety_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_libraries_libc_newlib_nano_thread_safety_result
   def test_clib_newlib_libraries_libc_newlib_nano_thread_safety() {
      echo 'Test libraries.libc.newlib_nano.thread_safety'
      echo 'libraries.libc.newlib_nano.thread_safety'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_libraries_libc_newlib_nano_thread_safety_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_2a28936 -DCONFIG_NEWLIB_LIBC_NANO=y libraries.libc.newlib_nano.thread_safety tests/lib/newlib/thread_safety -DCONFIG_NEWLIB_LIBC_NANO=y'''
        script {
          test_clib_newlib_libraries_libc_newlib_nano_thread_safety_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_2a28936 libraries.libc.newlib_nano.thread_safety '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_2a28936'
        script {
          test_clib_newlib_libraries_libc_newlib_nano_thread_safety_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_libraries_libc_newlib_nano_thread_safety_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety', 'result': test_clib_newlib_libraries_libc_newlib_nano_thread_safety_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety', 'result': test_clib_newlib_libraries_libc_newlib_nano_thread_safety_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_libraries_libc_newlib_thread_safety_stress_result
   def test_clib_newlib_libraries_libc_newlib_thread_safety_stress() {
      echo 'Test libraries.libc.newlib.thread_safety.stress'
      echo 'libraries.libc.newlib.thread_safety.stress'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_libraries_libc_newlib_thread_safety_stress_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_afd5526 -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y libraries.libc.newlib.thread_safety.stress tests/lib/newlib/thread_safety -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y'''
        script {
          test_clib_newlib_libraries_libc_newlib_thread_safety_stress_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_afd5526 libraries.libc.newlib.thread_safety.stress '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_afd5526'
        script {
          test_clib_newlib_libraries_libc_newlib_thread_safety_stress_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_libraries_libc_newlib_thread_safety_stress_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety.stress', 'result': test_clib_newlib_libraries_libc_newlib_thread_safety_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety.stress', 'result': test_clib_newlib_libraries_libc_newlib_thread_safety_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress_result
   def test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress() {
      echo 'Test libraries.libc.newlib_nano.thread_safety.stress'
      echo 'libraries.libc.newlib_nano.thread_safety.stress'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_1118fa9 -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y -DCONFIG_NEWLIB_LIBC_NANO=y libraries.libc.newlib_nano.thread_safety.stress tests/lib/newlib/thread_safety -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y -DCONFIG_NEWLIB_LIBC_NANO=y'''
        script {
          test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_1118fa9 libraries.libc.newlib_nano.thread_safety.stress '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_1118fa9'
        script {
          test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety.stress', 'result': test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety.stress', 'result': test_clib_newlib_libraries_libc_newlib_nano_thread_safety_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc_result
   def test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc() {
      echo 'Test libraries.libc.newlib.mem_alloc'
      echo 'libraries.libc.newlib.mem_alloc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/mem_alloc frdm_k64f build_4ed6270  -DCONF_FILE=prj_newlib.conf libraries.libc.newlib.mem_alloc tests/lib/mem_alloc  -DCONF_FILE=prj_newlib.conf'''
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/mem_alloc/build_4ed6270 libraries.libc.newlib.mem_alloc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/mem_alloc/build_4ed6270'
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.mem_alloc', 'result': test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.mem_alloc', 'result': test_clib_newlib_userspace_libraries_libc_newlib_mem_alloc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc_result
   def test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc() {
      echo 'Test libraries.libc.newlib_nano.mem_alloc'
      echo 'libraries.libc.newlib_nano.mem_alloc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/mem_alloc frdm_k64f build_acfd85e  -DCONF_FILE=prj_newlibnano.conf libraries.libc.newlib_nano.mem_alloc tests/lib/mem_alloc  -DCONF_FILE=prj_newlibnano.conf'''
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/mem_alloc/build_acfd85e libraries.libc.newlib_nano.mem_alloc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/mem_alloc/build_acfd85e'
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.mem_alloc', 'result': test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.mem_alloc', 'result': test_clib_newlib_userspace_libraries_libc_newlib_nano_mem_alloc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_result
   def test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace() {
      echo 'Test libraries.libc.newlib.thread_safety.userspace'
      echo 'libraries.libc.newlib.thread_safety.userspace'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_0c3f6b4  -DCONF_FILE=prj_userspace.conf libraries.libc.newlib.thread_safety.userspace tests/lib/newlib/thread_safety  -DCONF_FILE=prj_userspace.conf'''
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_0c3f6b4 libraries.libc.newlib.thread_safety.userspace '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_0c3f6b4'
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety.userspace', 'result': test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety.userspace', 'result': test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_result
   def test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace() {
      echo 'Test libraries.libc.newlib_nano.thread_safety.userspace'
      echo 'libraries.libc.newlib_nano.thread_safety.userspace'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_b9cd574  -DCONF_FILE=prj_userspace.conf -DCONFIG_NEWLIB_LIBC_NANO=y libraries.libc.newlib_nano.thread_safety.userspace tests/lib/newlib/thread_safety  -DCONF_FILE=prj_userspace.conf -DCONFIG_NEWLIB_LIBC_NANO=y'''
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_b9cd574 libraries.libc.newlib_nano.thread_safety.userspace '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_b9cd574'
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety.userspace', 'result': test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety.userspace', 'result': test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress_result
   def test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress() {
      echo 'Test libraries.libc.newlib.thread_safety.userspace.stress'
      echo 'libraries.libc.newlib.thread_safety.userspace.stress'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_f85ea4a  -DCONF_FILE=prj_userspace.conf -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y -DCONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE=8192 libraries.libc.newlib.thread_safety.userspace.stress tests/lib/newlib/thread_safety  -DCONF_FILE=prj_userspace.conf -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y -DCONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE=8192'''
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_f85ea4a libraries.libc.newlib.thread_safety.userspace.stress '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_f85ea4a'
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety.userspace.stress', 'result': test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib.thread_safety.userspace.stress', 'result': test_clib_newlib_userspace_libraries_libc_newlib_thread_safety_userspace_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress_result
   def test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress() {
      echo 'Test libraries.libc.newlib_nano.thread_safety.userspace.stress'
      echo 'libraries.libc.newlib_nano.thread_safety.userspace.stress'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/newlib/thread_safety frdm_k64f build_bd9cbd7  -DCONF_FILE=prj_userspace.conf -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y -DCONFIG_NEWLIB_LIBC_NANO=y -DCONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE=2048 libraries.libc.newlib_nano.thread_safety.userspace.stress tests/lib/newlib/thread_safety  -DCONF_FILE=prj_userspace.conf -DCONFIG_NEWLIB_THREAD_SAFETY_TEST_STRESS=y -DCONFIG_NEWLIB_LIBC_NANO=y -DCONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE=2048'''
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/newlib/thread_safety/build_bd9cbd7 libraries.libc.newlib_nano.thread_safety.userspace.stress '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/newlib/thread_safety/build_bd9cbd7'
        script {
          test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress_result = "SUCCESS"
        }
      }
      script {
        echo test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety.userspace.stress', 'result': test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.newlib_nano.thread_safety.userspace.stress', 'result': test_clib_newlib_userspace_libraries_libc_newlib_nano_thread_safety_userspace_stress_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_basicmath_result
   def test_cmsis_dsp_libraries_cmsis_dsp_basicmath() {
      echo 'Test libraries.cmsis_dsp.basicmath'
      echo 'libraries.cmsis_dsp.basicmath'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_basicmath_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/basicmath frdm_k64f build_62725f5 libraries.cmsis_dsp.basicmath tests/lib/cmsis_dsp/basicmath'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_basicmath_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/basicmath/build_62725f5 libraries.cmsis_dsp.basicmath '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/basicmath/build_62725f5'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_basicmath_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_basicmath_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.basicmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_basicmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.basicmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_basicmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_bayes_result
   def test_cmsis_dsp_libraries_cmsis_dsp_bayes() {
      echo 'Test libraries.cmsis_dsp.bayes'
      echo 'libraries.cmsis_dsp.bayes'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_bayes_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/bayes frdm_k64f build_59fcfd4 libraries.cmsis_dsp.bayes tests/lib/cmsis_dsp/bayes'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_bayes_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/bayes/build_59fcfd4 libraries.cmsis_dsp.bayes '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/bayes/build_59fcfd4'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_bayes_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_bayes_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.bayes', 'result': test_cmsis_dsp_libraries_cmsis_dsp_bayes_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.bayes', 'result': test_cmsis_dsp_libraries_cmsis_dsp_bayes_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_complexmath_result
   def test_cmsis_dsp_libraries_cmsis_dsp_complexmath() {
      echo 'Test libraries.cmsis_dsp.complexmath'
      echo 'libraries.cmsis_dsp.complexmath'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_complexmath_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/complexmath frdm_k64f build_d7dada1 libraries.cmsis_dsp.complexmath tests/lib/cmsis_dsp/complexmath'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_complexmath_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/complexmath/build_d7dada1 libraries.cmsis_dsp.complexmath '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/complexmath/build_d7dada1'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_complexmath_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_complexmath_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.complexmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_complexmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.complexmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_complexmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_distance_result
   def test_cmsis_dsp_libraries_cmsis_dsp_distance() {
      echo 'Test libraries.cmsis_dsp.distance'
      echo 'libraries.cmsis_dsp.distance'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_distance_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/distance frdm_k64f build_6e8cdba libraries.cmsis_dsp.distance tests/lib/cmsis_dsp/distance'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_distance_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/distance/build_6e8cdba libraries.cmsis_dsp.distance '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/distance/build_6e8cdba'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_distance_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_distance_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.distance', 'result': test_cmsis_dsp_libraries_cmsis_dsp_distance_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.distance', 'result': test_cmsis_dsp_libraries_cmsis_dsp_distance_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_fastmath_result
   def test_cmsis_dsp_libraries_cmsis_dsp_fastmath() {
      echo 'Test libraries.cmsis_dsp.fastmath'
      echo 'libraries.cmsis_dsp.fastmath'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_fastmath_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/fastmath frdm_k64f build_f8479e9 libraries.cmsis_dsp.fastmath tests/lib/cmsis_dsp/fastmath'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_fastmath_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/fastmath/build_f8479e9 libraries.cmsis_dsp.fastmath '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/fastmath/build_f8479e9'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_fastmath_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_fastmath_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.fastmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_fastmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.fastmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_fastmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad_result
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad() {
      echo 'Test libraries.cmsis_dsp.filtering.biquad'
      echo 'libraries.cmsis_dsp.filtering.biquad'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_6ec9cf1  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_BIQUAD=y libraries.cmsis_dsp.filtering.biquad tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_BIQUAD=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_6ec9cf1 libraries.cmsis_dsp.filtering.biquad '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_6ec9cf1'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.biquad', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.biquad', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_biquad_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim_result
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim() {
      echo 'Test libraries.cmsis_dsp.filtering.decim'
      echo 'libraries.cmsis_dsp.filtering.decim'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_b3efe92  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_DECIM=y libraries.cmsis_dsp.filtering.decim tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_DECIM=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_b3efe92 libraries.cmsis_dsp.filtering.decim '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_b3efe92'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.decim', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.decim', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_decim_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir_result
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir() {
      echo 'Test libraries.cmsis_dsp.filtering.fir'
      echo 'libraries.cmsis_dsp.filtering.fir'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_fbb01ca  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_FIR=y libraries.cmsis_dsp.filtering.fir tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_FIR=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_fbb01ca libraries.cmsis_dsp.filtering.fir '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_fbb01ca'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.fir', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.fir', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_fir_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc_result
   def test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc() {
      echo 'Test libraries.cmsis_dsp.filtering.misc'
      echo 'libraries.cmsis_dsp.filtering.misc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_0ab9452  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_MISC=y libraries.cmsis_dsp.filtering.misc tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_MISC=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_0ab9452 libraries.cmsis_dsp.filtering.misc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_0ab9452'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.misc', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.misc', 'result': test_cmsis_dsp_libraries_cmsis_dsp_filtering_misc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_interpolation_result
   def test_cmsis_dsp_libraries_cmsis_dsp_interpolation() {
      echo 'Test libraries.cmsis_dsp.interpolation'
      echo 'libraries.cmsis_dsp.interpolation'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_interpolation_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/interpolation frdm_k64f build_7b9b98f libraries.cmsis_dsp.interpolation tests/lib/cmsis_dsp/interpolation'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_interpolation_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/interpolation/build_7b9b98f libraries.cmsis_dsp.interpolation '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/interpolation/build_7b9b98f'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_interpolation_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_interpolation_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.interpolation', 'result': test_cmsis_dsp_libraries_cmsis_dsp_interpolation_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.interpolation', 'result': test_cmsis_dsp_libraries_cmsis_dsp_interpolation_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_q7'
      echo 'libraries.cmsis_dsp.matrix.unary_q7'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_e54d0ac  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q7=y libraries.cmsis_dsp.matrix.unary_q7 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q7=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_e54d0ac libraries.cmsis_dsp.matrix.unary_q7 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_e54d0ac'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q7', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q7', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q7_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_q15'
      echo 'libraries.cmsis_dsp.matrix.unary_q15'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_884e0ae  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q15=y libraries.cmsis_dsp.matrix.unary_q15 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q15=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_884e0ae libraries.cmsis_dsp.matrix.unary_q15 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_884e0ae'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_q31'
      echo 'libraries.cmsis_dsp.matrix.unary_q31'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_e30423f  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q31=y libraries.cmsis_dsp.matrix.unary_q31 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q31=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_e30423f libraries.cmsis_dsp.matrix.unary_q31 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_e30423f'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_q31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_f16'
      echo 'libraries.cmsis_dsp.matrix.unary_f16'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_51cf5c7  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F16=y libraries.cmsis_dsp.matrix.unary_f16 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F16=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_51cf5c7 libraries.cmsis_dsp.matrix.unary_f16 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_51cf5c7'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_f32'
      echo 'libraries.cmsis_dsp.matrix.unary_f32'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_3fcd625  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F32=y libraries.cmsis_dsp.matrix.unary_f32 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F32=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_3fcd625 libraries.cmsis_dsp.matrix.unary_f32 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_3fcd625'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_f64'
      echo 'libraries.cmsis_dsp.matrix.unary_f64'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_b9f4ad2  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F64=y libraries.cmsis_dsp.matrix.unary_f64 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F64=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_b9f4ad2 libraries.cmsis_dsp.matrix.unary_f64 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_b9f4ad2'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_unary_f64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_q7'
      echo 'libraries.cmsis_dsp.matrix.binary_q7'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_6b2e7bd  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q7=y libraries.cmsis_dsp.matrix.binary_q7 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q7=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_6b2e7bd libraries.cmsis_dsp.matrix.binary_q7 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_6b2e7bd'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q7', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q7', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q7_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_q15'
      echo 'libraries.cmsis_dsp.matrix.binary_q15'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_6d75c5f  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q15=y libraries.cmsis_dsp.matrix.binary_q15 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q15=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_6d75c5f libraries.cmsis_dsp.matrix.binary_q15 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_6d75c5f'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_q31'
      echo 'libraries.cmsis_dsp.matrix.binary_q31'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_41c62fa  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q31=y libraries.cmsis_dsp.matrix.binary_q31 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q31=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_41c62fa libraries.cmsis_dsp.matrix.binary_q31 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_41c62fa'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_q31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_f16'
      echo 'libraries.cmsis_dsp.matrix.binary_f16'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_1a68429  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F16=y libraries.cmsis_dsp.matrix.binary_f16 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F16=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_1a68429 libraries.cmsis_dsp.matrix.binary_f16 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_1a68429'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_f32'
      echo 'libraries.cmsis_dsp.matrix.binary_f32'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_1070667  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F32=y libraries.cmsis_dsp.matrix.binary_f32 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F32=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_1070667 libraries.cmsis_dsp.matrix.binary_f32 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_1070667'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64_result
   def test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_f64'
      echo 'libraries.cmsis_dsp.matrix.binary_f64'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_1073c90  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F64=y libraries.cmsis_dsp.matrix.binary_f64 tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F64=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_1073c90 libraries.cmsis_dsp.matrix.binary_f64 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_1073c90'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_matrix_binary_f64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath_result
   def test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath() {
      echo 'Test libraries.cmsis_dsp.quaternionmath'
      echo 'libraries.cmsis_dsp.quaternionmath'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/quaternionmath frdm_k64f build_2483576 libraries.cmsis_dsp.quaternionmath tests/lib/cmsis_dsp/quaternionmath'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/quaternionmath/build_2483576 libraries.cmsis_dsp.quaternionmath '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/quaternionmath/build_2483576'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.quaternionmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.quaternionmath', 'result': test_cmsis_dsp_libraries_cmsis_dsp_quaternionmath_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_statistics_result
   def test_cmsis_dsp_libraries_cmsis_dsp_statistics() {
      echo 'Test libraries.cmsis_dsp.statistics'
      echo 'libraries.cmsis_dsp.statistics'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_statistics_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/statistics frdm_k64f build_69f801e libraries.cmsis_dsp.statistics tests/lib/cmsis_dsp/statistics'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_statistics_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/statistics/build_69f801e libraries.cmsis_dsp.statistics '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/statistics/build_69f801e'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_statistics_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_statistics_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.statistics', 'result': test_cmsis_dsp_libraries_cmsis_dsp_statistics_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.statistics', 'result': test_cmsis_dsp_libraries_cmsis_dsp_statistics_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_support_result
   def test_cmsis_dsp_libraries_cmsis_dsp_support() {
      echo 'Test libraries.cmsis_dsp.support'
      echo 'libraries.cmsis_dsp.support'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_support_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/support frdm_k64f build_a68d3b2 libraries.cmsis_dsp.support tests/lib/cmsis_dsp/support'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_support_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/support/build_a68d3b2 libraries.cmsis_dsp.support '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/support/build_a68d3b2'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_support_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_support_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.support', 'result': test_cmsis_dsp_libraries_cmsis_dsp_support_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.support', 'result': test_cmsis_dsp_libraries_cmsis_dsp_support_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_svm_result
   def test_cmsis_dsp_libraries_cmsis_dsp_svm() {
      echo 'Test libraries.cmsis_dsp.svm'
      echo 'libraries.cmsis_dsp.svm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_svm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/svm frdm_k64f build_9867bc8 libraries.cmsis_dsp.svm tests/lib/cmsis_dsp/svm'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_svm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/svm/build_9867bc8 libraries.cmsis_dsp.svm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/svm/build_9867bc8'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_svm_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_svm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.svm', 'result': test_cmsis_dsp_libraries_cmsis_dsp_svm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.svm', 'result': test_cmsis_dsp_libraries_cmsis_dsp_svm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15() {
      echo 'Test libraries.cmsis_dsp.transform.cq15'
      echo 'libraries.cmsis_dsp.transform.cq15'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_525ffe4  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ15=y libraries.cmsis_dsp.transform.cq15 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ15=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_525ffe4 libraries.cmsis_dsp.transform.cq15 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_525ffe4'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cq15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15() {
      echo 'Test libraries.cmsis_dsp.transform.rq15'
      echo 'libraries.cmsis_dsp.transform.rq15'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_9fe2ee4  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ15=y libraries.cmsis_dsp.transform.rq15 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ15=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_9fe2ee4 libraries.cmsis_dsp.transform.rq15 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_9fe2ee4'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq15', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rq15_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31() {
      echo 'Test libraries.cmsis_dsp.transform.cq31'
      echo 'libraries.cmsis_dsp.transform.cq31'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_981f856  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ31=y libraries.cmsis_dsp.transform.cq31 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ31=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_981f856 libraries.cmsis_dsp.transform.cq31 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_981f856'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cq31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31() {
      echo 'Test libraries.cmsis_dsp.transform.rq31'
      echo 'libraries.cmsis_dsp.transform.rq31'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_278bc98  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ31=y libraries.cmsis_dsp.transform.rq31 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ31=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_278bc98 libraries.cmsis_dsp.transform.rq31 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_278bc98'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq31', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rq31_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16() {
      echo 'Test libraries.cmsis_dsp.transform.cf16'
      echo 'libraries.cmsis_dsp.transform.cf16'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_24606e9  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF16=y libraries.cmsis_dsp.transform.cf16 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF16=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_24606e9 libraries.cmsis_dsp.transform.cf16 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_24606e9'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cf16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16() {
      echo 'Test libraries.cmsis_dsp.transform.rf16'
      echo 'libraries.cmsis_dsp.transform.rf16'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_f586a67  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF16=y libraries.cmsis_dsp.transform.rf16 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF16=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_f586a67 libraries.cmsis_dsp.transform.rf16 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_f586a67'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf16', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rf16_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32() {
      echo 'Test libraries.cmsis_dsp.transform.cf32'
      echo 'libraries.cmsis_dsp.transform.cf32'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_a934b6e  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF32=y libraries.cmsis_dsp.transform.cf32 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF32=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_a934b6e libraries.cmsis_dsp.transform.cf32 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_a934b6e'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cf32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32() {
      echo 'Test libraries.cmsis_dsp.transform.rf32'
      echo 'libraries.cmsis_dsp.transform.rf32'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_2638ca0  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF32=y libraries.cmsis_dsp.transform.rf32 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF32=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_2638ca0 libraries.cmsis_dsp.transform.rf32 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_2638ca0'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf32', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rf32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64() {
      echo 'Test libraries.cmsis_dsp.transform.cf64'
      echo 'libraries.cmsis_dsp.transform.cf64'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_a984f8c  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF64=y libraries.cmsis_dsp.transform.cf64 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF64=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_a984f8c libraries.cmsis_dsp.transform.cf64 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_a984f8c'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_cf64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64_result
   def test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64() {
      echo 'Test libraries.cmsis_dsp.transform.rf64'
      echo 'libraries.cmsis_dsp.transform.rf64'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_bece96c  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF64=y libraries.cmsis_dsp.transform.rf64 tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF64=y'''
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_bece96c libraries.cmsis_dsp.transform.rf64 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_bece96c'
        script {
          test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf64', 'result': test_cmsis_dsp_libraries_cmsis_dsp_transform_rf64_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu() {
      echo 'Test libraries.cmsis_dsp.basicmath.fpu'
      echo 'libraries.cmsis_dsp.basicmath.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/basicmath frdm_k64f build_7dc97c1 -DCONFIG_FPU=y libraries.cmsis_dsp.basicmath.fpu tests/lib/cmsis_dsp/basicmath -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/basicmath/build_7dc97c1 libraries.cmsis_dsp.basicmath.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/basicmath/build_7dc97c1'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.basicmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.basicmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_basicmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu() {
      echo 'Test libraries.cmsis_dsp.bayes.fpu'
      echo 'libraries.cmsis_dsp.bayes.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/bayes frdm_k64f build_11a5840 -DCONFIG_FPU=y libraries.cmsis_dsp.bayes.fpu tests/lib/cmsis_dsp/bayes -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/bayes/build_11a5840 libraries.cmsis_dsp.bayes.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/bayes/build_11a5840'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.bayes.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.bayes.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_bayes_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu() {
      echo 'Test libraries.cmsis_dsp.complexmath.fpu'
      echo 'libraries.cmsis_dsp.complexmath.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/complexmath frdm_k64f build_9185190 -DCONFIG_FPU=y libraries.cmsis_dsp.complexmath.fpu tests/lib/cmsis_dsp/complexmath -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/complexmath/build_9185190 libraries.cmsis_dsp.complexmath.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/complexmath/build_9185190'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.complexmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.complexmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_complexmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu() {
      echo 'Test libraries.cmsis_dsp.distance.fpu'
      echo 'libraries.cmsis_dsp.distance.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/distance frdm_k64f build_86b4500 -DCONFIG_FPU=y libraries.cmsis_dsp.distance.fpu tests/lib/cmsis_dsp/distance -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/distance/build_86b4500 libraries.cmsis_dsp.distance.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/distance/build_86b4500'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.distance.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.distance.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_distance_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu() {
      echo 'Test libraries.cmsis_dsp.fastmath.fpu'
      echo 'libraries.cmsis_dsp.fastmath.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/fastmath frdm_k64f build_317fe1f -DCONFIG_FPU=y libraries.cmsis_dsp.fastmath.fpu tests/lib/cmsis_dsp/fastmath -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/fastmath/build_317fe1f libraries.cmsis_dsp.fastmath.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/fastmath/build_317fe1f'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.fastmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.fastmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_fastmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu() {
      echo 'Test libraries.cmsis_dsp.filtering.biquad.fpu'
      echo 'libraries.cmsis_dsp.filtering.biquad.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_ae51f06  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_BIQUAD=y -DCONFIG_FPU=y libraries.cmsis_dsp.filtering.biquad.fpu tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_BIQUAD=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_ae51f06 libraries.cmsis_dsp.filtering.biquad.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_ae51f06'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.biquad.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.biquad.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_biquad_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu() {
      echo 'Test libraries.cmsis_dsp.filtering.decim.fpu'
      echo 'libraries.cmsis_dsp.filtering.decim.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_d2581e0  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_DECIM=y -DCONFIG_FPU=y libraries.cmsis_dsp.filtering.decim.fpu tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_DECIM=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_d2581e0 libraries.cmsis_dsp.filtering.decim.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_d2581e0'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.decim.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.decim.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_decim_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu() {
      echo 'Test libraries.cmsis_dsp.filtering.fir.fpu'
      echo 'libraries.cmsis_dsp.filtering.fir.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_1c6cbbd  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_FIR=y -DCONFIG_FPU=y libraries.cmsis_dsp.filtering.fir.fpu tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_FIR=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_1c6cbbd libraries.cmsis_dsp.filtering.fir.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_1c6cbbd'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.fir.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.fir.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_fir_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu() {
      echo 'Test libraries.cmsis_dsp.filtering.misc.fpu'
      echo 'libraries.cmsis_dsp.filtering.misc.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/filtering frdm_k64f build_919d3fc  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_MISC=y -DCONFIG_FPU=y libraries.cmsis_dsp.filtering.misc.fpu tests/lib/cmsis_dsp/filtering  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_FILTERING_MISC=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/filtering/build_919d3fc libraries.cmsis_dsp.filtering.misc.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/filtering/build_919d3fc'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.misc.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.filtering.misc.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_filtering_misc_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu() {
      echo 'Test libraries.cmsis_dsp.interpolation.fpu'
      echo 'libraries.cmsis_dsp.interpolation.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/interpolation frdm_k64f build_393119d -DCONFIG_FPU=y libraries.cmsis_dsp.interpolation.fpu tests/lib/cmsis_dsp/interpolation -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/interpolation/build_393119d libraries.cmsis_dsp.interpolation.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/interpolation/build_393119d'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.interpolation.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.interpolation.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_interpolation_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_q7.fpu'
      echo 'libraries.cmsis_dsp.matrix.unary_q7.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_4fd577f  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q7=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.unary_q7.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q7=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_4fd577f libraries.cmsis_dsp.matrix.unary_q7.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_4fd577f'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q7.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q7.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q7_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_q15.fpu'
      echo 'libraries.cmsis_dsp.matrix.unary_q15.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_904786d  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q15=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.unary_q15.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q15=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_904786d libraries.cmsis_dsp.matrix.unary_q15.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_904786d'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_q31.fpu'
      echo 'libraries.cmsis_dsp.matrix.unary_q31.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_a5ed8fa  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q31=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.unary_q31.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_Q31=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_a5ed8fa libraries.cmsis_dsp.matrix.unary_q31.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_a5ed8fa'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_q31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_q31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_f16.fpu'
      echo 'libraries.cmsis_dsp.matrix.unary_f16.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_ac99fe1  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F16=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.unary_f16.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F16=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_ac99fe1 libraries.cmsis_dsp.matrix.unary_f16.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_ac99fe1'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_f32.fpu'
      echo 'libraries.cmsis_dsp.matrix.unary_f32.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_507bc25  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F32=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.unary_f32.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F32=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_507bc25 libraries.cmsis_dsp.matrix.unary_f32.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_507bc25'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.unary_f64.fpu'
      echo 'libraries.cmsis_dsp.matrix.unary_f64.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_fce12b0  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F64=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.unary_f64.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_UNARY_F64=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_fce12b0 libraries.cmsis_dsp.matrix.unary_f64.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_fce12b0'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.unary_f64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_unary_f64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_q7.fpu'
      echo 'libraries.cmsis_dsp.matrix.binary_q7.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_7717591  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q7=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.binary_q7.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q7=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_7717591 libraries.cmsis_dsp.matrix.binary_q7.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_7717591'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q7.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q7.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q7_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_q15.fpu'
      echo 'libraries.cmsis_dsp.matrix.binary_q15.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_05bf902  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q15=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.binary_q15.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q15=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_05bf902 libraries.cmsis_dsp.matrix.binary_q15.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_05bf902'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_q31.fpu'
      echo 'libraries.cmsis_dsp.matrix.binary_q31.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_31ea048  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q31=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.binary_q31.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_Q31=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_31ea048 libraries.cmsis_dsp.matrix.binary_q31.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_31ea048'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_q31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_q31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_f16.fpu'
      echo 'libraries.cmsis_dsp.matrix.binary_f16.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_b433b06  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F16=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.binary_f16.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F16=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_b433b06 libraries.cmsis_dsp.matrix.binary_f16.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_b433b06'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_f32.fpu'
      echo 'libraries.cmsis_dsp.matrix.binary_f32.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_ff74fd2  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F32=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.binary_f32.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F32=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_ff74fd2 libraries.cmsis_dsp.matrix.binary_f32.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_ff74fd2'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu() {
      echo 'Test libraries.cmsis_dsp.matrix.binary_f64.fpu'
      echo 'libraries.cmsis_dsp.matrix.binary_f64.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/matrix frdm_k64f build_bf03475  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F64=y -DCONFIG_FPU=y libraries.cmsis_dsp.matrix.binary_f64.fpu tests/lib/cmsis_dsp/matrix  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_MATRIX_BINARY_F64=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/matrix/build_bf03475 libraries.cmsis_dsp.matrix.binary_f64.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/matrix/build_bf03475'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.matrix.binary_f64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_matrix_binary_f64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu() {
      echo 'Test libraries.cmsis_dsp.quaternionmath.fpu'
      echo 'libraries.cmsis_dsp.quaternionmath.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/quaternionmath frdm_k64f build_9cb8a3c -DCONFIG_FPU=y libraries.cmsis_dsp.quaternionmath.fpu tests/lib/cmsis_dsp/quaternionmath -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/quaternionmath/build_9cb8a3c libraries.cmsis_dsp.quaternionmath.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/quaternionmath/build_9cb8a3c'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.quaternionmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.quaternionmath.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_quaternionmath_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu() {
      echo 'Test libraries.cmsis_dsp.statistics.fpu'
      echo 'libraries.cmsis_dsp.statistics.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/statistics frdm_k64f build_525432a -DCONFIG_FPU=y libraries.cmsis_dsp.statistics.fpu tests/lib/cmsis_dsp/statistics -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/statistics/build_525432a libraries.cmsis_dsp.statistics.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/statistics/build_525432a'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.statistics.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.statistics.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_statistics_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu() {
      echo 'Test libraries.cmsis_dsp.support.fpu'
      echo 'libraries.cmsis_dsp.support.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/support frdm_k64f build_f90a455 -DCONFIG_FPU=y libraries.cmsis_dsp.support.fpu tests/lib/cmsis_dsp/support -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/support/build_f90a455 libraries.cmsis_dsp.support.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/support/build_f90a455'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.support.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.support.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_support_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu() {
      echo 'Test libraries.cmsis_dsp.svm.fpu'
      echo 'libraries.cmsis_dsp.svm.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/svm frdm_k64f build_9f0eaea -DCONFIG_FPU=y libraries.cmsis_dsp.svm.fpu tests/lib/cmsis_dsp/svm -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/svm/build_9f0eaea libraries.cmsis_dsp.svm.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/svm/build_9f0eaea'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.svm.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.svm.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_svm_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.cq15.fpu'
      echo 'libraries.cmsis_dsp.transform.cq15.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_fb76e74  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ15=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.cq15.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ15=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_fb76e74 libraries.cmsis_dsp.transform.cq15.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_fb76e74'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.rq15.fpu'
      echo 'libraries.cmsis_dsp.transform.rq15.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_5b64c04  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ15=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.rq15.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ15=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_5b64c04 libraries.cmsis_dsp.transform.rq15.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_5b64c04'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq15.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq15_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.cq31.fpu'
      echo 'libraries.cmsis_dsp.transform.cq31.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_aa6574e  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ31=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.cq31.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CQ31=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_aa6574e libraries.cmsis_dsp.transform.cq31.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_aa6574e'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cq31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cq31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.rq31.fpu'
      echo 'libraries.cmsis_dsp.transform.rq31.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_36df28c  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ31=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.rq31.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RQ31=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_36df28c libraries.cmsis_dsp.transform.rq31.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_36df28c'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rq31.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rq31_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.cf16.fpu'
      echo 'libraries.cmsis_dsp.transform.cf16.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_e4f6da9  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF16=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.cf16.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF16=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_e4f6da9 libraries.cmsis_dsp.transform.cf16.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_e4f6da9'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.rf16.fpu'
      echo 'libraries.cmsis_dsp.transform.rf16.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_bfb779d  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF16=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.rf16.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF16=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_bfb779d libraries.cmsis_dsp.transform.rf16.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_bfb779d'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf16.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf16_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.cf32.fpu'
      echo 'libraries.cmsis_dsp.transform.cf32.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_08886d4  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF32=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.cf32.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF32=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_08886d4 libraries.cmsis_dsp.transform.cf32.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_08886d4'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.rf32.fpu'
      echo 'libraries.cmsis_dsp.transform.rf32.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_b7902ea  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF32=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.rf32.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF32=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_b7902ea libraries.cmsis_dsp.transform.rf32.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_b7902ea'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf32.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf32_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.cf64.fpu'
      echo 'libraries.cmsis_dsp.transform.cf64.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_b941715  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF64=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.cf64.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_CF64=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_b941715 libraries.cmsis_dsp.transform.cf64.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_b941715'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.cf64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_cf64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu_result
   def test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu() {
      echo 'Test libraries.cmsis_dsp.transform.rf64.fpu'
      echo 'libraries.cmsis_dsp.transform.rf64.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/cmsis_dsp/transform frdm_k64f build_dd92db1  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF64=y -DCONFIG_FPU=y libraries.cmsis_dsp.transform.rf64.fpu tests/lib/cmsis_dsp/transform  -DCONF_FILE=prj_base.conf -DCONFIG_CMSIS_DSP_TEST_TRANSFORM_RF64=y -DCONFIG_FPU=y'''
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/cmsis_dsp/transform/build_dd92db1 libraries.cmsis_dsp.transform.rf64.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/cmsis_dsp/transform/build_dd92db1'
        script {
          test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.cmsis_dsp.transform.rf64.fpu', 'result': test_cmsis_dsp_fpu_libraries_cmsis_dsp_transform_rf64_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher() {
      echo 'Test sample.portability.cmsis_rtos_v1.philosopher'
      echo 'sample.portability.cmsis_rtos_v1.philosopher'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/philosophers frdm_k64f build_7579b03  -DDEBUG_PRINTF=1 sample.portability.cmsis_rtos_v1.philosopher samples/subsys/portability/cmsis_rtos_v1/philosophers  -DDEBUG_PRINTF=1'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/philosophers/build_7579b03 sample.portability.cmsis_rtos_v1.philosopher '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v1/philosophers/build_7579b03'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.philosopher', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.philosopher', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio() {
      echo 'Test sample.portability.cmsis_rtos_v1.philosopher.same_prio'
      echo 'sample.portability.cmsis_rtos_v1.philosopher.same_prio'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/philosophers frdm_k64f build_5d08f59 -DSAME_PRIO=1 DEBUG_PRINTF=1 sample.portability.cmsis_rtos_v1.philosopher.same_prio samples/subsys/portability/cmsis_rtos_v1/philosophers -DSAME_PRIO=1 DEBUG_PRINTF=1'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/philosophers/build_5d08f59 sample.portability.cmsis_rtos_v1.philosopher.same_prio '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v1/philosophers/build_5d08f59'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.philosopher.same_prio', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.philosopher.same_prio', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_same_prio_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores() {
      echo 'Test sample.portability.cmsis_rtos_v1.philosopher.semaphores'
      echo 'sample.portability.cmsis_rtos_v1.philosopher.semaphores'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/philosophers frdm_k64f build_dea905f -DFORKS=SEMAPHORES DEBUG_PRINTF=1 sample.portability.cmsis_rtos_v1.philosopher.semaphores samples/subsys/portability/cmsis_rtos_v1/philosophers -DFORKS=SEMAPHORES DEBUG_PRINTF=1'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/philosophers/build_dea905f sample.portability.cmsis_rtos_v1.philosopher.semaphores '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v1/philosophers/build_dea905f'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.philosopher.semaphores', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.philosopher.semaphores', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_philosopher_semaphores_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization() {
      echo 'Test sample.portability.cmsis_rtos_v1.timer_synchronization'
      echo 'sample.portability.cmsis_rtos_v1.timer_synchronization'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/timer_synchronization frdm_k64f build_bcbb2d5 sample.portability.cmsis_rtos_v1.timer_synchronization samples/subsys/portability/cmsis_rtos_v1/timer_synchronization'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v1/timer_synchronization/build_bcbb2d5 sample.portability.cmsis_rtos_v1.timer_synchronization '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v1/timer_synchronization/build_bcbb2d5'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.timer_synchronization', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v1.timer_synchronization', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v1_timer_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher() {
      echo 'Test sample.portability.cmsis_rtos_v2.philosopher'
      echo 'sample.portability.cmsis_rtos_v2.philosopher'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/philosophers frdm_k64f build_7b399c0  -DDEBUG_PRINTF=1 sample.portability.cmsis_rtos_v2.philosopher samples/subsys/portability/cmsis_rtos_v2/philosophers  -DDEBUG_PRINTF=1'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/philosophers/build_7b399c0 sample.portability.cmsis_rtos_v2.philosopher '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v2/philosophers/build_7b399c0'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.philosopher', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.philosopher', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio() {
      echo 'Test sample.portability.cmsis_rtos_v2.philosopher.same_prio'
      echo 'sample.portability.cmsis_rtos_v2.philosopher.same_prio'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/philosophers frdm_k64f build_78b54eb -DSAME_PRIO=1 DEBUG_PRINTF=1 sample.portability.cmsis_rtos_v2.philosopher.same_prio samples/subsys/portability/cmsis_rtos_v2/philosophers -DSAME_PRIO=1 DEBUG_PRINTF=1'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/philosophers/build_78b54eb sample.portability.cmsis_rtos_v2.philosopher.same_prio '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v2/philosophers/build_78b54eb'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.philosopher.same_prio', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.philosopher.same_prio', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_same_prio_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores() {
      echo 'Test sample.portability.cmsis_rtos_v2.philosopher.semaphores'
      echo 'sample.portability.cmsis_rtos_v2.philosopher.semaphores'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/philosophers frdm_k64f build_615486d -DFORKS=SEMAPHORES DEBUG_PRINTF=1 sample.portability.cmsis_rtos_v2.philosopher.semaphores samples/subsys/portability/cmsis_rtos_v2/philosophers -DFORKS=SEMAPHORES DEBUG_PRINTF=1'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/philosophers/build_615486d sample.portability.cmsis_rtos_v2.philosopher.semaphores '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v2/philosophers/build_615486d'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.philosopher.semaphores', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.philosopher.semaphores', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_philosopher_semaphores_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization_result
   def test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization() {
      echo 'Test sample.portability.cmsis_rtos_v2.timer_synchronization'
      echo 'sample.portability.cmsis_rtos_v2.timer_synchronization'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/timer_synchronization frdm_k64f build_3055f76 sample.portability.cmsis_rtos_v2.timer_synchronization samples/subsys/portability/cmsis_rtos_v2/timer_synchronization'''
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/portability/cmsis_rtos_v2/timer_synchronization/build_3055f76 sample.portability.cmsis_rtos_v2.timer_synchronization '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/portability/cmsis_rtos_v2/timer_synchronization/build_3055f76'
        script {
          test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.timer_synchronization', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.portability.cmsis_rtos_v2.timer_synchronization', 'result': test_cmsis_rtos_sample_portability_cmsis_rtos_v2_timer_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_portability_cmsis_rtos_v1_result
   def test_cmsis_rtos_portability_cmsis_rtos_v1() {
      echo 'Test portability.cmsis_rtos_v1'
      echo 'portability.cmsis_rtos_v1'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_portability_cmsis_rtos_v1_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/portability/cmsis_rtos_v1 frdm_k64f build_063f065 portability.cmsis_rtos_v1 tests/subsys/portability/cmsis_rtos_v1'''
        script {
          test_cmsis_rtos_portability_cmsis_rtos_v1_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/portability/cmsis_rtos_v1/build_063f065 portability.cmsis_rtos_v1 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/portability/cmsis_rtos_v1/build_063f065'
        script {
          test_cmsis_rtos_portability_cmsis_rtos_v1_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_portability_cmsis_rtos_v1_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.cmsis_rtos_v1', 'result': test_cmsis_rtos_portability_cmsis_rtos_v1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.cmsis_rtos_v1', 'result': test_cmsis_rtos_portability_cmsis_rtos_v1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cmsis_rtos_portability_cmsis_rtos_v2_result
   def test_cmsis_rtos_portability_cmsis_rtos_v2() {
      echo 'Test portability.cmsis_rtos_v2'
      echo 'portability.cmsis_rtos_v2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cmsis_rtos_portability_cmsis_rtos_v2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/portability/cmsis_rtos_v2 frdm_k64f build_6677115 portability.cmsis_rtos_v2 tests/subsys/portability/cmsis_rtos_v2'''
        script {
          test_cmsis_rtos_portability_cmsis_rtos_v2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/portability/cmsis_rtos_v2/build_6677115 portability.cmsis_rtos_v2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/portability/cmsis_rtos_v2/build_6677115'
        script {
          test_cmsis_rtos_portability_cmsis_rtos_v2_result = "SUCCESS"
        }
      }
      script {
        echo test_cmsis_rtos_portability_cmsis_rtos_v2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.cmsis_rtos_v2', 'result': test_cmsis_rtos_portability_cmsis_rtos_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.cmsis_rtos_v2', 'result': test_cmsis_rtos_portability_cmsis_rtos_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_compression_lz4_sample_compression_lz4_result
   def test_compression_lz4_sample_compression_lz4() {
      echo 'Test sample.compression.lz4'
      echo 'sample.compression.lz4'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_compression_lz4_sample_compression_lz4_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/compression/lz4 frdm_k64f build_735c9c5 sample.compression.lz4 samples/compression/lz4'''
        script {
          test_compression_lz4_sample_compression_lz4_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/compression/lz4/build_735c9c5 sample.compression.lz4 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/compression/lz4/build_735c9c5'
        script {
          test_compression_lz4_sample_compression_lz4_result = "SUCCESS"
        }
      }
      script {
        echo test_compression_lz4_sample_compression_lz4_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.compression.lz4', 'result': test_compression_lz4_sample_compression_lz4_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.compression.lz4', 'result': test_compression_lz4_sample_compression_lz4_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_console_sample_console_echo_result
   def test_console_sample_console_echo() {
      echo 'Test sample.console.echo'
      echo 'sample.console.echo'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_console_sample_console_echo_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/console/echo frdm_k64f build_ed21e44 sample.console.echo samples/subsys/console/echo'''
        script {
          test_console_sample_console_echo_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/console/echo/build_ed21e44 sample.console.echo '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/console/echo/build_ed21e44'
        script {
          test_console_sample_console_echo_result = "SUCCESS"
        }
      }
      script {
        echo test_console_sample_console_echo_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.console.echo', 'result': test_console_sample_console_echo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.console.echo', 'result': test_console_sample_console_echo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_console_sample_console_getchar_result
   def test_console_sample_console_getchar() {
      echo 'Test sample.console.getchar'
      echo 'sample.console.getchar'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_console_sample_console_getchar_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/console/getchar frdm_k64f build_d07f158 sample.console.getchar samples/subsys/console/getchar'''
        script {
          test_console_sample_console_getchar_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/console/getchar/build_d07f158 sample.console.getchar '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/console/getchar/build_d07f158'
        script {
          test_console_sample_console_getchar_result = "SUCCESS"
        }
      }
      script {
        echo test_console_sample_console_getchar_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.console.getchar', 'result': test_console_sample_console_getchar_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.console.getchar', 'result': test_console_sample_console_getchar_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_console_sample_console_getline_result
   def test_console_sample_console_getline() {
      echo 'Test sample.console.getline'
      echo 'sample.console.getline'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_console_sample_console_getline_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/console/getline frdm_k64f build_2c7ecf7 sample.console.getline samples/subsys/console/getline'''
        script {
          test_console_sample_console_getline_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/console/getline/build_2c7ecf7 sample.console.getline '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/console/getline/build_2c7ecf7'
        script {
          test_console_sample_console_getline_result = "SUCCESS"
        }
      }
      script {
        echo test_console_sample_console_getline_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.console.getline', 'result': test_console_sample_console_getline_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.console.getline', 'result': test_console_sample_console_getline_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cpp_sample_cpp_synchronization_result
   def test_cpp_sample_cpp_synchronization() {
      echo 'Test sample.cpp.synchronization'
      echo 'sample.cpp.synchronization'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cpp_sample_cpp_synchronization_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/cpp/cpp_synchronization frdm_k64f build_498f224 sample.cpp.synchronization samples/subsys/cpp/cpp_synchronization'''
        script {
          test_cpp_sample_cpp_synchronization_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/cpp/cpp_synchronization/build_498f224 sample.cpp.synchronization '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/cpp/cpp_synchronization/build_498f224'
        script {
          test_cpp_sample_cpp_synchronization_result = "SUCCESS"
        }
      }
      script {
        echo test_cpp_sample_cpp_synchronization_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.cpp.synchronization', 'result': test_cpp_sample_cpp_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.cpp.synchronization', 'result': test_cpp_sample_cpp_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cpp_cpp_main_result
   def test_cpp_cpp_main() {
      echo 'Test cpp.main'
      echo 'cpp.main'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cpp_cpp_main_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/cpp/cxx frdm_k64f build_dc05f73 cpp.main tests/subsys/cpp/cxx'''
        script {
          test_cpp_cpp_main_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/cpp/cxx/build_dc05f73 cpp.main '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/cpp/cxx/build_dc05f73'
        script {
          test_cpp_cpp_main_result = "SUCCESS"
        }
      }
      script {
        echo test_cpp_cpp_main_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'cpp.main', 'result': test_cpp_cpp_main_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'cpp.main', 'result': test_cpp_cpp_main_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cpp_cpp_libcxx_newlib_result
   def test_cpp_cpp_libcxx_newlib() {
      echo 'Test cpp.libcxx.newlib'
      echo 'cpp.libcxx.newlib'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cpp_cpp_libcxx_newlib_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/cpp/libcxx frdm_k64f build_b390e6a -DCONFIG_NEWLIB_LIBC=y -DCONFIG_NEWLIB_LIBC_NANO=n -DCONFIG_EXCEPTIONS=y cpp.libcxx.newlib tests/subsys/cpp/libcxx -DCONFIG_NEWLIB_LIBC=y -DCONFIG_NEWLIB_LIBC_NANO=n -DCONFIG_EXCEPTIONS=y'''
        script {
          test_cpp_cpp_libcxx_newlib_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/cpp/libcxx/build_b390e6a cpp.libcxx.newlib '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/cpp/libcxx/build_b390e6a'
        script {
          test_cpp_cpp_libcxx_newlib_result = "SUCCESS"
        }
      }
      script {
        echo test_cpp_cpp_libcxx_newlib_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'cpp.libcxx.newlib', 'result': test_cpp_cpp_libcxx_newlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'cpp.libcxx.newlib', 'result': test_cpp_cpp_libcxx_newlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_cpp_cpp_libcxx_newlib_nano_result
   def test_cpp_cpp_libcxx_newlib_nano() {
      echo 'Test cpp.libcxx.newlib_nano'
      echo 'cpp.libcxx.newlib_nano'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_cpp_cpp_libcxx_newlib_nano_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/cpp/libcxx frdm_k64f build_fabe779 -DCONFIG_NEWLIB_LIBC=y -DCONFIG_NEWLIB_LIBC_NANO=y cpp.libcxx.newlib_nano tests/subsys/cpp/libcxx -DCONFIG_NEWLIB_LIBC=y -DCONFIG_NEWLIB_LIBC_NANO=y'''
        script {
          test_cpp_cpp_libcxx_newlib_nano_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/cpp/libcxx/build_fabe779 cpp.libcxx.newlib_nano '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/cpp/libcxx/build_fabe779'
        script {
          test_cpp_cpp_libcxx_newlib_nano_result = "SUCCESS"
        }
      }
      script {
        echo test_cpp_cpp_libcxx_newlib_nano_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'cpp.libcxx.newlib_nano', 'result': test_cpp_cpp_libcxx_newlib_nano_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'cpp.libcxx.newlib_nano', 'result': test_cpp_cpp_libcxx_newlib_nano_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_crypto_sample_drivers_crypto_mbedtls_result
   def test_crypto_sample_drivers_crypto_mbedtls() {
      echo 'Test sample.drivers.crypto.mbedtls'
      echo 'sample.drivers.crypto.mbedtls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_crypto_sample_drivers_crypto_mbedtls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/crypto frdm_k64f build_69a955d  -DCONF_FILE=prj_mtls_shim.conf sample.drivers.crypto.mbedtls samples/drivers/crypto  -DCONF_FILE=prj_mtls_shim.conf'''
        script {
          test_crypto_sample_drivers_crypto_mbedtls_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/crypto/build_69a955d sample.drivers.crypto.mbedtls '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/crypto/build_69a955d'
        script {
          test_crypto_sample_drivers_crypto_mbedtls_result = "SUCCESS"
        }
      }
      script {
        echo test_crypto_sample_drivers_crypto_mbedtls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.crypto.mbedtls', 'result': test_crypto_sample_drivers_crypto_mbedtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.crypto.mbedtls', 'result': test_crypto_sample_drivers_crypto_mbedtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_crypto_sample_drivers_crypto_mbedtls_micro_result
   def test_crypto_sample_drivers_crypto_mbedtls_micro() {
      echo 'Test sample.drivers.crypto.mbedtls.micro'
      echo 'sample.drivers.crypto.mbedtls.micro'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_crypto_sample_drivers_crypto_mbedtls_micro_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/crypto frdm_k64f build_f90dd56 sample.drivers.crypto.mbedtls.micro samples/drivers/crypto'''
        script {
          test_crypto_sample_drivers_crypto_mbedtls_micro_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/crypto/build_f90dd56 sample.drivers.crypto.mbedtls.micro '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/crypto/build_f90dd56'
        script {
          test_crypto_sample_drivers_crypto_mbedtls_micro_result = "SUCCESS"
        }
      }
      script {
        echo test_crypto_sample_drivers_crypto_mbedtls_micro_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.crypto.mbedtls.micro', 'result': test_crypto_sample_drivers_crypto_mbedtls_micro_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.crypto.mbedtls.micro', 'result': test_crypto_sample_drivers_crypto_mbedtls_micro_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_crypto_mbedtls_userspace_crypto_mbedtls_result
   def test_crypto_mbedtls_userspace_crypto_mbedtls() {
      echo 'Test crypto.mbedtls'
      echo 'crypto.mbedtls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_crypto_mbedtls_userspace_crypto_mbedtls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/crypto/mbedtls frdm_k64f build_9d6876c crypto.mbedtls tests/crypto/mbedtls'''
        script {
          test_crypto_mbedtls_userspace_crypto_mbedtls_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/crypto/mbedtls/build_9d6876c crypto.mbedtls '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/crypto/mbedtls/build_9d6876c'
        script {
          test_crypto_mbedtls_userspace_crypto_mbedtls_result = "SUCCESS"
        }
      }
      script {
        echo test_crypto_mbedtls_userspace_crypto_mbedtls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'crypto.mbedtls', 'result': test_crypto_mbedtls_userspace_crypto_mbedtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'crypto.mbedtls', 'result': test_crypto_mbedtls_userspace_crypto_mbedtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_crypto_random_security_crypto_rand32_result
   def test_crypto_random_security_crypto_rand32() {
      echo 'Test crypto.rand32'
      echo 'crypto.rand32'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_crypto_random_security_crypto_rand32_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/crypto/rand32 frdm_k64f build_559cdac crypto.rand32 tests/crypto/rand32'''
        script {
          test_crypto_random_security_crypto_rand32_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/crypto/rand32/build_559cdac crypto.rand32 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/crypto/rand32/build_559cdac'
        script {
          test_crypto_random_security_crypto_rand32_result = "SUCCESS"
        }
      }
      script {
        echo test_crypto_random_security_crypto_rand32_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'crypto.rand32', 'result': test_crypto_random_security_crypto_rand32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'crypto.rand32', 'result': test_crypto_random_security_crypto_rand32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_crypto_random_security_crypto_rand32_random_sw_systimer_result
   def test_crypto_random_security_crypto_rand32_random_sw_systimer() {
      echo 'Test crypto.rand32.random_sw_systimer'
      echo 'crypto.rand32.random_sw_systimer'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_crypto_random_security_crypto_rand32_random_sw_systimer_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/crypto/rand32 frdm_k64f build_180bca4  -DCONF_FILE=prj_sw_random_systimer.conf crypto.rand32.random_sw_systimer tests/crypto/rand32  -DCONF_FILE=prj_sw_random_systimer.conf'''
        script {
          test_crypto_random_security_crypto_rand32_random_sw_systimer_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/crypto/rand32/build_180bca4 crypto.rand32.random_sw_systimer '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/crypto/rand32/build_180bca4'
        script {
          test_crypto_random_security_crypto_rand32_random_sw_systimer_result = "SUCCESS"
        }
      }
      script {
        echo test_crypto_random_security_crypto_rand32_random_sw_systimer_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'crypto.rand32.random_sw_systimer', 'result': test_crypto_random_security_crypto_rand32_random_sw_systimer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'crypto.rand32.random_sw_systimer', 'result': test_crypto_random_security_crypto_rand32_random_sw_systimer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dac_drivers_drivers_dac_dac_loopback_result
   def test_dac_drivers_drivers_dac_dac_loopback() {
      echo 'Test drivers.dac.dac_loopback'
      echo 'drivers.dac.dac_loopback'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dac_drivers_drivers_dac_dac_loopback_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/dac/dac_loopback frdm_k64f build_1d79639 drivers.dac.dac_loopback tests/drivers/dac/dac_loopback'''
        script {
          test_dac_drivers_drivers_dac_dac_loopback_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/dac/dac_loopback/build_1d79639 drivers.dac.dac_loopback '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/dac/dac_loopback/build_1d79639'
        script {
          test_dac_drivers_drivers_dac_dac_loopback_result = "SUCCESS"
        }
      }
      script {
        echo test_dac_drivers_drivers_dac_dac_loopback_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.dac.dac_loopback', 'result': test_dac_drivers_drivers_dac_dac_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.dac.dac_loopback', 'result': test_dac_drivers_drivers_dac_dac_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dac_drivers_userspace_drivers_dac_result
   def test_dac_drivers_userspace_drivers_dac() {
      echo 'Test drivers.dac'
      echo 'drivers.dac'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dac_drivers_userspace_drivers_dac_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/dac/dac_api frdm_k64f build_acfb5e1 drivers.dac tests/drivers/dac/dac_api'''
        script {
          test_dac_drivers_userspace_drivers_dac_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/dac/dac_api/build_acfb5e1 drivers.dac '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/dac/dac_api/build_acfb5e1'
        script {
          test_dac_drivers_userspace_drivers_dac_result = "SUCCESS"
        }
      }
      script {
        echo test_dac_drivers_userspace_drivers_dac_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.dac', 'result': test_dac_drivers_userspace_drivers_dac_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.dac', 'result': test_dac_drivers_userspace_drivers_dac_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_debug_buildsystem_debug_build_result
   def test_debug_buildsystem_debug_build() {
      echo 'Test buildsystem.debug.build'
      echo 'buildsystem.debug.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_debug_buildsystem_debug_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/misc/test_build frdm_k64f build_3862820  -DCONF_FILE=debug.conf buildsystem.debug.build tests/misc/test_build  -DCONF_FILE=debug.conf'''
        script {
          test_debug_buildsystem_debug_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/misc/test_build/build_3862820'
        script {
          test_debug_buildsystem_debug_build_result = "SUCCESS"
        }
      }
      script {
        echo test_debug_buildsystem_debug_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'buildsystem.debug.build', 'result': test_debug_buildsystem_debug_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'buildsystem.debug.build', 'result': test_debug_buildsystem_debug_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_devicetree_libraries_devicetree_result
   def test_devicetree_libraries_devicetree() {
      echo 'Test libraries.devicetree'
      echo 'libraries.devicetree'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_devicetree_libraries_devicetree_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/devicetree/api frdm_k64f build_d029438 libraries.devicetree tests/lib/devicetree/api'''
        script {
          test_devicetree_libraries_devicetree_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/devicetree/api/build_d029438 libraries.devicetree '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/devicetree/api/build_d029438'
        script {
          test_devicetree_libraries_devicetree_result = "SUCCESS"
        }
      }
      script {
        echo test_devicetree_libraries_devicetree_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.devicetree', 'result': test_devicetree_libraries_devicetree_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.devicetree', 'result': test_devicetree_libraries_devicetree_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_devicetree_libraries_devicetree_devices_result
   def test_devicetree_libraries_devicetree_devices() {
      echo 'Test libraries.devicetree.devices'
      echo 'libraries.devicetree.devices'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_devicetree_libraries_devicetree_devices_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/devicetree/devices frdm_k64f build_ec099c8 libraries.devicetree.devices tests/lib/devicetree/devices'''
        script {
          test_devicetree_libraries_devicetree_devices_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/devicetree/devices/build_ec099c8 libraries.devicetree.devices '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/devicetree/devices/build_ec099c8'
        script {
          test_devicetree_libraries_devicetree_devices_result = "SUCCESS"
        }
      }
      script {
        echo test_devicetree_libraries_devicetree_devices_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.devicetree.devices', 'result': test_devicetree_libraries_devicetree_devices_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.devicetree.devices', 'result': test_devicetree_libraries_devicetree_devices_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2_result
   def test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2() {
      echo 'Test sample.display.shield.adafruit_2_8_tft_touch_v2'
      echo 'sample.display.shield.adafruit_2_8_tft_touch_v2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/display frdm_k64f build_3a1f968  -DSHIELD=adafruit_2_8_tft_touch_v2 sample.display.shield.adafruit_2_8_tft_touch_v2 samples/drivers/display  -DSHIELD=adafruit_2_8_tft_touch_v2'''
        script {
          test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/display/build_3a1f968 sample.display.shield.adafruit_2_8_tft_touch_v2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/display/build_3a1f968'
        script {
          test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2_result = "SUCCESS"
        }
      }
      script {
        echo test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.display.shield.adafruit_2_8_tft_touch_v2', 'result': test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.display.shield.adafruit_2_8_tft_touch_v2', 'result': test_display_shield_sample_display_shield_adafruit_2_8_tft_touch_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dma_drivers_mcux_dspi_dma_loopback_result
   def test_dma_drivers_mcux_dspi_dma_loopback() {
      echo 'Test drivers.mcux_dspi_dma.loopback'
      echo 'drivers.mcux_dspi_dma.loopback'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dma_drivers_mcux_dspi_dma_loopback_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/spi/spi_loopback frdm_k64f build_a111af6  -DOVERLAY_CONFIG=overlay-mcux-dspi-dma.conf drivers.mcux_dspi_dma.loopback tests/drivers/spi/spi_loopback  -DOVERLAY_CONFIG=overlay-mcux-dspi-dma.conf'''
        script {
          test_dma_drivers_mcux_dspi_dma_loopback_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/spi/spi_loopback/build_a111af6 drivers.mcux_dspi_dma.loopback '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/spi/spi_loopback/build_a111af6'
        script {
          test_dma_drivers_mcux_dspi_dma_loopback_result = "SUCCESS"
        }
      }
      script {
        echo test_dma_drivers_mcux_dspi_dma_loopback_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.mcux_dspi_dma.loopback', 'result': test_dma_drivers_mcux_dspi_dma_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.mcux_dspi_dma.loopback', 'result': test_dma_drivers_mcux_dspi_dma_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_addremove_result
   def test_dns_net_net_dns_addremove() {
      echo 'Test net.dns.addremove'
      echo 'net.dns.addremove'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_addremove_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_addremove frdm_k64f build_bf7473c net.dns.addremove tests/net/lib/dns_addremove'''
        script {
          test_dns_net_net_dns_addremove_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_addremove/build_bf7473c net.dns.addremove '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_addremove/build_bf7473c'
        script {
          test_dns_net_net_dns_addremove_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_addremove_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.addremove', 'result': test_dns_net_net_dns_addremove_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.addremove', 'result': test_dns_net_net_dns_addremove_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_addremove_no_ipv6_result
   def test_dns_net_net_dns_addremove_no_ipv6() {
      echo 'Test net.dns.addremove.no_ipv6'
      echo 'net.dns.addremove.no_ipv6'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_addremove_no_ipv6_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_addremove frdm_k64f build_fcdc23d -DCONFIG_NET_IPV6=n net.dns.addremove.no_ipv6 tests/net/lib/dns_addremove -DCONFIG_NET_IPV6=n'''
        script {
          test_dns_net_net_dns_addremove_no_ipv6_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_addremove/build_fcdc23d net.dns.addremove.no_ipv6 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_addremove/build_fcdc23d'
        script {
          test_dns_net_net_dns_addremove_no_ipv6_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_addremove_no_ipv6_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.addremove.no_ipv6', 'result': test_dns_net_net_dns_addremove_no_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.addremove.no_ipv6', 'result': test_dns_net_net_dns_addremove_no_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_no_ipv4_result
   def test_dns_net_net_dns_no_ipv4() {
      echo 'Test net.dns.no_ipv4'
      echo 'net.dns.no_ipv4'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_no_ipv4_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_addremove frdm_k64f build_8d044a8 -DCONFIG_NET_IPV4=n net.dns.no_ipv4 tests/net/lib/dns_addremove -DCONFIG_NET_IPV4=n'''
        script {
          test_dns_net_net_dns_no_ipv4_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_addremove/build_8d044a8 net.dns.no_ipv4 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_addremove/build_8d044a8'
        script {
          test_dns_net_net_dns_no_ipv4_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_no_ipv4_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.no_ipv4', 'result': test_dns_net_net_dns_no_ipv4_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.no_ipv4', 'result': test_dns_net_net_dns_no_ipv4_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_result
   def test_dns_net_net_dns() {
      echo 'Test net.dns'
      echo 'net.dns'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_packet frdm_k64f build_664b065 net.dns tests/net/lib/dns_packet'''
        script {
          test_dns_net_net_dns_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_packet/build_664b065 net.dns '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_packet/build_664b065'
        script {
          test_dns_net_net_dns_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns', 'result': test_dns_net_net_dns_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns', 'result': test_dns_net_net_dns_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_resolve_result
   def test_dns_net_net_dns_resolve() {
      echo 'Test net.dns.resolve'
      echo 'net.dns.resolve'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_resolve_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_resolve frdm_k64f build_60e4fd9 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.dns.resolve tests/net/lib/dns_resolve -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_dns_net_net_dns_resolve_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_resolve/build_60e4fd9 net.dns.resolve '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_resolve/build_60e4fd9'
        script {
          test_dns_net_net_dns_resolve_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_resolve_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.resolve', 'result': test_dns_net_net_dns_resolve_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.resolve', 'result': test_dns_net_net_dns_resolve_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_resolve_preempt_result
   def test_dns_net_net_dns_resolve_preempt() {
      echo 'Test net.dns.resolve.preempt'
      echo 'net.dns.resolve.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_resolve_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_resolve frdm_k64f build_7b56b35 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.dns.resolve.preempt tests/net/lib/dns_resolve -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_dns_net_net_dns_resolve_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_resolve/build_7b56b35 net.dns.resolve.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_resolve/build_7b56b35'
        script {
          test_dns_net_net_dns_resolve_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_resolve_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.resolve.preempt', 'result': test_dns_net_net_dns_resolve_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.resolve.preempt', 'result': test_dns_net_net_dns_resolve_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_resolve_no_ipv6_result
   def test_dns_net_net_dns_resolve_no_ipv6() {
      echo 'Test net.dns.resolve.no_ipv6'
      echo 'net.dns.resolve.no_ipv6'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_resolve_no_ipv6_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_resolve frdm_k64f build_836e55b  -DCONF_FILE=prj-no-ipv6.conf net.dns.resolve.no_ipv6 tests/net/lib/dns_resolve  -DCONF_FILE=prj-no-ipv6.conf'''
        script {
          test_dns_net_net_dns_resolve_no_ipv6_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_resolve/build_836e55b net.dns.resolve.no_ipv6 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_resolve/build_836e55b'
        script {
          test_dns_net_net_dns_resolve_no_ipv6_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_resolve_no_ipv6_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.resolve.no_ipv6', 'result': test_dns_net_net_dns_resolve_no_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.resolve.no_ipv6', 'result': test_dns_net_net_dns_resolve_no_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_sd_result
   def test_dns_net_net_dns_sd() {
      echo 'Test net.dns.sd'
      echo 'net.dns.sd'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_sd_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_sd frdm_k64f build_aa87174 net.dns.sd tests/net/lib/dns_sd'''
        script {
          test_dns_net_net_dns_sd_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_sd/build_aa87174 net.dns.sd '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_sd/build_aa87174'
        script {
          test_dns_net_net_dns_sd_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_sd_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.sd', 'result': test_dns_net_net_dns_sd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.sd', 'result': test_dns_net_net_dns_sd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_dns_net_net_dns_sd_no_ipv6_result
   def test_dns_net_net_dns_sd_no_ipv6() {
      echo 'Test net.dns.sd.no_ipv6'
      echo 'net.dns.sd.no_ipv6'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_dns_net_net_dns_sd_no_ipv6_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/dns_sd frdm_k64f build_b7293ed  -DCONF_FILE=prj-no-ipv6.conf net.dns.sd.no_ipv6 tests/net/lib/dns_sd  -DCONF_FILE=prj-no-ipv6.conf'''
        script {
          test_dns_net_net_dns_sd_no_ipv6_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/dns_sd/build_b7293ed net.dns.sd.no_ipv6 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/dns_sd/build_b7293ed'
        script {
          test_dns_net_net_dns_sd_no_ipv6_result = "SUCCESS"
        }
      }
      script {
        echo test_dns_net_net_dns_sd_no_ipv6_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dns.sd.no_ipv6', 'result': test_dns_net_net_dns_sd_no_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dns.sd.no_ipv6', 'result': test_dns_net_net_dns_sd_no_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_driver_drivers_hwinfo_api_result
   def test_driver_drivers_hwinfo_api() {
      echo 'Test drivers.hwinfo.api'
      echo 'drivers.hwinfo.api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_driver_drivers_hwinfo_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/hwinfo/api frdm_k64f build_a0f1ec0 drivers.hwinfo.api tests/drivers/hwinfo/api'''
        script {
          test_driver_drivers_hwinfo_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/hwinfo/api/build_a0f1ec0 drivers.hwinfo.api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/hwinfo/api/build_a0f1ec0'
        script {
          test_driver_drivers_hwinfo_api_result = "SUCCESS"
        }
      }
      script {
        echo test_driver_drivers_hwinfo_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.hwinfo.api', 'result': test_driver_drivers_hwinfo_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.hwinfo.api', 'result': test_driver_drivers_hwinfo_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_driver_can_drivers_can_result
   def test_driver_can_drivers_can() {
      echo 'Test drivers.can'
      echo 'drivers.can'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_driver_can_drivers_can_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/can/api frdm_k64f build_d282907 drivers.can tests/drivers/can/api'''
        script {
          test_driver_can_drivers_can_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/can/api/build_d282907 drivers.can '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/can/api/build_d282907'
        script {
          test_driver_can_drivers_can_result = "SUCCESS"
        }
      }
      script {
        echo test_driver_can_drivers_can_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.can', 'result': test_driver_can_drivers_can_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.can', 'result': test_driver_can_drivers_can_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_driver_can_drivers_can_stm32_result
   def test_driver_can_drivers_can_stm32() {
      echo 'Test drivers.can.stm32'
      echo 'drivers.can.stm32'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_driver_can_drivers_can_stm32_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/can/stm32 frdm_k64f build_b74c825 drivers.can.stm32 tests/drivers/can/stm32'''
        script {
          test_driver_can_drivers_can_stm32_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/can/stm32/build_b74c825 drivers.can.stm32 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/can/stm32/build_b74c825'
        script {
          test_driver_can_drivers_can_stm32_result = "SUCCESS"
        }
      }
      script {
        echo test_driver_can_drivers_can_stm32_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.can.stm32', 'result': test_driver_can_drivers_can_stm32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.can.stm32', 'result': test_driver_can_drivers_can_stm32_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_driver_can_drivers_can_timing_result
   def test_driver_can_drivers_can_timing() {
      echo 'Test drivers.can.timing'
      echo 'drivers.can.timing'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_driver_can_drivers_can_timing_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/can/timing frdm_k64f build_4cd2cbf drivers.can.timing tests/drivers/can/timing'''
        script {
          test_driver_can_drivers_can_timing_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/can/timing/build_4cd2cbf drivers.can.timing '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/can/timing/build_4cd2cbf'
        script {
          test_driver_can_drivers_can_timing_result = "SUCCESS"
        }
      }
      script {
        echo test_driver_can_drivers_can_timing_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.can.timing', 'result': test_driver_can_drivers_can_timing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.can.timing', 'result': test_driver_can_drivers_can_timing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_driver_sensor_driver_sensor_generic_result
   def test_driver_sensor_driver_sensor_generic() {
      echo 'Test driver.sensor.generic'
      echo 'driver.sensor.generic'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_driver_sensor_driver_sensor_generic_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/sensor/generic frdm_k64f build_452c18b driver.sensor.generic tests/drivers/sensor/generic'''
        script {
          test_driver_sensor_driver_sensor_generic_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/sensor/generic/build_452c18b driver.sensor.generic '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/sensor/generic/build_452c18b'
        script {
          test_driver_sensor_driver_sensor_generic_result = "SUCCESS"
        }
      }
      script {
        echo test_driver_sensor_driver_sensor_generic_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'driver.sensor.generic', 'result': test_driver_sensor_driver_sensor_generic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'driver.sensor.generic', 'result': test_driver_sensor_driver_sensor_generic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_driver_sensor_driver_sensor_fpu_result
   def test_driver_sensor_driver_sensor_fpu() {
      echo 'Test driver.sensor.fpu'
      echo 'driver.sensor.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_driver_sensor_driver_sensor_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/sensor/generic frdm_k64f build_23d46e6  -DCONF_FILE=prj_fpu.conf driver.sensor.fpu tests/drivers/sensor/generic  -DCONF_FILE=prj_fpu.conf'''
        script {
          test_driver_sensor_driver_sensor_fpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/sensor/generic/build_23d46e6 driver.sensor.fpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/sensor/generic/build_23d46e6'
        script {
          test_driver_sensor_driver_sensor_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_driver_sensor_driver_sensor_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'driver.sensor.fpu', 'result': test_driver_sensor_driver_sensor_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'driver.sensor.fpu', 'result': test_driver_sensor_driver_sensor_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_sample_drivers_watchdog_result
   def test_drivers_sample_drivers_watchdog() {
      echo 'Test sample.drivers.watchdog'
      echo 'sample.drivers.watchdog'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_sample_drivers_watchdog_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/watchdog frdm_k64f build_fd0451b sample.drivers.watchdog samples/drivers/watchdog'''
        script {
          test_drivers_sample_drivers_watchdog_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/watchdog/build_fd0451b sample.drivers.watchdog '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/watchdog/build_fd0451b'
        script {
          test_drivers_sample_drivers_watchdog_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_sample_drivers_watchdog_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.watchdog', 'result': test_drivers_sample_drivers_watchdog_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.watchdog', 'result': test_drivers_sample_drivers_watchdog_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_sample_display_grove_display_result
   def test_drivers_sample_display_grove_display() {
      echo 'Test sample.display.grove_display'
      echo 'sample.display.grove_display'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_sample_display_grove_display_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/display/grove_display frdm_k64f build_3a05654 sample.display.grove_display samples/subsys/display/grove_display'''
        script {
          test_drivers_sample_display_grove_display_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/display/grove_display/build_3a05654 sample.display.grove_display '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/display/grove_display/build_3a05654'
        script {
          test_drivers_sample_display_grove_display_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_sample_display_grove_display_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.display.grove_display', 'result': test_drivers_sample_display_grove_display_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.display.grove_display', 'result': test_drivers_sample_display_grove_display_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_eeprom_build_result
   def test_drivers_drivers_eeprom_build() {
      echo 'Test drivers.eeprom.build'
      echo 'drivers.eeprom.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_eeprom_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/build_all/eeprom frdm_k64f build_0e86092 drivers.eeprom.build tests/drivers/build_all/eeprom'''
        script {
          test_drivers_drivers_eeprom_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/build_all/eeprom/build_0e86092'
        script {
          test_drivers_drivers_eeprom_build_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_eeprom_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.eeprom.build', 'result': test_drivers_drivers_eeprom_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.eeprom.build', 'result': test_drivers_drivers_eeprom_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_net_ethernet_build_result
   def test_drivers_net_ethernet_build() {
      echo 'Test net.ethernet.build'
      echo 'net.ethernet.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_net_ethernet_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/build_all/ethernet frdm_k64f build_98d6ba2 net.ethernet.build tests/drivers/build_all/ethernet'''
        script {
          test_drivers_net_ethernet_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/build_all/ethernet/build_98d6ba2'
        script {
          test_drivers_net_ethernet_build_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_net_ethernet_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.ethernet.build', 'result': test_drivers_net_ethernet_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.ethernet.build', 'result': test_drivers_net_ethernet_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_gpio_build_result
   def test_drivers_drivers_gpio_build() {
      echo 'Test drivers.gpio.build'
      echo 'drivers.gpio.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_gpio_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/build_all/gpio frdm_k64f build_d2f620e drivers.gpio.build tests/drivers/build_all/gpio'''
        script {
          test_drivers_drivers_gpio_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/build_all/gpio/build_d2f620e'
        script {
          test_drivers_drivers_gpio_build_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_gpio_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.gpio.build', 'result': test_drivers_drivers_gpio_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.gpio.build', 'result': test_drivers_drivers_gpio_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_led_build_result
   def test_drivers_drivers_led_build() {
      echo 'Test drivers.led.build'
      echo 'drivers.led.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_led_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/build_all/led frdm_k64f build_cb53dbd drivers.led.build tests/drivers/build_all/led'''
        script {
          test_drivers_drivers_led_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/build_all/led/build_cb53dbd'
        script {
          test_drivers_drivers_led_build_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_led_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.led.build', 'result': test_drivers_drivers_led_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.led.build', 'result': test_drivers_drivers_led_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_modem_build_result
   def test_drivers_drivers_modem_build() {
      echo 'Test drivers.modem.build'
      echo 'drivers.modem.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_modem_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/build_all/modem frdm_k64f build_ee0c38b  -DCONF_FILE=modem.conf drivers.modem.build tests/drivers/build_all/modem  -DCONF_FILE=modem.conf'''
        script {
          test_drivers_drivers_modem_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/build_all/modem/build_ee0c38b'
        script {
          test_drivers_drivers_modem_build_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_modem_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.modem.build', 'result': test_drivers_drivers_modem_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.modem.build', 'result': test_drivers_drivers_modem_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_modem_ublox_sara_build_result
   def test_drivers_drivers_modem_ublox_sara_build() {
      echo 'Test drivers.modem.ublox_sara.build'
      echo 'drivers.modem.ublox_sara.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_modem_ublox_sara_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/build_all/modem frdm_k64f build_641f7a2  -DCONF_FILE=modem_ublox_sara.conf drivers.modem.ublox_sara.build tests/drivers/build_all/modem  -DCONF_FILE=modem_ublox_sara.conf'''
        script {
          test_drivers_drivers_modem_ublox_sara_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/build_all/modem/build_641f7a2'
        script {
          test_drivers_drivers_modem_ublox_sara_build_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_modem_ublox_sara_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.modem.ublox_sara.build', 'result': test_drivers_drivers_modem_ublox_sara_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.modem.ublox_sara.build', 'result': test_drivers_drivers_modem_ublox_sara_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_modem_quectel_bg9x_build_result
   def test_drivers_drivers_modem_quectel_bg9x_build() {
      echo 'Test drivers.modem.quectel_bg9x.build'
      echo 'drivers.modem.quectel_bg9x.build'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_modem_quectel_bg9x_build_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/build_all/modem frdm_k64f build_fee9d4c  -DCONF_FILE=modem_quectel_bg9x.conf drivers.modem.quectel_bg9x.build tests/drivers/build_all/modem  -DCONF_FILE=modem_quectel_bg9x.conf'''
        script {
          test_drivers_drivers_modem_quectel_bg9x_build_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/build_all/modem/build_fee9d4c'
        script {
          test_drivers_drivers_modem_quectel_bg9x_build_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_modem_quectel_bg9x_build_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.modem.quectel_bg9x.build', 'result': test_drivers_drivers_modem_quectel_bg9x_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.modem.quectel_bg9x.build', 'result': test_drivers_drivers_modem_quectel_bg9x_build_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_counter_result
   def test_drivers_drivers_counter() {
      echo 'Test drivers.counter'
      echo 'drivers.counter'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_counter_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/counter/counter_basic_api frdm_k64f build_5ffce5f drivers.counter tests/drivers/counter/counter_basic_api'''
        script {
          test_drivers_drivers_counter_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/counter/counter_basic_api/build_5ffce5f drivers.counter '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/counter/counter_basic_api/build_5ffce5f'
        script {
          test_drivers_drivers_counter_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_counter_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.counter', 'result': test_drivers_drivers_counter_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.counter', 'result': test_drivers_drivers_counter_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_uart_result
   def test_drivers_drivers_uart() {
      echo 'Test drivers.uart'
      echo 'drivers.uart'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_uart_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/uart/uart_basic_api frdm_k64f build_fb51407 drivers.uart tests/drivers/uart/uart_basic_api'''
        script {
          test_drivers_drivers_uart_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/uart/uart_basic_api/build_fb51407 drivers.uart '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/uart/uart_basic_api/build_fb51407'
        script {
          test_drivers_drivers_uart_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_uart_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.uart', 'result': test_drivers_drivers_uart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.uart', 'result': test_drivers_drivers_uart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_uart_poll_result
   def test_drivers_drivers_uart_poll() {
      echo 'Test drivers.uart.poll'
      echo 'drivers.uart.poll'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_uart_poll_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/uart/uart_basic_api frdm_k64f build_55cef95  -DCONF_FILE=prj_poll.conf drivers.uart.poll tests/drivers/uart/uart_basic_api  -DCONF_FILE=prj_poll.conf'''
        script {
          test_drivers_drivers_uart_poll_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/uart/uart_basic_api/build_55cef95 drivers.uart.poll '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/uart/uart_basic_api/build_55cef95'
        script {
          test_drivers_drivers_uart_poll_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_uart_poll_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.uart.poll', 'result': test_drivers_drivers_uart_poll_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.uart.poll', 'result': test_drivers_drivers_uart_poll_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_drivers_uart_shell_result
   def test_drivers_drivers_uart_shell() {
      echo 'Test drivers.uart.shell'
      echo 'drivers.uart.shell'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_drivers_uart_shell_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/uart/uart_basic_api frdm_k64f build_0cae994  -DCONF_FILE=prj_shell.conf drivers.uart.shell tests/drivers/uart/uart_basic_api  -DCONF_FILE=prj_shell.conf'''
        script {
          test_drivers_drivers_uart_shell_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/uart/uart_basic_api/build_0cae994 drivers.uart.shell '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/uart/uart_basic_api/build_0cae994'
        script {
          test_drivers_drivers_uart_shell_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_drivers_uart_shell_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.uart.shell', 'result': test_drivers_drivers_uart_shell_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.uart.shell', 'result': test_drivers_drivers_uart_shell_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_bbram_drivers_bbram_it8xxx2_result
   def test_drivers_bbram_drivers_bbram_it8xxx2() {
      echo 'Test drivers.bbram.it8xxx2'
      echo 'drivers.bbram.it8xxx2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_bbram_drivers_bbram_it8xxx2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/bbram frdm_k64f build_5f620ea  -DCONF_FILE=it8xxx2.conf drivers.bbram.it8xxx2 tests/drivers/bbram  -DCONF_FILE=it8xxx2.conf'''
        script {
          test_drivers_bbram_drivers_bbram_it8xxx2_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/bbram/build_5f620ea'
        script {
          test_drivers_bbram_drivers_bbram_it8xxx2_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_bbram_drivers_bbram_it8xxx2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.bbram.it8xxx2', 'result': test_drivers_bbram_drivers_bbram_it8xxx2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.bbram.it8xxx2', 'result': test_drivers_bbram_drivers_bbram_it8xxx2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_bbram_drivers_bbram_npcx_result
   def test_drivers_bbram_drivers_bbram_npcx() {
      echo 'Test drivers.bbram.npcx'
      echo 'drivers.bbram.npcx'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_bbram_drivers_bbram_npcx_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/bbram frdm_k64f build_ebcd629  -DCONF_FILE=npcx.conf drivers.bbram.npcx tests/drivers/bbram  -DCONF_FILE=npcx.conf'''
        script {
          test_drivers_bbram_drivers_bbram_npcx_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/bbram/build_ebcd629'
        script {
          test_drivers_bbram_drivers_bbram_npcx_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_bbram_drivers_bbram_npcx_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.bbram.npcx', 'result': test_drivers_bbram_drivers_bbram_npcx_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.bbram.npcx', 'result': test_drivers_bbram_drivers_bbram_npcx_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_console_drivers_console_uart_result
   def test_drivers_console_drivers_console_uart() {
      echo 'Test drivers.console.uart'
      echo 'drivers.console.uart'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_console_drivers_console_uart_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/console frdm_k64f build_5615125 drivers.console.uart tests/drivers/console'''
        script {
          test_drivers_console_drivers_console_uart_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/console/build_5615125 drivers.console.uart '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/console/build_5615125'
        script {
          test_drivers_console_drivers_console_uart_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_console_drivers_console_uart_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.console.uart', 'result': test_drivers_console_drivers_console_uart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.console.uart', 'result': test_drivers_console_drivers_console_uart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_fram_sample_drivers_spi_fujitsu_fram_result
   def test_drivers_fram_sample_drivers_spi_fujitsu_fram() {
      echo 'Test sample.drivers.spi.fujitsu_fram'
      echo 'sample.drivers.spi.fujitsu_fram'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_fram_sample_drivers_spi_fujitsu_fram_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/spi_fujitsu_fram frdm_k64f build_2b137ad sample.drivers.spi.fujitsu_fram samples/drivers/spi_fujitsu_fram'''
        script {
          test_drivers_fram_sample_drivers_spi_fujitsu_fram_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/spi_fujitsu_fram/build_2b137ad sample.drivers.spi.fujitsu_fram '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/spi_fujitsu_fram/build_2b137ad'
        script {
          test_drivers_fram_sample_drivers_spi_fujitsu_fram_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_fram_sample_drivers_spi_fujitsu_fram_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.spi.fujitsu_fram', 'result': test_drivers_fram_sample_drivers_spi_fujitsu_fram_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.spi.fujitsu_fram', 'result': test_drivers_fram_sample_drivers_spi_fujitsu_fram_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_ipc_drivers_ipc_mailbox_result
   def test_drivers_ipc_drivers_ipc_mailbox() {
      echo 'Test drivers.ipc.mailbox'
      echo 'drivers.ipc.mailbox'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_ipc_drivers_ipc_mailbox_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/ipm frdm_k64f build_133bdcf drivers.ipc.mailbox tests/drivers/ipm'''
        script {
          test_drivers_ipc_drivers_ipc_mailbox_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/ipm/build_133bdcf drivers.ipc.mailbox '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/ipm/build_133bdcf'
        script {
          test_drivers_ipc_drivers_ipc_mailbox_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_ipc_drivers_ipc_mailbox_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.ipc.mailbox', 'result': test_drivers_ipc_drivers_ipc_mailbox_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.ipc.mailbox', 'result': test_drivers_ipc_drivers_ipc_mailbox_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_spi_drivers_spi_loopback_result
   def test_drivers_spi_drivers_spi_loopback() {
      echo 'Test drivers.spi.loopback'
      echo 'drivers.spi.loopback'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_spi_drivers_spi_loopback_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/spi/spi_loopback frdm_k64f build_a5925ba drivers.spi.loopback tests/drivers/spi/spi_loopback'''
        script {
          test_drivers_spi_drivers_spi_loopback_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/spi/spi_loopback/build_a5925ba drivers.spi.loopback '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/spi/spi_loopback/build_a5925ba'
        script {
          test_drivers_spi_drivers_spi_loopback_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_spi_drivers_spi_loopback_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.spi.loopback', 'result': test_drivers_spi_drivers_spi_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.spi.loopback', 'result': test_drivers_spi_drivers_spi_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_usb_drivers_uart_cdc_acm_result
   def test_drivers_usb_drivers_uart_cdc_acm() {
      echo 'Test drivers.uart.cdc_acm'
      echo 'drivers.uart.cdc_acm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_usb_drivers_uart_cdc_acm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/uart/uart_basic_api frdm_k64f build_20b50c6  -DOVERLAY_CONFIG=overlay-usb.conf -DDTC_OVERLAY_FILE=usb.overlay drivers.uart.cdc_acm tests/drivers/uart/uart_basic_api  -DOVERLAY_CONFIG=overlay-usb.conf -DDTC_OVERLAY_FILE=usb.overlay'''
        script {
          test_drivers_usb_drivers_uart_cdc_acm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/uart/uart_basic_api/build_20b50c6 drivers.uart.cdc_acm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/uart/uart_basic_api/build_20b50c6'
        script {
          test_drivers_usb_drivers_uart_cdc_acm_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_usb_drivers_uart_cdc_acm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.uart.cdc_acm', 'result': test_drivers_usb_drivers_uart_cdc_acm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.uart.cdc_acm', 'result': test_drivers_usb_drivers_uart_cdc_acm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_drivers_watchdog_drivers_watchdog_result
   def test_drivers_watchdog_drivers_watchdog() {
      echo 'Test drivers.watchdog'
      echo 'drivers.watchdog'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_drivers_watchdog_drivers_watchdog_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/drivers/watchdog/wdt_basic_api frdm_k64f build_9a81bfa drivers.watchdog tests/drivers/watchdog/wdt_basic_api'''
        script {
          test_drivers_watchdog_drivers_watchdog_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/drivers/watchdog/wdt_basic_api/build_9a81bfa drivers.watchdog '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/drivers/watchdog/wdt_basic_api/build_9a81bfa'
        script {
          test_drivers_watchdog_drivers_watchdog_result = "SUCCESS"
        }
      }
      script {
        echo test_drivers_watchdog_drivers_watchdog_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'drivers.watchdog', 'result': test_drivers_watchdog_drivers_watchdog_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'drivers.watchdog', 'result': test_drivers_watchdog_drivers_watchdog_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2_result
   def test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2() {
      echo 'Test sample.drivers.eeprom.shield.x_nucleo_eeprma2'
      echo 'sample.drivers.eeprom.shield.x_nucleo_eeprma2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/eeprom frdm_k64f build_7e25ca1  -DSHIELD=x_nucleo_eeprma2 sample.drivers.eeprom.shield.x_nucleo_eeprma2 samples/drivers/eeprom  -DSHIELD=x_nucleo_eeprma2'''
        script {
          test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/eeprom/build_7e25ca1 sample.drivers.eeprom.shield.x_nucleo_eeprma2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/eeprom/build_7e25ca1'
        script {
          test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2_result = "SUCCESS"
        }
      }
      script {
        echo test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.eeprom.shield.x_nucleo_eeprma2', 'result': test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.eeprom.shield.x_nucleo_eeprma2', 'result': test_eeprom_shield_sample_drivers_eeprom_shield_x_nucleo_eeprma2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_external_sample_app_dev_external_lib_result
   def test_external_sample_app_dev_external_lib() {
      echo 'Test sample.app_dev.external_lib'
      echo 'sample.app_dev.external_lib'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_external_sample_app_dev_external_lib_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/application_development/external_lib frdm_k64f build_75edd23 sample.app_dev.external_lib samples/application_development/external_lib'''
        script {
          test_external_sample_app_dev_external_lib_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/application_development/external_lib/build_75edd23 sample.app_dev.external_lib '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/application_development/external_lib/build_75edd23'
        script {
          test_external_sample_app_dev_external_lib_result = "SUCCESS"
        }
      }
      script {
        echo test_external_sample_app_dev_external_lib_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.app_dev.external_lib', 'result': test_external_sample_app_dev_external_lib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.app_dev.external_lib', 'result': test_external_sample_app_dev_external_lib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_fdtable_libraries_os_fdtable_result
   def test_fdtable_libraries_os_fdtable() {
      echo 'Test libraries.os.fdtable'
      echo 'libraries.os.fdtable'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_fdtable_libraries_os_fdtable_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/fdtable frdm_k64f build_a96045a libraries.os.fdtable tests/lib/fdtable'''
        script {
          test_fdtable_libraries_os_fdtable_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/fdtable/build_a96045a libraries.os.fdtable '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/fdtable/build_a96045a'
        script {
          test_fdtable_libraries_os_fdtable_result = "SUCCESS"
        }
      }
      script {
        echo test_fdtable_libraries_os_fdtable_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.os.fdtable', 'result': test_fdtable_libraries_os_fdtable_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.os.fdtable', 'result': test_fdtable_libraries_os_fdtable_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_filesystem_filesystem_api_result
   def test_filesystem_filesystem_api() {
      echo 'Test filesystem.api'
      echo 'filesystem.api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_filesystem_filesystem_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/fs/fs_api frdm_k64f build_a97177e filesystem.api tests/subsys/fs/fs_api'''
        script {
          test_filesystem_filesystem_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/fs/fs_api/build_a97177e filesystem.api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/fs/fs_api/build_a97177e'
        script {
          test_filesystem_filesystem_api_result = "SUCCESS"
        }
      }
      script {
        echo test_filesystem_filesystem_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'filesystem.api', 'result': test_filesystem_filesystem_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'filesystem.api', 'result': test_filesystem_filesystem_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_flash_map_storage_flash_map_mpu_result
   def test_flash_map_storage_flash_map_mpu() {
      echo 'Test storage.flash_map.mpu'
      echo 'storage.flash_map.mpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_flash_map_storage_flash_map_mpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/storage/flash_map frdm_k64f build_b7cb4ab  -DOVERLAY_CONFIG=overlay-mpu.conf storage.flash_map.mpu tests/subsys/storage/flash_map  -DOVERLAY_CONFIG=overlay-mpu.conf'''
        script {
          test_flash_map_storage_flash_map_mpu_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/storage/flash_map/build_b7cb4ab storage.flash_map.mpu '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/storage/flash_map/build_b7cb4ab'
        script {
          test_flash_map_storage_flash_map_mpu_result = "SUCCESS"
        }
      }
      script {
        echo test_flash_map_storage_flash_map_mpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'storage.flash_map.mpu', 'result': test_flash_map_storage_flash_map_mpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'storage.flash_map.mpu', 'result': test_flash_map_storage_flash_map_mpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_footprint_sample_minimal_mt_arm_result
   def test_footprint_sample_minimal_mt_arm() {
      echo 'Test sample.minimal.mt.arm'
      echo 'sample.minimal.mt.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_footprint_sample_minimal_mt_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/basic/minimal frdm_k64f build_d39c1b2  -DCONF_FILE=common.conf -DCONF_FILE=mt.conf -DCONF_FILE=arm.conf sample.minimal.mt.arm samples/basic/minimal  -DCONF_FILE=common.conf -DCONF_FILE=mt.conf -DCONF_FILE=arm.conf'''
        script {
          test_footprint_sample_minimal_mt_arm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/basic/minimal/build_d39c1b2'
        script {
          test_footprint_sample_minimal_mt_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_footprint_sample_minimal_mt_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.mt.arm', 'result': test_footprint_sample_minimal_mt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.mt.arm', 'result': test_footprint_sample_minimal_mt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_footprint_sample_minimal_mt_no_preempt_arm_result
   def test_footprint_sample_minimal_mt_no_preempt_arm() {
      echo 'Test sample.minimal.mt-no-preempt.arm'
      echo 'sample.minimal.mt-no-preempt.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_footprint_sample_minimal_mt_no_preempt_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/basic/minimal frdm_k64f build_b3bc255  -DCONF_FILE=common.conf -DCONF_FILE=mt.conf -DCONF_FILE=no-preempt.conf -DCONF_FILE=arm.conf sample.minimal.mt-no-preempt.arm samples/basic/minimal  -DCONF_FILE=common.conf -DCONF_FILE=mt.conf -DCONF_FILE=no-preempt.conf -DCONF_FILE=arm.conf'''
        script {
          test_footprint_sample_minimal_mt_no_preempt_arm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/basic/minimal/build_b3bc255'
        script {
          test_footprint_sample_minimal_mt_no_preempt_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_footprint_sample_minimal_mt_no_preempt_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.mt-no-preempt.arm', 'result': test_footprint_sample_minimal_mt_no_preempt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.mt-no-preempt.arm', 'result': test_footprint_sample_minimal_mt_no_preempt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_footprint_sample_minimal_mt_no_preempt_no_timers_arm_result
   def test_footprint_sample_minimal_mt_no_preempt_no_timers_arm() {
      echo 'Test sample.minimal.mt-no-preempt-no-timers.arm'
      echo 'sample.minimal.mt-no-preempt-no-timers.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_footprint_sample_minimal_mt_no_preempt_no_timers_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/basic/minimal frdm_k64f build_5f5b800  -DCONF_FILE=common.conf -DCONF_FILE=mt.conf -DCONF_FILE=no-preempt.conf -DCONF_FILE=no-timers.conf -DCONF_FILE=arm.conf sample.minimal.mt-no-preempt-no-timers.arm samples/basic/minimal  -DCONF_FILE=common.conf -DCONF_FILE=mt.conf -DCONF_FILE=no-preempt.conf -DCONF_FILE=no-timers.conf -DCONF_FILE=arm.conf'''
        script {
          test_footprint_sample_minimal_mt_no_preempt_no_timers_arm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/basic/minimal/build_5f5b800'
        script {
          test_footprint_sample_minimal_mt_no_preempt_no_timers_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_footprint_sample_minimal_mt_no_preempt_no_timers_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.mt-no-preempt-no-timers.arm', 'result': test_footprint_sample_minimal_mt_no_preempt_no_timers_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.mt-no-preempt-no-timers.arm', 'result': test_footprint_sample_minimal_mt_no_preempt_no_timers_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_footprint_sample_minimal_no_mt_arm_result
   def test_footprint_sample_minimal_no_mt_arm() {
      echo 'Test sample.minimal.no-mt.arm'
      echo 'sample.minimal.no-mt.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_footprint_sample_minimal_no_mt_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/basic/minimal frdm_k64f build_736c981  -DCONF_FILE=common.conf -DCONF_FILE=no-mt.conf -DCONF_FILE=arm.conf sample.minimal.no-mt.arm samples/basic/minimal  -DCONF_FILE=common.conf -DCONF_FILE=no-mt.conf -DCONF_FILE=arm.conf'''
        script {
          test_footprint_sample_minimal_no_mt_arm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/basic/minimal/build_736c981'
        script {
          test_footprint_sample_minimal_no_mt_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_footprint_sample_minimal_no_mt_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.no-mt.arm', 'result': test_footprint_sample_minimal_no_mt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.no-mt.arm', 'result': test_footprint_sample_minimal_no_mt_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_footprint_sample_minimal_no_mt_no_timers_arm_result
   def test_footprint_sample_minimal_no_mt_no_timers_arm() {
      echo 'Test sample.minimal.no-mt-no-timers.arm'
      echo 'sample.minimal.no-mt-no-timers.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_footprint_sample_minimal_no_mt_no_timers_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/basic/minimal frdm_k64f build_ae36f10  -DCONF_FILE=common.conf -DCONF_FILE=no-mt.conf -DCONF_FILE=no-timers.conf -DCONF_FILE=arm.conf sample.minimal.no-mt-no-timers.arm samples/basic/minimal  -DCONF_FILE=common.conf -DCONF_FILE=no-mt.conf -DCONF_FILE=no-timers.conf -DCONF_FILE=arm.conf'''
        script {
          test_footprint_sample_minimal_no_mt_no_timers_arm_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/basic/minimal/build_ae36f10'
        script {
          test_footprint_sample_minimal_no_mt_no_timers_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_footprint_sample_minimal_no_mt_no_timers_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.no-mt-no-timers.arm', 'result': test_footprint_sample_minimal_no_mt_no_timers_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.minimal.no-mt-no-timers.arm', 'result': test_footprint_sample_minimal_no_mt_no_timers_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_fpu_kernel_kernel_fpu_sharing_generic_arm_result
   def test_fpu_kernel_kernel_fpu_sharing_generic_arm() {
      echo 'Test kernel.fpu_sharing.generic.arm'
      echo 'kernel.fpu_sharing.generic.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_fpu_kernel_kernel_fpu_sharing_generic_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fpu_sharing/generic frdm_k64f build_3ba4581  -DPI_NUM_ITERATIONS=70000 kernel.fpu_sharing.generic.arm tests/kernel/fpu_sharing/generic  -DPI_NUM_ITERATIONS=70000'''
        script {
          test_fpu_kernel_kernel_fpu_sharing_generic_arm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fpu_sharing/generic/build_3ba4581 kernel.fpu_sharing.generic.arm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fpu_sharing/generic/build_3ba4581'
        script {
          test_fpu_kernel_kernel_fpu_sharing_generic_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_fpu_kernel_kernel_fpu_sharing_generic_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.fpu_sharing.generic.arm', 'result': test_fpu_kernel_kernel_fpu_sharing_generic_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.fpu_sharing.generic.arm', 'result': test_fpu_kernel_kernel_fpu_sharing_generic_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing_result
   def test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing() {
      echo 'Test kernel.common.stack_protection_arm_fpu_sharing'
      echo 'kernel.common.stack_protection_arm_fpu_sharing'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fatal/exception frdm_k64f build_b93fb28  -DCONF_FILE=prj_arm_fpu_sharing.conf kernel.common.stack_protection_arm_fpu_sharing tests/kernel/fatal/exception  -DCONF_FILE=prj_arm_fpu_sharing.conf'''
        script {
          test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fatal/exception/build_b93fb28 kernel.common.stack_protection_arm_fpu_sharing '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fatal/exception/build_b93fb28'
        script {
          test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing_result = "SUCCESS"
        }
      }
      script {
        echo test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.stack_protection_arm_fpu_sharing', 'result': test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.stack_protection_arm_fpu_sharing', 'result': test_fpu_kernel_ignore_faults_userspace_kernel_common_stack_protection_arm_fpu_sharing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm_result
   def test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm() {
      echo 'Test kernel.fpu_sharing.float_disable.arm'
      echo 'kernel.fpu_sharing.float_disable.arm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fpu_sharing/float_disable frdm_k64f build_a75bc13 -DCONFIG_DYNAMIC_INTERRUPTS=y kernel.fpu_sharing.float_disable.arm tests/kernel/fpu_sharing/float_disable -DCONFIG_DYNAMIC_INTERRUPTS=y'''
        script {
          test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fpu_sharing/float_disable/build_a75bc13 kernel.fpu_sharing.float_disable.arm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fpu_sharing/float_disable/build_a75bc13'
        script {
          test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm_result = "SUCCESS"
        }
      }
      script {
        echo test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.fpu_sharing.float_disable.arm', 'result': test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.fpu_sharing.float_disable.arm', 'result': test_fpu_kernel_userspace_kernel_fpu_sharing_float_disable_arm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_gen_inc_file_buildsystem_include_file_result
   def test_gen_inc_file_buildsystem_include_file() {
      echo 'Test buildsystem.include_file'
      echo 'buildsystem.include_file'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_gen_inc_file_buildsystem_include_file_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/application_development/gen_inc_file frdm_k64f build_8e4e671 buildsystem.include_file tests/application_development/gen_inc_file'''
        script {
          test_gen_inc_file_buildsystem_include_file_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/application_development/gen_inc_file/build_8e4e671 buildsystem.include_file '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/application_development/gen_inc_file/build_8e4e671'
        script {
          test_gen_inc_file_buildsystem_include_file_result = "SUCCESS"
        }
      }
      script {
        echo test_gen_inc_file_buildsystem_include_file_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'buildsystem.include_file', 'result': test_gen_inc_file_buildsystem_include_file_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'buildsystem.include_file', 'result': test_gen_inc_file_buildsystem_include_file_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt_result
   def test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt() {
      echo 'Test samples.net.cloud.google_iot_mqtt'
      echo 'samples.net.cloud.google_iot_mqtt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/cloud/google_iot_mqtt frdm_k64f build_94ab493 samples.net.cloud.google_iot_mqtt samples/net/cloud/google_iot_mqtt'''
        script {
          test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/cloud/google_iot_mqtt/build_94ab493 samples.net.cloud.google_iot_mqtt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/cloud/google_iot_mqtt/build_94ab493'
        script {
          test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt_result = "SUCCESS"
        }
      }
      script {
        echo test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'samples.net.cloud.google_iot_mqtt', 'result': test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'samples.net.cloud.google_iot_mqtt', 'result': test_google_iot_mqtt_samples_net_cloud_google_iot_mqtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_heap_lib_heap_result
   def test_heap_lib_heap() {
      echo 'Test lib.heap'
      echo 'lib.heap'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_heap_lib_heap_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/heap frdm_k64f build_b8e6b3e lib.heap tests/lib/heap'''
        script {
          test_heap_lib_heap_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/heap/build_b8e6b3e lib.heap '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/heap/build_b8e6b3e'
        script {
          test_heap_lib_heap_result = "SUCCESS"
        }
      }
      script {
        echo test_heap_lib_heap_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.heap', 'result': test_heap_lib_heap_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.heap', 'result': test_heap_lib_heap_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_heap_lib_heap_align_result
   def test_heap_lib_heap_align() {
      echo 'Test lib.heap_align'
      echo 'lib.heap_align'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_heap_lib_heap_align_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/heap_align frdm_k64f build_defcd09 lib.heap_align tests/lib/heap_align'''
        script {
          test_heap_lib_heap_align_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/heap_align/build_defcd09 lib.heap_align '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/heap_align/build_defcd09'
        script {
          test_heap_lib_heap_align_result = "SUCCESS"
        }
      }
      script {
        echo test_heap_lib_heap_align_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.heap_align', 'result': test_heap_lib_heap_align_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.heap_align', 'result': test_heap_lib_heap_align_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_http_net_net_http_result
   def test_http_net_net_http() {
      echo 'Test net.http'
      echo 'net.http'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_http_net_net_http_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/http_header_fields frdm_k64f build_2a352e2 net.http tests/net/lib/http_header_fields'''
        script {
          test_http_net_net_http_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/http_header_fields/build_2a352e2 net.http '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/http_header_fields/build_2a352e2'
        script {
          test_http_net_net_http_result = "SUCCESS"
        }
      }
      script {
        echo test_http_net_net_http_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.http', 'result': test_http_net_net_http_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.http', 'result': test_http_net_net_http_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_i2s_example_samples_drivers_i2s_litex_result
   def test_i2s_example_samples_drivers_i2s_litex() {
      echo 'Test samples.drivers.i2s.litex'
      echo 'samples.drivers.i2s.litex'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_i2s_example_samples_drivers_i2s_litex_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/i2s/litex frdm_k64f build_da62c8f samples.drivers.i2s.litex samples/drivers/i2s/litex'''
        script {
          test_i2s_example_samples_drivers_i2s_litex_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/drivers/i2s/litex/build_da62c8f samples.drivers.i2s.litex '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/i2s/litex/build_da62c8f'
        script {
          test_i2s_example_samples_drivers_i2s_litex_result = "SUCCESS"
        }
      }
      script {
        echo test_i2s_example_samples_drivers_i2s_litex_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'samples.drivers.i2s.litex', 'result': test_i2s_example_samples_drivers_i2s_litex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'samples.drivers.i2s.litex', 'result': test_i2s_example_samples_drivers_i2s_litex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_ignore_faults_ignore_qemu_crash_coredump_logging_backend_result
   def test_ignore_faults_ignore_qemu_crash_coredump_logging_backend() {
      echo 'Test coredump.logging_backend'
      echo 'coredump.logging_backend'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_ignore_faults_ignore_qemu_crash_coredump_logging_backend_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/debug/coredump frdm_k64f build_0fe41a9 coredump.logging_backend tests/subsys/debug/coredump'''
        script {
          test_ignore_faults_ignore_qemu_crash_coredump_logging_backend_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/debug/coredump/build_0fe41a9 coredump.logging_backend '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/debug/coredump/build_0fe41a9'
        script {
          test_ignore_faults_ignore_qemu_crash_coredump_logging_backend_result = "SUCCESS"
        }
      }
      script {
        echo test_ignore_faults_ignore_qemu_crash_coredump_logging_backend_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'coredump.logging_backend', 'result': test_ignore_faults_ignore_qemu_crash_coredump_logging_backend_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'coredump.logging_backend', 'result': test_ignore_faults_ignore_qemu_crash_coredump_logging_backend_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_ignore_faults_ignore_qemu_crash_coredump_backends_logging_result
   def test_ignore_faults_ignore_qemu_crash_coredump_backends_logging() {
      echo 'Test coredump.backends.logging'
      echo 'coredump.backends.logging'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_ignore_faults_ignore_qemu_crash_coredump_backends_logging_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/debug/coredump_backends frdm_k64f build_ec24bed coredump.backends.logging tests/subsys/debug/coredump_backends'''
        script {
          test_ignore_faults_ignore_qemu_crash_coredump_backends_logging_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/debug/coredump_backends/build_ec24bed coredump.backends.logging '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/debug/coredump_backends/build_ec24bed'
        script {
          test_ignore_faults_ignore_qemu_crash_coredump_backends_logging_result = "SUCCESS"
        }
      }
      script {
        echo test_ignore_faults_ignore_qemu_crash_coredump_backends_logging_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'coredump.backends.logging', 'result': test_ignore_faults_ignore_qemu_crash_coredump_backends_logging_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'coredump.backends.logging', 'result': test_ignore_faults_ignore_qemu_crash_coredump_backends_logging_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_basic_helloworld_result
   def test_introduction_sample_basic_helloworld() {
      echo 'Test sample.basic.helloworld'
      echo 'sample.basic.helloworld'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_basic_helloworld_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/hello_world frdm_k64f build_dd30992 sample.basic.helloworld samples/hello_world'''
        script {
          test_introduction_sample_basic_helloworld_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/hello_world/build_dd30992 sample.basic.helloworld '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/hello_world/build_dd30992'
        script {
          test_introduction_sample_basic_helloworld_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_basic_helloworld_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.basic.helloworld', 'result': test_introduction_sample_basic_helloworld_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.basic.helloworld', 'result': test_introduction_sample_basic_helloworld_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_metairq_dispatch_result
   def test_introduction_sample_kernel_metairq_dispatch() {
      echo 'Test sample.kernel.metairq_dispatch'
      echo 'sample.kernel.metairq_dispatch'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_metairq_dispatch_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/kernel/metairq_dispatch frdm_k64f build_8faf8bd sample.kernel.metairq_dispatch samples/kernel/metairq_dispatch'''
        script {
          test_introduction_sample_kernel_metairq_dispatch_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/kernel/metairq_dispatch/build_8faf8bd sample.kernel.metairq_dispatch '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/kernel/metairq_dispatch/build_8faf8bd'
        script {
          test_introduction_sample_kernel_metairq_dispatch_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_metairq_dispatch_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.metairq_dispatch', 'result': test_introduction_sample_kernel_metairq_dispatch_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.metairq_dispatch', 'result': test_introduction_sample_kernel_metairq_dispatch_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_modules_canopennode_result
   def test_introduction_sample_modules_canopennode() {
      echo 'Test sample.modules.canopennode'
      echo 'sample.modules.canopennode'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_modules_canopennode_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/modules/canopennode frdm_k64f build_9e7f819 sample.modules.canopennode samples/modules/canopennode'''
        script {
          test_introduction_sample_modules_canopennode_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/modules/canopennode/build_9e7f819 sample.modules.canopennode '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/modules/canopennode/build_9e7f819'
        script {
          test_introduction_sample_modules_canopennode_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_modules_canopennode_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.modules.canopennode', 'result': test_introduction_sample_modules_canopennode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.modules.canopennode', 'result': test_introduction_sample_modules_canopennode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_result
   def test_introduction_sample_kernel_philosopher() {
      echo 'Test sample.kernel.philosopher'
      echo 'sample.kernel.philosopher'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_2a544ff  -DDEBUG_PRINTF=1 sample.kernel.philosopher samples/philosophers  -DDEBUG_PRINTF=1'''
        script {
          test_introduction_sample_kernel_philosopher_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_2a544ff sample.kernel.philosopher '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_2a544ff'
        script {
          test_introduction_sample_kernel_philosopher_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher', 'result': test_introduction_sample_kernel_philosopher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher', 'result': test_introduction_sample_kernel_philosopher_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_same_prio_result
   def test_introduction_sample_kernel_philosopher_same_prio() {
      echo 'Test sample.kernel.philosopher.same_prio'
      echo 'sample.kernel.philosopher.same_prio'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_same_prio_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_69ea6be -DSAME_PRIO=1 DEBUG_PRINTF=1 sample.kernel.philosopher.same_prio samples/philosophers -DSAME_PRIO=1 DEBUG_PRINTF=1'''
        script {
          test_introduction_sample_kernel_philosopher_same_prio_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_69ea6be sample.kernel.philosopher.same_prio '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_69ea6be'
        script {
          test_introduction_sample_kernel_philosopher_same_prio_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_same_prio_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.same_prio', 'result': test_introduction_sample_kernel_philosopher_same_prio_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.same_prio', 'result': test_introduction_sample_kernel_philosopher_same_prio_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_static_result
   def test_introduction_sample_kernel_philosopher_static() {
      echo 'Test sample.kernel.philosopher.static'
      echo 'sample.kernel.philosopher.static'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_static_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_f521f01 -DSTATIC_OBJS=1 DEBUG_PRINTF=1 sample.kernel.philosopher.static samples/philosophers -DSTATIC_OBJS=1 DEBUG_PRINTF=1'''
        script {
          test_introduction_sample_kernel_philosopher_static_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_f521f01 sample.kernel.philosopher.static '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_f521f01'
        script {
          test_introduction_sample_kernel_philosopher_static_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_static_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.static', 'result': test_introduction_sample_kernel_philosopher_static_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.static', 'result': test_introduction_sample_kernel_philosopher_static_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_semaphores_result
   def test_introduction_sample_kernel_philosopher_semaphores() {
      echo 'Test sample.kernel.philosopher.semaphores'
      echo 'sample.kernel.philosopher.semaphores'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_semaphores_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_e026eed -DFORKS=SEMAPHORES DEBUG_PRINTF=1 sample.kernel.philosopher.semaphores samples/philosophers -DFORKS=SEMAPHORES DEBUG_PRINTF=1'''
        script {
          test_introduction_sample_kernel_philosopher_semaphores_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_e026eed sample.kernel.philosopher.semaphores '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_e026eed'
        script {
          test_introduction_sample_kernel_philosopher_semaphores_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_semaphores_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.semaphores', 'result': test_introduction_sample_kernel_philosopher_semaphores_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.semaphores', 'result': test_introduction_sample_kernel_philosopher_semaphores_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_stacks_result
   def test_introduction_sample_kernel_philosopher_stacks() {
      echo 'Test sample.kernel.philosopher.stacks'
      echo 'sample.kernel.philosopher.stacks'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_stacks_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_87630da -DFORKS=STACKS DEBUG_PRINTF=1 sample.kernel.philosopher.stacks samples/philosophers -DFORKS=STACKS DEBUG_PRINTF=1'''
        script {
          test_introduction_sample_kernel_philosopher_stacks_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_87630da sample.kernel.philosopher.stacks '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_87630da'
        script {
          test_introduction_sample_kernel_philosopher_stacks_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_stacks_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.stacks', 'result': test_introduction_sample_kernel_philosopher_stacks_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.stacks', 'result': test_introduction_sample_kernel_philosopher_stacks_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_fifos_result
   def test_introduction_sample_kernel_philosopher_fifos() {
      echo 'Test sample.kernel.philosopher.fifos'
      echo 'sample.kernel.philosopher.fifos'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_fifos_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_25adeea -DFORKS=FIFOS DEBUG_PRINTF=1 sample.kernel.philosopher.fifos samples/philosophers -DFORKS=FIFOS DEBUG_PRINTF=1'''
        script {
          test_introduction_sample_kernel_philosopher_fifos_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_25adeea sample.kernel.philosopher.fifos '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_25adeea'
        script {
          test_introduction_sample_kernel_philosopher_fifos_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_fifos_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.fifos', 'result': test_introduction_sample_kernel_philosopher_fifos_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.fifos', 'result': test_introduction_sample_kernel_philosopher_fifos_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_lifos_result
   def test_introduction_sample_kernel_philosopher_lifos() {
      echo 'Test sample.kernel.philosopher.lifos'
      echo 'sample.kernel.philosopher.lifos'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_lifos_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_e475f56 -DFORKS=LIFOS DEBUG_PRINTF=1 sample.kernel.philosopher.lifos samples/philosophers -DFORKS=LIFOS DEBUG_PRINTF=1'''
        script {
          test_introduction_sample_kernel_philosopher_lifos_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_e475f56 sample.kernel.philosopher.lifos '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_e475f56'
        script {
          test_introduction_sample_kernel_philosopher_lifos_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_lifos_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.lifos', 'result': test_introduction_sample_kernel_philosopher_lifos_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.lifos', 'result': test_introduction_sample_kernel_philosopher_lifos_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_preempt_only_result
   def test_introduction_sample_kernel_philosopher_preempt_only() {
      echo 'Test sample.kernel.philosopher.preempt_only'
      echo 'sample.kernel.philosopher.preempt_only'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_preempt_only_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_3c0f9d6  -DDEBUG_PRINTF=1 -DCONFIG_NUM_PREEMPT_PRIORITIES=6 -DCONFIG_NUM_COOP_PRIORITIES=0 -DCONFIG_BT=n -DCONFIG_NETWORKING=n sample.kernel.philosopher.preempt_only samples/philosophers  -DDEBUG_PRINTF=1 -DCONFIG_NUM_PREEMPT_PRIORITIES=6 -DCONFIG_NUM_COOP_PRIORITIES=0 -DCONFIG_BT=n -DCONFIG_NETWORKING=n'''
        script {
          test_introduction_sample_kernel_philosopher_preempt_only_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_3c0f9d6 sample.kernel.philosopher.preempt_only '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_3c0f9d6'
        script {
          test_introduction_sample_kernel_philosopher_preempt_only_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_preempt_only_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.preempt_only', 'result': test_introduction_sample_kernel_philosopher_preempt_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.preempt_only', 'result': test_introduction_sample_kernel_philosopher_preempt_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_kernel_philosopher_coop_only_result
   def test_introduction_sample_kernel_philosopher_coop_only() {
      echo 'Test sample.kernel.philosopher.coop_only'
      echo 'sample.kernel.philosopher.coop_only'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_kernel_philosopher_coop_only_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/philosophers frdm_k64f build_e505ab0  -DDEBUG_PRINTF=1 -DCONFIG_NUM_PREEMPT_PRIORITIES=0 -DCONFIG_NUM_COOP_PRIORITIES=7 sample.kernel.philosopher.coop_only samples/philosophers  -DDEBUG_PRINTF=1 -DCONFIG_NUM_PREEMPT_PRIORITIES=0 -DCONFIG_NUM_COOP_PRIORITIES=7'''
        script {
          test_introduction_sample_kernel_philosopher_coop_only_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/philosophers/build_e505ab0 sample.kernel.philosopher.coop_only '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/philosophers/build_e505ab0'
        script {
          test_introduction_sample_kernel_philosopher_coop_only_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_kernel_philosopher_coop_only_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.coop_only', 'result': test_introduction_sample_kernel_philosopher_coop_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.philosopher.coop_only', 'result': test_introduction_sample_kernel_philosopher_coop_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_introduction_sample_helloworld_result
   def test_introduction_sample_helloworld() {
      echo 'Test sample.helloworld'
      echo 'sample.helloworld'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_introduction_sample_helloworld_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/userspace/hello_world_user frdm_k64f build_76a0e14 sample.helloworld samples/userspace/hello_world_user'''
        script {
          test_introduction_sample_helloworld_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/userspace/hello_world_user/build_76a0e14 sample.helloworld '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/userspace/hello_world_user/build_76a0e14'
        script {
          test_introduction_sample_helloworld_result = "SUCCESS"
        }
      }
      script {
        echo test_introduction_sample_helloworld_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.helloworld', 'result': test_introduction_sample_helloworld_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.helloworld', 'result': test_introduction_sample_helloworld_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_iterable_sections_misc_iterable_sections_result
   def test_iterable_sections_misc_iterable_sections() {
      echo 'Test misc.iterable_sections'
      echo 'misc.iterable_sections'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_iterable_sections_misc_iterable_sections_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/misc/iterable_sections frdm_k64f build_e3c6210 misc.iterable_sections tests/misc/iterable_sections'''
        script {
          test_iterable_sections_misc_iterable_sections_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/misc/iterable_sections/build_e3c6210 misc.iterable_sections '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/misc/iterable_sections/build_e3c6210'
        script {
          test_iterable_sections_misc_iterable_sections_result = "SUCCESS"
        }
      }
      script {
        echo test_iterable_sections_misc_iterable_sections_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'misc.iterable_sections', 'result': test_iterable_sections_misc_iterable_sections_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'misc.iterable_sections', 'result': test_iterable_sections_misc_iterable_sections_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_json_libraries_encoding_json_result
   def test_json_libraries_encoding_json() {
      echo 'Test libraries.encoding.json'
      echo 'libraries.encoding.json'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_json_libraries_encoding_json_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/json frdm_k64f build_bb18a31 libraries.encoding.json tests/lib/json'''
        script {
          test_json_libraries_encoding_json_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/json/build_bb18a31 libraries.encoding.json '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/json/build_bb18a31'
        script {
          test_json_libraries_encoding_json_result = "SUCCESS"
        }
      }
      script {
        echo test_json_libraries_encoding_json_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.encoding.json', 'result': test_json_libraries_encoding_json_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.encoding.json', 'result': test_json_libraries_encoding_json_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_k_heap_api_kernel_kernel_k_heap_api_result
   def test_k_heap_api_kernel_kernel_k_heap_api() {
      echo 'Test kernel.k_heap_api'
      echo 'kernel.k_heap_api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_k_heap_api_kernel_kernel_k_heap_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_heap/k_heap_api frdm_k64f build_bebe9eb kernel.k_heap_api tests/kernel/mem_heap/k_heap_api'''
        script {
          test_k_heap_api_kernel_kernel_k_heap_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_heap/k_heap_api/build_bebe9eb kernel.k_heap_api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_heap/k_heap_api/build_bebe9eb'
        script {
          test_k_heap_api_kernel_kernel_k_heap_api_result = "SUCCESS"
        }
      }
      script {
        echo test_k_heap_api_kernel_kernel_k_heap_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.k_heap_api', 'result': test_k_heap_api_kernel_kernel_k_heap_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.k_heap_api', 'result': test_k_heap_api_kernel_kernel_k_heap_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kconfig_buildsystem_kconfig_utf8_in_values_result
   def test_kconfig_buildsystem_kconfig_utf8_in_values() {
      echo 'Test buildsystem.kconfig.utf8_in_values'
      echo 'buildsystem.kconfig.utf8_in_values'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kconfig_buildsystem_kconfig_utf8_in_values_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/misc/test_build frdm_k64f build_6424b29 -DCONFIG_KERNEL_BIN_NAME=A_kconfig_value_with_a_utf8_char_in_it_Bøe_ buildsystem.kconfig.utf8_in_values tests/misc/test_build -DCONFIG_KERNEL_BIN_NAME=A_kconfig_value_with_a_utf8_char_in_it_Bøe_'''
        script {
          test_kconfig_buildsystem_kconfig_utf8_in_values_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/misc/test_build/build_6424b29'
        script {
          test_kconfig_buildsystem_kconfig_utf8_in_values_result = "SUCCESS"
        }
      }
      script {
        echo test_kconfig_buildsystem_kconfig_utf8_in_values_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'buildsystem.kconfig.utf8_in_values', 'result': test_kconfig_buildsystem_kconfig_utf8_in_values_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'buildsystem.kconfig.utf8_in_values', 'result': test_kconfig_buildsystem_kconfig_utf8_in_values_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_common_context_result
   def test_kernel_kernel_common_context() {
      echo 'Test kernel.common.context'
      echo 'kernel.common.context'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_common_context_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/context frdm_k64f build_2bfe685 kernel.common.context tests/kernel/context'''
        script {
          test_kernel_kernel_common_context_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/context/build_2bfe685 kernel.common.context '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/context/build_2bfe685'
        script {
          test_kernel_kernel_common_context_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_common_context_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.context', 'result': test_kernel_kernel_common_context_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.context', 'result': test_kernel_kernel_common_context_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_events_result
   def test_kernel_kernel_events() {
      echo 'Test kernel.events'
      echo 'kernel.events'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_events_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/events/event_api frdm_k64f build_df7ae6d kernel.events tests/kernel/events/event_api'''
        script {
          test_kernel_kernel_events_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/events/event_api/build_df7ae6d kernel.events '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/events/event_api/build_df7ae6d'
        script {
          test_kernel_kernel_events_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_events_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.events', 'result': test_kernel_kernel_events_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.events', 'result': test_kernel_kernel_events_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_logging_message_capture_result
   def test_kernel_kernel_logging_message_capture() {
      echo 'Test kernel.logging.message_capture'
      echo 'kernel.logging.message_capture'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_logging_message_capture_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fatal/message_capture frdm_k64f build_8d24e5f kernel.logging.message_capture tests/kernel/fatal/message_capture'''
        script {
          test_kernel_kernel_logging_message_capture_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fatal/message_capture/build_8d24e5f kernel.logging.message_capture '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fatal/message_capture/build_8d24e5f'
        script {
          test_kernel_kernel_logging_message_capture_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_logging_message_capture_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.logging.message_capture', 'result': test_kernel_kernel_logging_message_capture_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.logging.message_capture', 'result': test_kernel_kernel_logging_message_capture_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_fifo_result
   def test_kernel_kernel_fifo() {
      echo 'Test kernel.fifo'
      echo 'kernel.fifo'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_fifo_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fifo/fifo_api frdm_k64f build_a634291 kernel.fifo tests/kernel/fifo/fifo_api'''
        script {
          test_kernel_kernel_fifo_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fifo/fifo_api/build_a634291 kernel.fifo '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fifo/fifo_api/build_a634291'
        script {
          test_kernel_kernel_fifo_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_fifo_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.fifo', 'result': test_kernel_kernel_fifo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.fifo', 'result': test_kernel_kernel_fifo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_fifo_timeout_result
   def test_kernel_kernel_fifo_timeout() {
      echo 'Test kernel.fifo.timeout'
      echo 'kernel.fifo.timeout'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_fifo_timeout_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fifo/fifo_timeout frdm_k64f build_c61ccfb kernel.fifo.timeout tests/kernel/fifo/fifo_timeout'''
        script {
          test_kernel_kernel_fifo_timeout_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fifo/fifo_timeout/build_c61ccfb kernel.fifo.timeout '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fifo/fifo_timeout/build_c61ccfb'
        script {
          test_kernel_kernel_fifo_timeout_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_fifo_timeout_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.fifo.timeout', 'result': test_kernel_kernel_fifo_timeout_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.fifo.timeout', 'result': test_kernel_kernel_fifo_timeout_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_fifo_usage_result
   def test_kernel_kernel_fifo_usage() {
      echo 'Test kernel.fifo.usage'
      echo 'kernel.fifo.usage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_fifo_usage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fifo/fifo_usage frdm_k64f build_9510a00 kernel.fifo.usage tests/kernel/fifo/fifo_usage'''
        script {
          test_kernel_kernel_fifo_usage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fifo/fifo_usage/build_9510a00 kernel.fifo.usage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fifo/fifo_usage/build_9510a00'
        script {
          test_kernel_kernel_fifo_usage_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_fifo_usage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.fifo.usage', 'result': test_kernel_kernel_fifo_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.fifo.usage', 'result': test_kernel_kernel_fifo_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_lifo_result
   def test_kernel_kernel_lifo() {
      echo 'Test kernel.lifo'
      echo 'kernel.lifo'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_lifo_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/lifo/lifo_api frdm_k64f build_f95568b kernel.lifo tests/kernel/lifo/lifo_api'''
        script {
          test_kernel_kernel_lifo_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/lifo/lifo_api/build_f95568b kernel.lifo '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/lifo/lifo_api/build_f95568b'
        script {
          test_kernel_kernel_lifo_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_lifo_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.lifo', 'result': test_kernel_kernel_lifo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.lifo', 'result': test_kernel_kernel_lifo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_lifo_usage_result
   def test_kernel_kernel_lifo_usage() {
      echo 'Test kernel.lifo.usage'
      echo 'kernel.lifo.usage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_lifo_usage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/lifo/lifo_usage frdm_k64f build_bdfff4e kernel.lifo.usage tests/kernel/lifo/lifo_usage'''
        script {
          test_kernel_kernel_lifo_usage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/lifo/lifo_usage/build_bdfff4e kernel.lifo.usage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/lifo/lifo_usage/build_bdfff4e'
        script {
          test_kernel_kernel_lifo_usage_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_lifo_usage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.lifo.usage', 'result': test_kernel_kernel_lifo_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.lifo.usage', 'result': test_kernel_kernel_lifo_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_mailbox_api_result
   def test_kernel_kernel_mailbox_api() {
      echo 'Test kernel.mailbox.api'
      echo 'kernel.mailbox.api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_mailbox_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mbox/mbox_api frdm_k64f build_990bd51 kernel.mailbox.api tests/kernel/mbox/mbox_api'''
        script {
          test_kernel_kernel_mailbox_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mbox/mbox_api/build_990bd51 kernel.mailbox.api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mbox/mbox_api/build_990bd51'
        script {
          test_kernel_kernel_mailbox_api_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_mailbox_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.mailbox.api', 'result': test_kernel_kernel_mailbox_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.mailbox.api', 'result': test_kernel_kernel_mailbox_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_mailbox_usage_result
   def test_kernel_kernel_mailbox_usage() {
      echo 'Test kernel.mailbox.usage'
      echo 'kernel.mailbox.usage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_mailbox_usage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mbox/mbox_usage frdm_k64f build_22002bf kernel.mailbox.usage tests/kernel/mbox/mbox_usage'''
        script {
          test_kernel_kernel_mailbox_usage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mbox/mbox_usage/build_22002bf kernel.mailbox.usage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mbox/mbox_usage/build_22002bf'
        script {
          test_kernel_kernel_mailbox_usage_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_mailbox_usage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.mailbox.usage', 'result': test_kernel_kernel_mailbox_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.mailbox.usage', 'result': test_kernel_kernel_mailbox_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_memory_heap_result
   def test_kernel_kernel_memory_heap() {
      echo 'Test kernel.memory_heap'
      echo 'kernel.memory_heap'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_memory_heap_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_heap/mheap_api_concept frdm_k64f build_4c45905 -DCONFIG_IRQ_OFFLOAD=y kernel.memory_heap tests/kernel/mem_heap/mheap_api_concept -DCONFIG_IRQ_OFFLOAD=y'''
        script {
          test_kernel_kernel_memory_heap_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_heap/mheap_api_concept/build_4c45905 kernel.memory_heap '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_heap/mheap_api_concept/build_4c45905'
        script {
          test_kernel_kernel_memory_heap_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_memory_heap_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_heap', 'result': test_kernel_kernel_memory_heap_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_heap', 'result': test_kernel_kernel_memory_heap_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_memory_protection_sys_sem_nouser_result
   def test_kernel_kernel_memory_protection_sys_sem_nouser() {
      echo 'Test kernel.memory_protection.sys_sem.nouser'
      echo 'kernel.memory_protection.sys_sem.nouser'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_memory_protection_sys_sem_nouser_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/sys_sem frdm_k64f build_e52247a -DCONFIG_TEST_USERSPACE=n kernel.memory_protection.sys_sem.nouser tests/kernel/mem_protect/sys_sem -DCONFIG_TEST_USERSPACE=n'''
        script {
          test_kernel_kernel_memory_protection_sys_sem_nouser_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/sys_sem/build_e52247a kernel.memory_protection.sys_sem.nouser '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/sys_sem/build_e52247a'
        script {
          test_kernel_kernel_memory_protection_sys_sem_nouser_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_memory_protection_sys_sem_nouser_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.sys_sem.nouser', 'result': test_kernel_kernel_memory_protection_sys_sem_nouser_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.sys_sem.nouser', 'result': test_kernel_kernel_memory_protection_sys_sem_nouser_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_memory_slabs_api_result
   def test_kernel_kernel_memory_slabs_api() {
      echo 'Test kernel.memory_slabs.api'
      echo 'kernel.memory_slabs.api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_memory_slabs_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_slab/mslab frdm_k64f build_2cbebed kernel.memory_slabs.api tests/kernel/mem_slab/mslab'''
        script {
          test_kernel_kernel_memory_slabs_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_slab/mslab/build_2cbebed kernel.memory_slabs.api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_slab/mslab/build_2cbebed'
        script {
          test_kernel_kernel_memory_slabs_api_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_memory_slabs_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.api', 'result': test_kernel_kernel_memory_slabs_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.api', 'result': test_kernel_kernel_memory_slabs_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_memory_slabs_api_mslab_api_result
   def test_kernel_kernel_memory_slabs_api_mslab_api() {
      echo 'Test kernel.memory_slabs.api.mslab_api'
      echo 'kernel.memory_slabs.api.mslab_api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_memory_slabs_api_mslab_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_slab/mslab_api frdm_k64f build_8d0d803 kernel.memory_slabs.api.mslab_api tests/kernel/mem_slab/mslab_api'''
        script {
          test_kernel_kernel_memory_slabs_api_mslab_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_slab/mslab_api/build_8d0d803 kernel.memory_slabs.api.mslab_api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_slab/mslab_api/build_8d0d803'
        script {
          test_kernel_kernel_memory_slabs_api_mslab_api_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_memory_slabs_api_mslab_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.api.mslab_api', 'result': test_kernel_kernel_memory_slabs_api_mslab_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.api.mslab_api', 'result': test_kernel_kernel_memory_slabs_api_mslab_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_memory_slabs_concept_result
   def test_kernel_kernel_memory_slabs_concept() {
      echo 'Test kernel.memory_slabs.concept'
      echo 'kernel.memory_slabs.concept'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_memory_slabs_concept_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_slab/mslab_concept frdm_k64f build_541a108 kernel.memory_slabs.concept tests/kernel/mem_slab/mslab_concept'''
        script {
          test_kernel_kernel_memory_slabs_concept_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_slab/mslab_concept/build_541a108 kernel.memory_slabs.concept '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_slab/mslab_concept/build_541a108'
        script {
          test_kernel_kernel_memory_slabs_concept_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_memory_slabs_concept_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.concept', 'result': test_kernel_kernel_memory_slabs_concept_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.concept', 'result': test_kernel_kernel_memory_slabs_concept_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_memory_slabs_threadsafe_result
   def test_kernel_kernel_memory_slabs_threadsafe() {
      echo 'Test kernel.memory_slabs.threadsafe'
      echo 'kernel.memory_slabs.threadsafe'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_memory_slabs_threadsafe_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_slab/mslab_threadsafe frdm_k64f build_6b2d22a kernel.memory_slabs.threadsafe tests/kernel/mem_slab/mslab_threadsafe'''
        script {
          test_kernel_kernel_memory_slabs_threadsafe_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_slab/mslab_threadsafe/build_6b2d22a kernel.memory_slabs.threadsafe '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_slab/mslab_threadsafe/build_6b2d22a'
        script {
          test_kernel_kernel_memory_slabs_threadsafe_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_memory_slabs_threadsafe_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.threadsafe', 'result': test_kernel_kernel_memory_slabs_threadsafe_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_slabs.threadsafe', 'result': test_kernel_kernel_memory_slabs_threadsafe_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_message_queue_usage_result
   def test_kernel_kernel_message_queue_usage() {
      echo 'Test kernel.message_queue_usage'
      echo 'kernel.message_queue_usage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_message_queue_usage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/msgq/msgq_usage frdm_k64f build_20cd6e7 kernel.message_queue_usage tests/kernel/msgq/msgq_usage'''
        script {
          test_kernel_kernel_message_queue_usage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/msgq/msgq_usage/build_20cd6e7 kernel.message_queue_usage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/msgq/msgq_usage/build_20cd6e7'
        script {
          test_kernel_kernel_message_queue_usage_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_message_queue_usage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.message_queue_usage', 'result': test_kernel_kernel_message_queue_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.message_queue_usage', 'result': test_kernel_kernel_message_queue_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_system_mutex_nouser_result
   def test_kernel_system_mutex_nouser() {
      echo 'Test system.mutex.nouser'
      echo 'system.mutex.nouser'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_system_mutex_nouser_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mutex/sys_mutex frdm_k64f build_866427c -DCONFIG_TEST_USERSPACE=n system.mutex.nouser tests/kernel/mutex/sys_mutex -DCONFIG_TEST_USERSPACE=n'''
        script {
          test_kernel_system_mutex_nouser_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mutex/sys_mutex/build_866427c system.mutex.nouser '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mutex/sys_mutex/build_866427c'
        script {
          test_kernel_system_mutex_nouser_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_system_mutex_nouser_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'system.mutex.nouser', 'result': test_kernel_system_mutex_nouser_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'system.mutex.nouser', 'result': test_kernel_system_mutex_nouser_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_objects_result
   def test_kernel_kernel_objects() {
      echo 'Test kernel.objects'
      echo 'kernel.objects'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_objects_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/pending frdm_k64f build_c566bbf kernel.objects tests/kernel/pending'''
        script {
          test_kernel_kernel_objects_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/pending/build_c566bbf kernel.objects '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/pending/build_c566bbf'
        script {
          test_kernel_kernel_objects_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_objects_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.objects', 'result': test_kernel_kernel_objects_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.objects', 'result': test_kernel_kernel_objects_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_common_profiling_result
   def test_kernel_kernel_common_profiling() {
      echo 'Test kernel.common.profiling'
      echo 'kernel.common.profiling'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_common_profiling_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/profiling/profiling_api frdm_k64f build_aafd2d9 kernel.common.profiling tests/kernel/profiling/profiling_api'''
        script {
          test_kernel_kernel_common_profiling_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/profiling/profiling_api/build_aafd2d9 kernel.common.profiling '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/profiling/profiling_api/build_aafd2d9'
        script {
          test_kernel_kernel_common_profiling_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_common_profiling_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.profiling', 'result': test_kernel_kernel_common_profiling_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.profiling', 'result': test_kernel_kernel_common_profiling_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_scheduler_deadline_result
   def test_kernel_kernel_scheduler_deadline() {
      echo 'Test kernel.scheduler.deadline'
      echo 'kernel.scheduler.deadline'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_scheduler_deadline_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/deadline frdm_k64f build_2a19c2b kernel.scheduler.deadline tests/kernel/sched/deadline'''
        script {
          test_kernel_kernel_scheduler_deadline_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/deadline/build_2a19c2b kernel.scheduler.deadline '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/deadline/build_2a19c2b'
        script {
          test_kernel_kernel_scheduler_deadline_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_scheduler_deadline_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.deadline', 'result': test_kernel_kernel_scheduler_deadline_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.deadline', 'result': test_kernel_kernel_scheduler_deadline_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_scheduler_metairq_result
   def test_kernel_kernel_scheduler_metairq() {
      echo 'Test kernel.scheduler.metairq'
      echo 'kernel.scheduler.metairq'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_scheduler_metairq_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/metairq frdm_k64f build_aed5aee kernel.scheduler.metairq tests/kernel/sched/metairq'''
        script {
          test_kernel_kernel_scheduler_metairq_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/metairq/build_aed5aee kernel.scheduler.metairq '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/metairq/build_aed5aee'
        script {
          test_kernel_kernel_scheduler_metairq_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_scheduler_metairq_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.metairq', 'result': test_kernel_kernel_scheduler_metairq_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.metairq', 'result': test_kernel_kernel_scheduler_metairq_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_scheduler_preempt_result
   def test_kernel_kernel_scheduler_preempt() {
      echo 'Test kernel.scheduler.preempt'
      echo 'kernel.scheduler.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_scheduler_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/preempt frdm_k64f build_d645cc8 kernel.scheduler.preempt tests/kernel/sched/preempt'''
        script {
          test_kernel_kernel_scheduler_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/preempt/build_d645cc8 kernel.scheduler.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/preempt/build_d645cc8'
        script {
          test_kernel_kernel_scheduler_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_scheduler_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.preempt', 'result': test_kernel_kernel_scheduler_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.preempt', 'result': test_kernel_kernel_scheduler_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_tickless_concept_result
   def test_kernel_kernel_tickless_concept() {
      echo 'Test kernel.tickless.concept'
      echo 'kernel.tickless.concept'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_tickless_concept_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/tickless/tickless_concept frdm_k64f build_1ec5e1c kernel.tickless.concept tests/kernel/tickless/tickless_concept'''
        script {
          test_kernel_kernel_tickless_concept_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/tickless/tickless_concept/build_1ec5e1c kernel.tickless.concept '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/tickless/tickless_concept/build_1ec5e1c'
        script {
          test_kernel_kernel_tickless_concept_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_tickless_concept_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.tickless.concept', 'result': test_kernel_kernel_tickless_concept_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.tickless.concept', 'result': test_kernel_kernel_tickless_concept_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_workqueue_result
   def test_kernel_kernel_workqueue() {
      echo 'Test kernel.workqueue'
      echo 'kernel.workqueue'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_workqueue_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/workq/critical frdm_k64f build_c950992 kernel.workqueue tests/kernel/workq/critical'''
        script {
          test_kernel_kernel_workqueue_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/workq/critical/build_c950992 kernel.workqueue '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/workq/critical/build_c950992'
        script {
          test_kernel_kernel_workqueue_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_workqueue_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.workqueue', 'result': test_kernel_kernel_workqueue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.workqueue', 'result': test_kernel_kernel_workqueue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_work_api_result
   def test_kernel_kernel_work_api() {
      echo 'Test kernel.work.api'
      echo 'kernel.work.api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_work_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/workq/work frdm_k64f build_adb4510 kernel.work.api tests/kernel/workq/work'''
        script {
          test_kernel_kernel_work_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/workq/work/build_adb4510 kernel.work.api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/workq/work/build_adb4510'
        script {
          test_kernel_kernel_work_api_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_work_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.work.api', 'result': test_kernel_kernel_work_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.work.api', 'result': test_kernel_kernel_work_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_kernel_workqueue_work_queue_result
   def test_kernel_kernel_workqueue_work_queue() {
      echo 'Test kernel.workqueue.work_queue'
      echo 'kernel.workqueue.work_queue'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_kernel_workqueue_work_queue_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/workq/work_queue frdm_k64f build_cc5a57c kernel.workqueue.work_queue tests/kernel/workq/work_queue'''
        script {
          test_kernel_kernel_workqueue_work_queue_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/workq/work_queue/build_cc5a57c kernel.workqueue.work_queue '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/workq/work_queue/build_cc5a57c'
        script {
          test_kernel_kernel_workqueue_work_queue_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_kernel_workqueue_work_queue_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.workqueue.work_queue', 'result': test_kernel_kernel_workqueue_work_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.workqueue.work_queue', 'result': test_kernel_kernel_workqueue_work_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_condition_variables_sample_kernel_cond_var_result
   def test_kernel_condition_variables_sample_kernel_cond_var() {
      echo 'Test sample.kernel.cond_var'
      echo 'sample.kernel.cond_var'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_condition_variables_sample_kernel_cond_var_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/kernel/condition_variables/condvar frdm_k64f build_3497e6b sample.kernel.cond_var samples/kernel/condition_variables/condvar'''
        script {
          test_kernel_condition_variables_sample_kernel_cond_var_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/kernel/condition_variables/condvar/build_3497e6b sample.kernel.cond_var '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/kernel/condition_variables/condvar/build_3497e6b'
        script {
          test_kernel_condition_variables_sample_kernel_cond_var_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_condition_variables_sample_kernel_cond_var_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.cond_var', 'result': test_kernel_condition_variables_sample_kernel_cond_var_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.cond_var', 'result': test_kernel_condition_variables_sample_kernel_cond_var_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_condition_variables_sample_kernel_cond_var_simple_result
   def test_kernel_condition_variables_sample_kernel_cond_var_simple() {
      echo 'Test sample.kernel.cond_var.simple'
      echo 'sample.kernel.cond_var.simple'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_condition_variables_sample_kernel_cond_var_simple_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/kernel/condition_variables/simple frdm_k64f build_79189a8 sample.kernel.cond_var.simple samples/kernel/condition_variables/simple'''
        script {
          test_kernel_condition_variables_sample_kernel_cond_var_simple_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/kernel/condition_variables/simple/build_79189a8 sample.kernel.cond_var.simple '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/kernel/condition_variables/simple/build_79189a8'
        script {
          test_kernel_condition_variables_sample_kernel_cond_var_simple_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_condition_variables_sample_kernel_cond_var_simple_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.cond_var.simple', 'result': test_kernel_condition_variables_sample_kernel_cond_var_simple_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.cond_var.simple', 'result': test_kernel_condition_variables_sample_kernel_cond_var_simple_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_device_kernel_device_result
   def test_kernel_device_kernel_device() {
      echo 'Test kernel.device'
      echo 'kernel.device'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_device_kernel_device_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/device frdm_k64f build_7ca55b2 kernel.device tests/kernel/device'''
        script {
          test_kernel_device_kernel_device_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/device/build_7ca55b2 kernel.device '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/device/build_7ca55b2'
        script {
          test_kernel_device_kernel_device_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_device_kernel_device_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.device', 'result': test_kernel_device_kernel_device_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.device', 'result': test_kernel_device_kernel_device_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_device_kernel_device_pm_result
   def test_kernel_device_kernel_device_pm() {
      echo 'Test kernel.device.pm'
      echo 'kernel.device.pm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_device_kernel_device_pm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/device frdm_k64f build_4c30da3 -DCONFIG_PM_DEVICE=y kernel.device.pm tests/kernel/device -DCONFIG_PM_DEVICE=y'''
        script {
          test_kernel_device_kernel_device_pm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/device/build_4c30da3 kernel.device.pm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/device/build_4c30da3'
        script {
          test_kernel_device_kernel_device_pm_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_device_kernel_device_pm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.device.pm', 'result': test_kernel_device_kernel_device_pm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.device.pm', 'result': test_kernel_device_kernel_device_pm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace_result
   def test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace() {
      echo 'Test kernel.common.stack_protection_no_userspace'
      echo 'kernel.common.stack_protection_no_userspace'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fatal/exception frdm_k64f build_573325b  -DCONF_FILE=protection_no_userspace.conf kernel.common.stack_protection_no_userspace tests/kernel/fatal/exception  -DCONF_FILE=protection_no_userspace.conf'''
        script {
          test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fatal/exception/build_573325b kernel.common.stack_protection_no_userspace '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fatal/exception/build_573325b'
        script {
          test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.stack_protection_no_userspace', 'result': test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.stack_protection_no_userspace', 'result': test_kernel_ignore_faults_memory_protection_kernel_common_stack_protection_no_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_ignore_faults_userspace_kernel_common_stack_protection_result
   def test_kernel_ignore_faults_userspace_kernel_common_stack_protection() {
      echo 'Test kernel.common.stack_protection'
      echo 'kernel.common.stack_protection'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_ignore_faults_userspace_kernel_common_stack_protection_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/fatal/exception frdm_k64f build_b8d76bc  -DCONF_FILE=prj.conf kernel.common.stack_protection tests/kernel/fatal/exception  -DCONF_FILE=prj.conf'''
        script {
          test_kernel_ignore_faults_userspace_kernel_common_stack_protection_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/fatal/exception/build_b8d76bc kernel.common.stack_protection '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/fatal/exception/build_b8d76bc'
        script {
          test_kernel_ignore_faults_userspace_kernel_common_stack_protection_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_ignore_faults_userspace_kernel_common_stack_protection_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.stack_protection', 'result': test_kernel_ignore_faults_userspace_kernel_common_stack_protection_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.stack_protection', 'result': test_kernel_ignore_faults_userspace_kernel_common_stack_protection_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot_result
   def test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot() {
      echo 'Test kernel.memory_protection.stackprot'
      echo 'kernel.memory_protection.stackprot'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/stackprot frdm_k64f build_3ba2510 kernel.memory_protection.stackprot tests/kernel/mem_protect/stackprot'''
        script {
          test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/stackprot/build_3ba2510 kernel.memory_protection.stackprot '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/stackprot/build_3ba2510'
        script {
          test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.stackprot', 'result': test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.stackprot', 'result': test_kernel_ignore_faults_userspace_kernel_memory_protection_stackprot_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_interrupt_arch_interrupt_result
   def test_kernel_interrupt_arch_interrupt() {
      echo 'Test arch.interrupt'
      echo 'arch.interrupt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_interrupt_arch_interrupt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/interrupt frdm_k64f build_ec315cd arch.interrupt tests/kernel/interrupt'''
        script {
          test_kernel_interrupt_arch_interrupt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/interrupt/build_ec315cd arch.interrupt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/interrupt/build_ec315cd'
        script {
          test_kernel_interrupt_arch_interrupt_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_interrupt_arch_interrupt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt', 'result': test_kernel_interrupt_arch_interrupt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt', 'result': test_kernel_interrupt_arch_interrupt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_memory_protection_kernel_memory_protection_stack_random_result
   def test_kernel_memory_protection_kernel_memory_protection_stack_random() {
      echo 'Test kernel.memory_protection.stack_random'
      echo 'kernel.memory_protection.stack_random'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_memory_protection_kernel_memory_protection_stack_random_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/stack_random frdm_k64f build_cb0bb41 kernel.memory_protection.stack_random tests/kernel/mem_protect/stack_random'''
        script {
          test_kernel_memory_protection_kernel_memory_protection_stack_random_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/stack_random/build_cb0bb41 kernel.memory_protection.stack_random '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/stack_random/build_cb0bb41'
        script {
          test_kernel_memory_protection_kernel_memory_protection_stack_random_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_memory_protection_kernel_memory_protection_stack_random_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.stack_random', 'result': test_kernel_memory_protection_kernel_memory_protection_stack_random_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.stack_random', 'result': test_kernel_memory_protection_kernel_memory_protection_stack_random_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_security_userspace_kernel_memory_protection_obj_validation_result
   def test_kernel_security_userspace_kernel_memory_protection_obj_validation() {
      echo 'Test kernel.memory_protection.obj_validation'
      echo 'kernel.memory_protection.obj_validation'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_security_userspace_kernel_memory_protection_obj_validation_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/obj_validation frdm_k64f build_ff6b917 kernel.memory_protection.obj_validation tests/kernel/mem_protect/obj_validation'''
        script {
          test_kernel_security_userspace_kernel_memory_protection_obj_validation_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/obj_validation/build_ff6b917 kernel.memory_protection.obj_validation '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/obj_validation/build_ff6b917'
        script {
          test_kernel_security_userspace_kernel_memory_protection_obj_validation_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_security_userspace_kernel_memory_protection_obj_validation_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.obj_validation', 'result': test_kernel_security_userspace_kernel_memory_protection_obj_validation_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.obj_validation', 'result': test_kernel_security_userspace_kernel_memory_protection_obj_validation_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_security_userspace_ignore_faults_kernel_memory_protection_result
   def test_kernel_security_userspace_ignore_faults_kernel_memory_protection() {
      echo 'Test kernel.memory_protection'
      echo 'kernel.memory_protection'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/mem_protect frdm_k64f build_15a9a9c kernel.memory_protection tests/kernel/mem_protect/mem_protect'''
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/mem_protect/build_15a9a9c kernel.memory_protection '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/mem_protect/build_15a9a9c'
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_security_userspace_ignore_faults_kernel_memory_protection_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection', 'result': test_kernel_security_userspace_ignore_faults_kernel_memory_protection_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection', 'result': test_kernel_security_userspace_ignore_faults_kernel_memory_protection_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls_result
   def test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls() {
      echo 'Test kernel.memory_protection.syscalls'
      echo 'kernel.memory_protection.syscalls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/syscalls frdm_k64f build_8b6116b kernel.memory_protection.syscalls tests/kernel/mem_protect/syscalls'''
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/syscalls/build_8b6116b kernel.memory_protection.syscalls '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/syscalls/build_8b6116b'
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.syscalls', 'result': test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.syscalls', 'result': test_kernel_security_userspace_ignore_faults_kernel_memory_protection_syscalls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace_result
   def test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace() {
      echo 'Test kernel.memory_protection.userspace'
      echo 'kernel.memory_protection.userspace'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/userspace frdm_k64f build_8ac3fbe kernel.memory_protection.userspace tests/kernel/mem_protect/userspace'''
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/userspace/build_8ac3fbe kernel.memory_protection.userspace '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/userspace/build_8ac3fbe'
        script {
          test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.userspace', 'result': test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.userspace', 'result': test_kernel_security_userspace_ignore_faults_kernel_memory_protection_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack_result
   def test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack() {
      echo 'Test kernel.threads.thread_stack'
      echo 'kernel.threads.thread_stack'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/threads/thread_stack frdm_k64f build_7e5665c kernel.threads.thread_stack tests/kernel/threads/thread_stack'''
        script {
          test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/threads/thread_stack/build_7e5665c kernel.threads.thread_stack '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/threads/thread_stack/build_7e5665c'
        script {
          test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.thread_stack', 'result': test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.thread_stack', 'result': test_kernel_security_userspace_ignore_faults_kernel_threads_thread_stack_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_sleep_kernel_common_sleep_result
   def test_kernel_sleep_kernel_common_sleep() {
      echo 'Test kernel.common.sleep'
      echo 'kernel.common.sleep'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_sleep_kernel_common_sleep_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/early_sleep frdm_k64f build_f064f24 kernel.common.sleep tests/kernel/early_sleep'''
        script {
          test_kernel_sleep_kernel_common_sleep_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/early_sleep/build_f064f24 kernel.common.sleep '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/early_sleep/build_f064f24'
        script {
          test_kernel_sleep_kernel_common_sleep_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_sleep_kernel_common_sleep_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.sleep', 'result': test_kernel_sleep_kernel_common_sleep_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.sleep', 'result': test_kernel_sleep_kernel_common_sleep_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_sleep_kernel_common_timing_result
   def test_kernel_sleep_kernel_common_timing() {
      echo 'Test kernel.common.timing'
      echo 'kernel.common.timing'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_sleep_kernel_common_timing_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sleep frdm_k64f build_0624203 kernel.common.timing tests/kernel/sleep'''
        script {
          test_kernel_sleep_kernel_common_timing_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sleep/build_0624203 kernel.common.timing '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sleep/build_0624203'
        script {
          test_kernel_sleep_kernel_common_timing_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_sleep_kernel_common_timing_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.common.timing', 'result': test_kernel_sleep_kernel_common_timing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.common.timing', 'result': test_kernel_sleep_kernel_common_timing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_result
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler() {
      echo 'Test kernel.scheduler'
      echo 'kernel.scheduler'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/schedule_api frdm_k64f build_3ebcce0 -DCONFIG_TIMESLICING=y kernel.scheduler tests/kernel/sched/schedule_api -DCONFIG_TIMESLICING=y'''
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/schedule_api/build_3ebcce0 kernel.scheduler '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/schedule_api/build_3ebcce0'
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing_result
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing() {
      echo 'Test kernel.scheduler.no_timeslicing'
      echo 'kernel.scheduler.no_timeslicing'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/schedule_api frdm_k64f build_a7474e9 -DCONFIG_TIMESLICING=n kernel.scheduler.no_timeslicing tests/kernel/sched/schedule_api -DCONFIG_TIMESLICING=n'''
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/schedule_api/build_a7474e9 kernel.scheduler.no_timeslicing '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/schedule_api/build_a7474e9'
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.no_timeslicing', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.no_timeslicing', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_no_timeslicing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq_result
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq() {
      echo 'Test kernel.scheduler.multiq'
      echo 'kernel.scheduler.multiq'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/schedule_api frdm_k64f build_318f0e0  -DCONF_FILE=prj_multiq.conf -DCONFIG_TIMESLICING=y kernel.scheduler.multiq tests/kernel/sched/schedule_api  -DCONF_FILE=prj_multiq.conf -DCONFIG_TIMESLICING=y'''
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/schedule_api/build_318f0e0 kernel.scheduler.multiq '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/schedule_api/build_318f0e0'
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.multiq', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.multiq', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_multiq_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing_result
   def test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing() {
      echo 'Test kernel.scheduler.dumb_no_timeslicing'
      echo 'kernel.scheduler.dumb_no_timeslicing'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/schedule_api frdm_k64f build_900f0a3  -DCONF_FILE=prj_dumb.conf -DCONFIG_TIMESLICING=n kernel.scheduler.dumb_no_timeslicing tests/kernel/sched/schedule_api  -DCONF_FILE=prj_dumb.conf -DCONFIG_TIMESLICING=n'''
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/schedule_api/build_900f0a3 kernel.scheduler.dumb_no_timeslicing '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/schedule_api/build_900f0a3'
        script {
          test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.dumb_no_timeslicing', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.dumb_no_timeslicing', 'result': test_kernel_threads_sched_userspace_ignore_faults_kernel_scheduler_dumb_no_timeslicing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing_result
   def test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing() {
      echo 'Test kernel.scheduler.multiq_no_timeslicing'
      echo 'kernel.scheduler.multiq_no_timeslicing'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/sched/schedule_api frdm_k64f build_d87e835  -DCONF_FILE=prj_multiq.conf -DCONFIG_TIMESLICING=n kernel.scheduler.multiq_no_timeslicing tests/kernel/sched/schedule_api  -DCONF_FILE=prj_multiq.conf -DCONFIG_TIMESLICING=n'''
        script {
          test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/sched/schedule_api/build_d87e835 kernel.scheduler.multiq_no_timeslicing '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/sched/schedule_api/build_d87e835'
        script {
          test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.multiq_no_timeslicing', 'result': test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.scheduler.multiq_no_timeslicing', 'result': test_kernel_threads_sched_userspacei_ignore_faults_kernel_scheduler_multiq_no_timeslicing_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_userspace_kernel_threads_init_result
   def test_kernel_threads_userspace_kernel_threads_init() {
      echo 'Test kernel.threads.init'
      echo 'kernel.threads.init'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_userspace_kernel_threads_init_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/threads/thread_init frdm_k64f build_d3644ea kernel.threads.init tests/kernel/threads/thread_init'''
        script {
          test_kernel_threads_userspace_kernel_threads_init_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/threads/thread_init/build_d3644ea kernel.threads.init '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/threads/thread_init/build_d3644ea'
        script {
          test_kernel_threads_userspace_kernel_threads_init_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_userspace_kernel_threads_init_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.init', 'result': test_kernel_threads_userspace_kernel_threads_init_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.init', 'result': test_kernel_threads_userspace_kernel_threads_init_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic_result
   def test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic() {
      echo 'Test kernel.threads.dynamic'
      echo 'kernel.threads.dynamic'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/threads/dynamic_thread frdm_k64f build_c448858 kernel.threads.dynamic tests/kernel/threads/dynamic_thread'''
        script {
          test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/threads/dynamic_thread/build_c448858 kernel.threads.dynamic '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/threads/dynamic_thread/build_c448858'
        script {
          test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.dynamic', 'result': test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.dynamic', 'result': test_kernel_threads_userspace_ignore_faults_kernel_threads_dynamic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_threads_userspace_ignore_faults_kernel_threads_apis_result
   def test_kernel_threads_userspace_ignore_faults_kernel_threads_apis() {
      echo 'Test kernel.threads.apis'
      echo 'kernel.threads.apis'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_threads_userspace_ignore_faults_kernel_threads_apis_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/threads/thread_apis frdm_k64f build_4a26e97 kernel.threads.apis tests/kernel/threads/thread_apis'''
        script {
          test_kernel_threads_userspace_ignore_faults_kernel_threads_apis_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/threads/thread_apis/build_4a26e97 kernel.threads.apis '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/threads/thread_apis/build_4a26e97'
        script {
          test_kernel_threads_userspace_ignore_faults_kernel_threads_apis_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_threads_userspace_ignore_faults_kernel_threads_apis_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.apis', 'result': test_kernel_threads_userspace_ignore_faults_kernel_threads_apis_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.threads.apis', 'result': test_kernel_threads_userspace_ignore_faults_kernel_threads_apis_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_timer_kernel_timer_starve_result
   def test_kernel_timer_kernel_timer_starve() {
      echo 'Test kernel.timer.starve'
      echo 'kernel.timer.starve'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_timer_kernel_timer_starve_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/timer/starve frdm_k64f build_462fa70 kernel.timer.starve tests/kernel/timer/starve'''
        script {
          test_kernel_timer_kernel_timer_starve_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/timer/starve/build_462fa70'
        script {
          test_kernel_timer_kernel_timer_starve_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_timer_kernel_timer_starve_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.starve', 'result': test_kernel_timer_kernel_timer_starve_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.starve', 'result': test_kernel_timer_kernel_timer_starve_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_timer_kernel_timer_monotonic_result
   def test_kernel_timer_kernel_timer_monotonic() {
      echo 'Test kernel.timer.monotonic'
      echo 'kernel.timer.monotonic'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_timer_kernel_timer_monotonic_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/timer/timer_monotonic frdm_k64f build_5743bd6 kernel.timer.monotonic tests/kernel/timer/timer_monotonic'''
        script {
          test_kernel_timer_kernel_timer_monotonic_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/timer/timer_monotonic/build_5743bd6 kernel.timer.monotonic '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/timer/timer_monotonic/build_5743bd6'
        script {
          test_kernel_timer_kernel_timer_monotonic_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_timer_kernel_timer_monotonic_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.monotonic', 'result': test_kernel_timer_kernel_timer_monotonic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.monotonic', 'result': test_kernel_timer_kernel_timer_monotonic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_timer_userspace_kernel_timer_result
   def test_kernel_timer_userspace_kernel_timer() {
      echo 'Test kernel.timer'
      echo 'kernel.timer'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_timer_userspace_kernel_timer_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/timer/timer_api frdm_k64f build_34cdc83 kernel.timer tests/kernel/timer/timer_api'''
        script {
          test_kernel_timer_userspace_kernel_timer_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/timer/timer_api/build_34cdc83 kernel.timer '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/timer/timer_api/build_34cdc83'
        script {
          test_kernel_timer_userspace_kernel_timer_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_timer_userspace_kernel_timer_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.timer', 'result': test_kernel_timer_userspace_kernel_timer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.timer', 'result': test_kernel_timer_userspace_kernel_timer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_timer_userspace_kernel_timer_tickless_result
   def test_kernel_timer_userspace_kernel_timer_tickless() {
      echo 'Test kernel.timer.tickless'
      echo 'kernel.timer.tickless'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_timer_userspace_kernel_timer_tickless_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/timer/timer_api frdm_k64f build_3a2b073  -DCONF_FILE=prj_tickless.conf kernel.timer.tickless tests/kernel/timer/timer_api  -DCONF_FILE=prj_tickless.conf'''
        script {
          test_kernel_timer_userspace_kernel_timer_tickless_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/timer/timer_api/build_3a2b073 kernel.timer.tickless '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/timer/timer_api/build_3a2b073'
        script {
          test_kernel_timer_userspace_kernel_timer_tickless_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_timer_userspace_kernel_timer_tickless_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.tickless', 'result': test_kernel_timer_userspace_kernel_timer_tickless_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.tickless', 'result': test_kernel_timer_userspace_kernel_timer_tickless_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case_result
   def test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case() {
      echo 'Test kernel.timer.error_case'
      echo 'kernel.timer.error_case'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/timer/timer_error_case frdm_k64f build_9778942 kernel.timer.error_case tests/kernel/timer/timer_error_case'''
        script {
          test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/timer/timer_error_case/build_9778942 kernel.timer.error_case '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/timer/timer_error_case/build_9778942'
        script {
          test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.error_case', 'result': test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.timer.error_case', 'result': test_kernel_timer_userspace_ignore_faults_kernel_timer_error_case_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_kernel_futex_result
   def test_kernel_userspace_kernel_futex() {
      echo 'Test kernel.futex'
      echo 'kernel.futex'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_kernel_futex_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/futex frdm_k64f build_c2cb625 kernel.futex tests/kernel/mem_protect/futex'''
        script {
          test_kernel_userspace_kernel_futex_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/futex/build_c2cb625 kernel.futex '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/futex/build_c2cb625'
        script {
          test_kernel_userspace_kernel_futex_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_kernel_futex_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.futex', 'result': test_kernel_userspace_kernel_futex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.futex', 'result': test_kernel_userspace_kernel_futex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_kernel_memory_protection_sys_sem_result
   def test_kernel_userspace_kernel_memory_protection_sys_sem() {
      echo 'Test kernel.memory_protection.sys_sem'
      echo 'kernel.memory_protection.sys_sem'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_kernel_memory_protection_sys_sem_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mem_protect/sys_sem frdm_k64f build_0beb266 kernel.memory_protection.sys_sem tests/kernel/mem_protect/sys_sem'''
        script {
          test_kernel_userspace_kernel_memory_protection_sys_sem_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mem_protect/sys_sem/build_0beb266 kernel.memory_protection.sys_sem '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mem_protect/sys_sem/build_0beb266'
        script {
          test_kernel_userspace_kernel_memory_protection_sys_sem_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_kernel_memory_protection_sys_sem_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.sys_sem', 'result': test_kernel_userspace_kernel_memory_protection_sys_sem_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.memory_protection.sys_sem', 'result': test_kernel_userspace_kernel_memory_protection_sys_sem_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_kernel_message_queue_result
   def test_kernel_userspace_kernel_message_queue() {
      echo 'Test kernel.message_queue'
      echo 'kernel.message_queue'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_kernel_message_queue_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/msgq/msgq_api frdm_k64f build_216ff73 kernel.message_queue tests/kernel/msgq/msgq_api'''
        script {
          test_kernel_userspace_kernel_message_queue_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/msgq/msgq_api/build_216ff73 kernel.message_queue '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/msgq/msgq_api/build_216ff73'
        script {
          test_kernel_userspace_kernel_message_queue_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_kernel_message_queue_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.message_queue', 'result': test_kernel_userspace_kernel_message_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.message_queue', 'result': test_kernel_userspace_kernel_message_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_kernel_mutex_result
   def test_kernel_userspace_kernel_mutex() {
      echo 'Test kernel.mutex'
      echo 'kernel.mutex'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_kernel_mutex_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mutex/mutex_api frdm_k64f build_fc61fe5 kernel.mutex tests/kernel/mutex/mutex_api'''
        script {
          test_kernel_userspace_kernel_mutex_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mutex/mutex_api/build_fc61fe5 kernel.mutex '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mutex/mutex_api/build_fc61fe5'
        script {
          test_kernel_userspace_kernel_mutex_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_kernel_mutex_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.mutex', 'result': test_kernel_userspace_kernel_mutex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.mutex', 'result': test_kernel_userspace_kernel_mutex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_system_mutex_result
   def test_kernel_userspace_system_mutex() {
      echo 'Test system.mutex'
      echo 'system.mutex'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_system_mutex_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mutex/sys_mutex frdm_k64f build_d69fbc4 system.mutex tests/kernel/mutex/sys_mutex'''
        script {
          test_kernel_userspace_system_mutex_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mutex/sys_mutex/build_d69fbc4 system.mutex '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mutex/sys_mutex/build_d69fbc4'
        script {
          test_kernel_userspace_system_mutex_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_system_mutex_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'system.mutex', 'result': test_kernel_userspace_system_mutex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'system.mutex', 'result': test_kernel_userspace_system_mutex_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_kernel_pipe_api_result
   def test_kernel_userspace_kernel_pipe_api() {
      echo 'Test kernel.pipe.api'
      echo 'kernel.pipe.api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_kernel_pipe_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/pipe/pipe_api frdm_k64f build_4b304e1 kernel.pipe.api tests/kernel/pipe/pipe_api'''
        script {
          test_kernel_userspace_kernel_pipe_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/pipe/pipe_api/build_4b304e1 kernel.pipe.api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/pipe/pipe_api/build_4b304e1'
        script {
          test_kernel_userspace_kernel_pipe_api_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_kernel_pipe_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.pipe.api', 'result': test_kernel_userspace_kernel_pipe_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.pipe.api', 'result': test_kernel_userspace_kernel_pipe_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_kernel_work_user_result
   def test_kernel_userspace_kernel_work_user() {
      echo 'Test kernel.work.user'
      echo 'kernel.work.user'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_kernel_work_user_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/workq/user_work frdm_k64f build_9767cd2 kernel.work.user tests/kernel/workq/user_work'''
        script {
          test_kernel_userspace_kernel_work_user_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/workq/user_work/build_9767cd2 kernel.work.user '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/workq/user_work/build_9767cd2'
        script {
          test_kernel_userspace_kernel_work_user_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_kernel_work_user_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.work.user', 'result': test_kernel_userspace_kernel_work_user_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.work.user', 'result': test_kernel_userspace_kernel_work_user_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar_result
   def test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar() {
      echo 'Test kernel.condvar'
      echo 'kernel.condvar'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/condvar/condvar_api frdm_k64f build_fc2d9f7 kernel.condvar tests/kernel/condvar/condvar_api'''
        script {
          test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/condvar/condvar_api/build_fc2d9f7 kernel.condvar '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/condvar/condvar_api/build_fc2d9f7'
        script {
          test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.condvar', 'result': test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.condvar', 'result': test_kernel_userspace_condition_variables_ignore_faults_kernel_condvar_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_events_usage_result
   def test_kernel_userspace_ignore_faults_kernel_events_usage() {
      echo 'Test kernel.events.usage'
      echo 'kernel.events.usage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_events_usage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/events/sys_event frdm_k64f build_0b4dc78 kernel.events.usage tests/kernel/events/sys_event'''
        script {
          test_kernel_userspace_ignore_faults_kernel_events_usage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/events/sys_event/build_0b4dc78 kernel.events.usage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/events/sys_event/build_0b4dc78'
        script {
          test_kernel_userspace_ignore_faults_kernel_events_usage_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_events_usage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.events.usage', 'result': test_kernel_userspace_ignore_faults_kernel_events_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.events.usage', 'result': test_kernel_userspace_ignore_faults_kernel_events_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_mutex_error_case_result
   def test_kernel_userspace_ignore_faults_kernel_mutex_error_case() {
      echo 'Test kernel.mutex_error_case'
      echo 'kernel.mutex_error_case'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_mutex_error_case_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/mutex/mutex_error_case frdm_k64f build_24da7be kernel.mutex_error_case tests/kernel/mutex/mutex_error_case'''
        script {
          test_kernel_userspace_ignore_faults_kernel_mutex_error_case_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/mutex/mutex_error_case/build_24da7be kernel.mutex_error_case '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/mutex/mutex_error_case/build_24da7be'
        script {
          test_kernel_userspace_ignore_faults_kernel_mutex_error_case_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_mutex_error_case_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.mutex_error_case', 'result': test_kernel_userspace_ignore_faults_kernel_mutex_error_case_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.mutex_error_case', 'result': test_kernel_userspace_ignore_faults_kernel_mutex_error_case_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_pipe_result
   def test_kernel_userspace_ignore_faults_kernel_pipe() {
      echo 'Test kernel.pipe'
      echo 'kernel.pipe'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_pipe_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/pipe/pipe frdm_k64f build_51db68c kernel.pipe tests/kernel/pipe/pipe'''
        script {
          test_kernel_userspace_ignore_faults_kernel_pipe_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/pipe/pipe/build_51db68c kernel.pipe '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/pipe/pipe/build_51db68c'
        script {
          test_kernel_userspace_ignore_faults_kernel_pipe_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_pipe_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.pipe', 'result': test_kernel_userspace_ignore_faults_kernel_pipe_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.pipe', 'result': test_kernel_userspace_ignore_faults_kernel_pipe_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_poll_result
   def test_kernel_userspace_ignore_faults_kernel_poll() {
      echo 'Test kernel.poll'
      echo 'kernel.poll'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_poll_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/poll frdm_k64f build_6d83e00 kernel.poll tests/kernel/poll'''
        script {
          test_kernel_userspace_ignore_faults_kernel_poll_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/poll/build_6d83e00 kernel.poll '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/poll/build_6d83e00'
        script {
          test_kernel_userspace_ignore_faults_kernel_poll_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_poll_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.poll', 'result': test_kernel_userspace_ignore_faults_kernel_poll_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.poll', 'result': test_kernel_userspace_ignore_faults_kernel_poll_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_queue_result
   def test_kernel_userspace_ignore_faults_kernel_queue() {
      echo 'Test kernel.queue'
      echo 'kernel.queue'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_queue_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/queue frdm_k64f build_c2ce3c7 kernel.queue tests/kernel/queue'''
        script {
          test_kernel_userspace_ignore_faults_kernel_queue_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/queue/build_c2ce3c7 kernel.queue '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/queue/build_c2ce3c7'
        script {
          test_kernel_userspace_ignore_faults_kernel_queue_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_queue_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.queue', 'result': test_kernel_userspace_ignore_faults_kernel_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.queue', 'result': test_kernel_userspace_ignore_faults_kernel_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_semaphore_result
   def test_kernel_userspace_ignore_faults_kernel_semaphore() {
      echo 'Test kernel.semaphore'
      echo 'kernel.semaphore'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_semaphore_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/semaphore/semaphore frdm_k64f build_646a5fb kernel.semaphore tests/kernel/semaphore/semaphore'''
        script {
          test_kernel_userspace_ignore_faults_kernel_semaphore_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/semaphore/semaphore/build_646a5fb kernel.semaphore '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/semaphore/semaphore/build_646a5fb'
        script {
          test_kernel_userspace_ignore_faults_kernel_semaphore_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_semaphore_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.semaphore', 'result': test_kernel_userspace_ignore_faults_kernel_semaphore_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.semaphore', 'result': test_kernel_userspace_ignore_faults_kernel_semaphore_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_semaphore_usage_result
   def test_kernel_userspace_ignore_faults_kernel_semaphore_usage() {
      echo 'Test kernel.semaphore.usage'
      echo 'kernel.semaphore.usage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_semaphore_usage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/semaphore/sys_sem frdm_k64f build_9a021fd kernel.semaphore.usage tests/kernel/semaphore/sys_sem'''
        script {
          test_kernel_userspace_ignore_faults_kernel_semaphore_usage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/semaphore/sys_sem/build_9a021fd kernel.semaphore.usage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/semaphore/sys_sem/build_9a021fd'
        script {
          test_kernel_userspace_ignore_faults_kernel_semaphore_usage_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_semaphore_usage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.semaphore.usage', 'result': test_kernel_userspace_ignore_faults_kernel_semaphore_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.semaphore.usage', 'result': test_kernel_userspace_ignore_faults_kernel_semaphore_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_userspace_ignore_faults_kernel_stack_usage_result
   def test_kernel_userspace_ignore_faults_kernel_stack_usage() {
      echo 'Test kernel.stack.usage'
      echo 'kernel.stack.usage'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_userspace_ignore_faults_kernel_stack_usage_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/stack/stack frdm_k64f build_bb13cd3 kernel.stack.usage tests/kernel/stack/stack'''
        script {
          test_kernel_userspace_ignore_faults_kernel_stack_usage_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/stack/stack/build_bb13cd3 kernel.stack.usage '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/stack/stack/build_bb13cd3'
        script {
          test_kernel_userspace_ignore_faults_kernel_stack_usage_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_userspace_ignore_faults_kernel_stack_usage_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'kernel.stack.usage', 'result': test_kernel_userspace_ignore_faults_kernel_stack_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'kernel.stack.usage', 'result': test_kernel_userspace_ignore_faults_kernel_stack_usage_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_kernel_xip_arch_common_xip_result
   def test_kernel_xip_arch_common_xip() {
      echo 'Test arch.common.xip'
      echo 'arch.common.xip'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_kernel_xip_arch_common_xip_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/kernel/xip frdm_k64f build_393d6f8 arch.common.xip tests/kernel/xip'''
        script {
          test_kernel_xip_arch_common_xip_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/kernel/xip/build_393d6f8 arch.common.xip '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/kernel/xip/build_393d6f8'
        script {
          test_kernel_xip_arch_common_xip_result = "SUCCESS"
        }
      }
      script {
        echo test_kernel_xip_arch_common_xip_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.common.xip', 'result': test_kernel_xip_arch_common_xip_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.common.xip', 'result': test_kernel_xip_arch_common_xip_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_libc_libraries_libc_sprintf_new_result
   def test_libc_libraries_libc_sprintf_new() {
      echo 'Test libraries.libc.sprintf_new'
      echo 'libraries.libc.sprintf_new'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_libc_libraries_libc_sprintf_new_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/sprintf frdm_k64f build_648cf1f  -DCONF_FILE=prj_new.conf libraries.libc.sprintf_new tests/lib/sprintf  -DCONF_FILE=prj_new.conf'''
        script {
          test_libc_libraries_libc_sprintf_new_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/sprintf/build_648cf1f libraries.libc.sprintf_new '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/sprintf/build_648cf1f'
        script {
          test_libc_libraries_libc_sprintf_new_result = "SUCCESS"
        }
      }
      script {
        echo test_libc_libraries_libc_sprintf_new_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.sprintf_new', 'result': test_libc_libraries_libc_sprintf_new_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.sprintf_new', 'result': test_libc_libraries_libc_sprintf_new_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_libc_libraries_libc_time_result
   def test_libc_libraries_libc_time() {
      echo 'Test libraries.libc.time'
      echo 'libraries.libc.time'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_libc_libraries_libc_time_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/time frdm_k64f build_6fc1cbf libraries.libc.time tests/lib/time'''
        script {
          test_libc_libraries_libc_time_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/time/build_6fc1cbf libraries.libc.time '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/time/build_6fc1cbf'
        script {
          test_libc_libraries_libc_time_result = "SUCCESS"
        }
      }
      script {
        echo test_libc_libraries_libc_time_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.time', 'result': test_libc_libraries_libc_time_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.time', 'result': test_libc_libraries_libc_time_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_libc_ignore_faults_libraries_libc_sprintf_result
   def test_libc_ignore_faults_libraries_libc_sprintf() {
      echo 'Test libraries.libc.sprintf'
      echo 'libraries.libc.sprintf'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_libc_ignore_faults_libraries_libc_sprintf_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/sprintf frdm_k64f build_cfa6cd5  -DCONF_FILE=prj.conf libraries.libc.sprintf tests/lib/sprintf  -DCONF_FILE=prj.conf'''
        script {
          test_libc_ignore_faults_libraries_libc_sprintf_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/sprintf/build_cfa6cd5 libraries.libc.sprintf '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/sprintf/build_cfa6cd5'
        script {
          test_libc_ignore_faults_libraries_libc_sprintf_result = "SUCCESS"
        }
      }
      script {
        echo test_libc_ignore_faults_libraries_libc_sprintf_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.sprintf', 'result': test_libc_ignore_faults_libraries_libc_sprintf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.libc.sprintf', 'result': test_libc_ignore_faults_libraries_libc_sprintf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_llmnr_sample_net_dns_resolve_llmnr_result
   def test_llmnr_sample_net_dns_resolve_llmnr() {
      echo 'Test sample.net.dns_resolve.llmnr'
      echo 'sample.net.dns_resolve.llmnr'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_llmnr_sample_net_dns_resolve_llmnr_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/dns_resolve frdm_k64f build_a3cb751 -DCONFIG_MDNS_RESOLVER=n -DCONFIG_LLMNR_RESOLVER=y -DCONFIG_NET_DHCPV4=y sample.net.dns_resolve.llmnr samples/net/dns_resolve -DCONFIG_MDNS_RESOLVER=n -DCONFIG_LLMNR_RESOLVER=y -DCONFIG_NET_DHCPV4=y'''
        script {
          test_llmnr_sample_net_dns_resolve_llmnr_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/dns_resolve/build_a3cb751 sample.net.dns_resolve.llmnr '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/dns_resolve/build_a3cb751'
        script {
          test_llmnr_sample_net_dns_resolve_llmnr_result = "SUCCESS"
        }
      }
      script {
        echo test_llmnr_sample_net_dns_resolve_llmnr_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.dns_resolve.llmnr', 'result': test_llmnr_sample_net_dns_resolve_llmnr_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.dns_resolve.llmnr', 'result': test_llmnr_sample_net_dns_resolve_llmnr_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_log_core_logging_logging_log_core_result
   def test_log_core_logging_logging_log_core() {
      echo 'Test logging.log_core'
      echo 'logging.log_core'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_log_core_logging_logging_log_core_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_core frdm_k64f build_056afbf logging.log_core tests/subsys/logging/log_core'''
        script {
          test_log_core_logging_logging_log_core_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_core/build_056afbf logging.log_core '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_core/build_056afbf'
        script {
          test_log_core_logging_logging_log_core_result = "SUCCESS"
        }
      }
      script {
        echo test_log_core_logging_logging_log_core_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_core', 'result': test_log_core_logging_logging_log_core_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_core', 'result': test_log_core_logging_logging_log_core_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_log_core_logging_logging_log_immediate_result
   def test_log_core_logging_logging_log_immediate() {
      echo 'Test logging.log_immediate'
      echo 'logging.log_immediate'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_log_core_logging_logging_log_immediate_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_immediate frdm_k64f build_557c443 logging.log_immediate tests/subsys/logging/log_immediate'''
        script {
          test_log_core_logging_logging_log_immediate_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_immediate/build_557c443 logging.log_immediate '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_immediate/build_557c443'
        script {
          test_log_core_logging_logging_log_immediate_result = "SUCCESS"
        }
      }
      script {
        echo test_log_core_logging_logging_log_immediate_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_immediate', 'result': test_log_core_logging_logging_log_immediate_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_immediate', 'result': test_log_core_logging_logging_log_immediate_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_log_core_logging_logging_log_immediate_clean_output_result
   def test_log_core_logging_logging_log_immediate_clean_output() {
      echo 'Test logging.log_immediate.clean_output'
      echo 'logging.log_immediate.clean_output'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_log_core_logging_logging_log_immediate_clean_output_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_immediate frdm_k64f build_6d39f50  -DCONFIG_LOG_IMMEDIATE_CLEAN_OUTPUT=y logging.log_immediate.clean_output tests/subsys/logging/log_immediate  -DCONFIG_LOG_IMMEDIATE_CLEAN_OUTPUT=y'''
        script {
          test_log_core_logging_logging_log_immediate_clean_output_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_immediate/build_6d39f50 logging.log_immediate.clean_output '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_immediate/build_6d39f50'
        script {
          test_log_core_logging_logging_log_immediate_clean_output_result = "SUCCESS"
        }
      }
      script {
        echo test_log_core_logging_logging_log_immediate_clean_output_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_immediate.clean_output', 'result': test_log_core_logging_logging_log_immediate_clean_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_immediate.clean_output', 'result': test_log_core_logging_logging_log_immediate_clean_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_log_list_logging_logging_log_list_result
   def test_log_list_logging_logging_log_list() {
      echo 'Test logging.log_list'
      echo 'logging.log_list'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_log_list_logging_logging_log_list_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_list frdm_k64f build_cb2f063 logging.log_list tests/subsys/logging/log_list'''
        script {
          test_log_list_logging_logging_log_list_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_list/build_cb2f063 logging.log_list '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_list/build_cb2f063'
        script {
          test_log_list_logging_logging_log_list_result = "SUCCESS"
        }
      }
      script {
        echo test_log_list_logging_logging_log_list_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_list', 'result': test_log_list_logging_logging_log_list_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_list', 'result': test_log_list_logging_logging_log_list_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_log_msg_logging_logging_log_msg_result
   def test_log_msg_logging_logging_log_msg() {
      echo 'Test logging.log_msg'
      echo 'logging.log_msg'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_log_msg_logging_logging_log_msg_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_msg frdm_k64f build_8e06821 logging.log_msg tests/subsys/logging/log_msg'''
        script {
          test_log_msg_logging_logging_log_msg_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_msg/build_8e06821 logging.log_msg '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_msg/build_8e06821'
        script {
          test_log_msg_logging_logging_log_msg_result = "SUCCESS"
        }
      }
      script {
        echo test_log_msg_logging_logging_log_msg_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_msg', 'result': test_log_msg_logging_logging_log_msg_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_msg', 'result': test_log_msg_logging_logging_log_msg_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_log_output_logging_logging_log_output_result
   def test_log_output_logging_logging_log_output() {
      echo 'Test logging.log_output'
      echo 'logging.log_output'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_log_output_logging_logging_log_output_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_output frdm_k64f build_3180791 logging.log_output tests/subsys/logging/log_output'''
        script {
          test_log_output_logging_logging_log_output_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_output/build_3180791 logging.log_output '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_output/build_3180791'
        script {
          test_log_output_logging_logging_log_output_result = "SUCCESS"
        }
      }
      script {
        echo test_log_output_logging_logging_log_output_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_output', 'result': test_log_output_logging_logging_log_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_output', 'result': test_log_output_logging_logging_log_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_sample_logger_basic_dictionary_result
   def test_logging_sample_logger_basic_dictionary() {
      echo 'Test sample.logger.basic.dictionary'
      echo 'sample.logger.basic.dictionary'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_sample_logger_basic_dictionary_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/logging/dictionary frdm_k64f build_e2d4f0d sample.logger.basic.dictionary samples/subsys/logging/dictionary'''
        script {
          test_logging_sample_logger_basic_dictionary_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/logging/dictionary/build_e2d4f0d'
        script {
          test_logging_sample_logger_basic_dictionary_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_sample_logger_basic_dictionary_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic.dictionary', 'result': test_logging_sample_logger_basic_dictionary_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic.dictionary', 'result': test_logging_sample_logger_basic_dictionary_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_sample_logger_basic_dictionary_fpu_result
   def test_logging_sample_logger_basic_dictionary_fpu() {
      echo 'Test sample.logger.basic.dictionary.fpu'
      echo 'sample.logger.basic.dictionary.fpu'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_sample_logger_basic_dictionary_fpu_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/logging/dictionary frdm_k64f build_4071eaf -DCONFIG_FPU=y sample.logger.basic.dictionary.fpu samples/subsys/logging/dictionary -DCONFIG_FPU=y'''
        script {
          test_logging_sample_logger_basic_dictionary_fpu_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/logging/dictionary/build_4071eaf'
        script {
          test_logging_sample_logger_basic_dictionary_fpu_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_sample_logger_basic_dictionary_fpu_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic.dictionary.fpu', 'result': test_logging_sample_logger_basic_dictionary_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic.dictionary.fpu', 'result': test_logging_sample_logger_basic_dictionary_fpu_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_sample_logger_basic_dictionary_fpu_long_double_result
   def test_logging_sample_logger_basic_dictionary_fpu_long_double() {
      echo 'Test sample.logger.basic.dictionary.fpu.long_double'
      echo 'sample.logger.basic.dictionary.fpu.long_double'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_sample_logger_basic_dictionary_fpu_long_double_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/logging/dictionary frdm_k64f build_2490def -DCONFIG_FPU=y -DCONFIG_CBPRINTF_PACKAGE_LONGDOUBLE=y sample.logger.basic.dictionary.fpu.long_double samples/subsys/logging/dictionary -DCONFIG_FPU=y -DCONFIG_CBPRINTF_PACKAGE_LONGDOUBLE=y'''
        script {
          test_logging_sample_logger_basic_dictionary_fpu_long_double_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/logging/dictionary/build_2490def'
        script {
          test_logging_sample_logger_basic_dictionary_fpu_long_double_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_sample_logger_basic_dictionary_fpu_long_double_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic.dictionary.fpu.long_double', 'result': test_logging_sample_logger_basic_dictionary_fpu_long_double_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic.dictionary.fpu.long_double', 'result': test_logging_sample_logger_basic_dictionary_fpu_long_double_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_sample_logger_basic_result
   def test_logging_sample_logger_basic() {
      echo 'Test sample.logger.basic'
      echo 'sample.logger.basic'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_sample_logger_basic_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/logging/logger frdm_k64f build_2949bcc sample.logger.basic samples/subsys/logging/logger'''
        script {
          test_logging_sample_logger_basic_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/logging/logger/build_2949bcc sample.logger.basic '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/logging/logger/build_2949bcc'
        script {
          test_logging_sample_logger_basic_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_sample_logger_basic_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic', 'result': test_logging_sample_logger_basic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.logger.basic', 'result': test_logging_sample_logger_basic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_sample_logger_rtt_result
   def test_logging_sample_logger_rtt() {
      echo 'Test sample.logger.rtt'
      echo 'sample.logger.rtt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_sample_logger_rtt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/logging/logger frdm_k64f build_c2c39ed -DCONFIG_LOG_BACKEND_RTT=y -DCONFIG_USE_SEGGER_RTT=y sample.logger.rtt samples/subsys/logging/logger -DCONFIG_LOG_BACKEND_RTT=y -DCONFIG_USE_SEGGER_RTT=y'''
        script {
          test_logging_sample_logger_rtt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/logging/logger/build_c2c39ed sample.logger.rtt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/logging/logger/build_c2c39ed'
        script {
          test_logging_sample_logger_rtt_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_sample_logger_rtt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.logger.rtt', 'result': test_logging_sample_logger_rtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.logger.rtt', 'result': test_logging_sample_logger_rtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_logging_log_benchmark_v1_result
   def test_logging_logging_log_benchmark_v1() {
      echo 'Test logging.log_benchmark_v1'
      echo 'logging.log_benchmark_v1'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_logging_log_benchmark_v1_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_benchmark frdm_k64f build_8ca02a9 -DCONFIG_CBPRINTF_COMPLETE=y -DCONFIG_LOG_STRDUP_BUF_COUNT=8 -DCONFIG_LOG_STRDUP_MAX_STRING=32 -DCONFIG_LOG_MODE_DEFERRED=y logging.log_benchmark_v1 tests/subsys/logging/log_benchmark -DCONFIG_CBPRINTF_COMPLETE=y -DCONFIG_LOG_STRDUP_BUF_COUNT=8 -DCONFIG_LOG_STRDUP_MAX_STRING=32 -DCONFIG_LOG_MODE_DEFERRED=y'''
        script {
          test_logging_logging_log_benchmark_v1_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_benchmark/build_8ca02a9 logging.log_benchmark_v1 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_benchmark/build_8ca02a9'
        script {
          test_logging_logging_log_benchmark_v1_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_logging_log_benchmark_v1_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_benchmark_v1', 'result': test_logging_logging_log_benchmark_v1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_benchmark_v1', 'result': test_logging_logging_log_benchmark_v1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_logging_log_benchmark_v2_result
   def test_logging_logging_log_benchmark_v2() {
      echo 'Test logging.log_benchmark_v2'
      echo 'logging.log_benchmark_v2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_logging_log_benchmark_v2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_benchmark frdm_k64f build_78e9d0e -DCONFIG_CBPRINTF_COMPLETE=y -DCONFIG_LOG2_MODE_DEFERRED=y logging.log_benchmark_v2 tests/subsys/logging/log_benchmark -DCONFIG_CBPRINTF_COMPLETE=y -DCONFIG_LOG2_MODE_DEFERRED=y'''
        script {
          test_logging_logging_log_benchmark_v2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_benchmark/build_78e9d0e logging.log_benchmark_v2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_benchmark/build_78e9d0e'
        script {
          test_logging_logging_log_benchmark_v2_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_logging_log_benchmark_v2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_benchmark_v2', 'result': test_logging_logging_log_benchmark_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_benchmark_v2', 'result': test_logging_logging_log_benchmark_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_logging_log_benchmark_v2_speed_result
   def test_logging_logging_log_benchmark_v2_speed() {
      echo 'Test logging.log_benchmark_v2_speed'
      echo 'logging.log_benchmark_v2_speed'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_logging_log_benchmark_v2_speed_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_benchmark frdm_k64f build_bf4a1f4 -DCONFIG_CBPRINTF_COMPLETE=y -DCONFIG_LOG2_MODE_DEFERRED=y -DCONFIG_LOG_SPEED=y logging.log_benchmark_v2_speed tests/subsys/logging/log_benchmark -DCONFIG_CBPRINTF_COMPLETE=y -DCONFIG_LOG2_MODE_DEFERRED=y -DCONFIG_LOG_SPEED=y'''
        script {
          test_logging_logging_log_benchmark_v2_speed_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_benchmark/build_bf4a1f4 logging.log_benchmark_v2_speed '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_benchmark/build_bf4a1f4'
        script {
          test_logging_logging_log_benchmark_v2_speed_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_logging_log_benchmark_v2_speed_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.log_benchmark_v2_speed', 'result': test_logging_logging_log_benchmark_v2_speed_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.log_benchmark_v2_speed', 'result': test_logging_logging_log_benchmark_v2_speed_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_logging_add_async_result
   def test_logging_logging_add_async() {
      echo 'Test logging.add.async'
      echo 'logging.add.async'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_logging_add_async_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_core_additional frdm_k64f build_1fcb11e logging.add.async tests/subsys/logging/log_core_additional'''
        script {
          test_logging_logging_add_async_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_core_additional/build_1fcb11e logging.add.async '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_core_additional/build_1fcb11e'
        script {
          test_logging_logging_add_async_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_logging_add_async_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.add.async', 'result': test_logging_logging_add_async_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.add.async', 'result': test_logging_logging_add_async_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_logging_add_sync_result
   def test_logging_logging_add_sync() {
      echo 'Test logging.add.sync'
      echo 'logging.add.sync'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_logging_add_sync_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_core_additional frdm_k64f build_2bdd386  -DCONF_FILE=log_sync.conf logging.add.sync tests/subsys/logging/log_core_additional  -DCONF_FILE=log_sync.conf'''
        script {
          test_logging_logging_add_sync_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_core_additional/build_2bdd386 logging.add.sync '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_core_additional/build_2bdd386'
        script {
          test_logging_logging_add_sync_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_logging_add_sync_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.add.sync', 'result': test_logging_logging_add_sync_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.add.sync', 'result': test_logging_logging_add_sync_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_logging_add_log2_result
   def test_logging_logging_add_log2() {
      echo 'Test logging.add.log2'
      echo 'logging.add.log2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_logging_add_log2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/logging/log_core_additional frdm_k64f build_c970735  -DCONF_FILE=log2.conf logging.add.log2 tests/subsys/logging/log_core_additional  -DCONF_FILE=log2.conf'''
        script {
          test_logging_logging_add_log2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/logging/log_core_additional/build_c970735 logging.add.log2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/logging/log_core_additional/build_c970735'
        script {
          test_logging_logging_add_log2_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_logging_add_log2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'logging.add.log2', 'result': test_logging_logging_add_log2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'logging.add.log2', 'result': test_logging_logging_add_log2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_logging_usermode_sample_logger_usermode_result
   def test_logging_usermode_sample_logger_usermode() {
      echo 'Test sample.logger.usermode'
      echo 'sample.logger.usermode'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_logging_usermode_sample_logger_usermode_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/logging/logger frdm_k64f build_23b814a -DCONFIG_USERSPACE=y sample.logger.usermode samples/subsys/logging/logger -DCONFIG_USERSPACE=y'''
        script {
          test_logging_usermode_sample_logger_usermode_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/logging/logger/build_23b814a sample.logger.usermode '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/logging/logger/build_23b814a'
        script {
          test_logging_usermode_sample_logger_usermode_result = "SUCCESS"
        }
      }
      script {
        echo test_logging_usermode_sample_logger_usermode_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.logger.usermode', 'result': test_logging_usermode_sample_logger_usermode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.logger.usermode', 'result': test_logging_usermode_sample_logger_usermode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_mdns_sample_net_dns_resolve_mdns_result
   def test_mdns_sample_net_dns_resolve_mdns() {
      echo 'Test sample.net.dns_resolve.mdns'
      echo 'sample.net.dns_resolve.mdns'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_mdns_sample_net_dns_resolve_mdns_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/dns_resolve frdm_k64f build_0b526dd -DCONFIG_MDNS_RESOLVER=y -DCONFIG_LLMNR_RESOLVER=n -DCONFIG_NET_DHCPV4=y sample.net.dns_resolve.mdns samples/net/dns_resolve -DCONFIG_MDNS_RESOLVER=y -DCONFIG_LLMNR_RESOLVER=n -DCONFIG_NET_DHCPV4=y'''
        script {
          test_mdns_sample_net_dns_resolve_mdns_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/dns_resolve/build_0b526dd sample.net.dns_resolve.mdns '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/dns_resolve/build_0b526dd'
        script {
          test_mdns_sample_net_dns_resolve_mdns_result = "SUCCESS"
        }
      }
      script {
        echo test_mdns_sample_net_dns_resolve_mdns_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.dns_resolve.mdns', 'result': test_mdns_sample_net_dns_resolve_mdns_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.dns_resolve.mdns', 'result': test_mdns_sample_net_dns_resolve_mdns_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_mqtt_net_userspace_net_mqtt_packet_result
   def test_mqtt_net_userspace_net_mqtt_packet() {
      echo 'Test net.mqtt.packet'
      echo 'net.mqtt.packet'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_mqtt_net_userspace_net_mqtt_packet_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/mqtt_packet frdm_k64f build_48d550b net.mqtt.packet tests/net/lib/mqtt_packet'''
        script {
          test_mqtt_net_userspace_net_mqtt_packet_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/mqtt_packet/build_48d550b net.mqtt.packet '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/mqtt_packet/build_48d550b'
        script {
          test_mqtt_net_userspace_net_mqtt_packet_result = "SUCCESS"
        }
      }
      script {
        echo test_mqtt_net_userspace_net_mqtt_packet_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.packet', 'result': test_mqtt_net_userspace_net_mqtt_packet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mqtt.packet', 'result': test_mqtt_net_userspace_net_mqtt_packet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_msd_usb_sample_usb_mass_ram_none_result
   def test_msd_usb_sample_usb_mass_ram_none() {
      echo 'Test sample.usb.mass_ram_none'
      echo 'sample.usb.mass_ram_none'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_msd_usb_sample_usb_mass_ram_none_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/mass frdm_k64f build_dcbd1bf -DCONFIG_LOG_DEFAULT_LEVEL=3 sample.usb.mass_ram_none samples/subsys/usb/mass -DCONFIG_LOG_DEFAULT_LEVEL=3'''
        script {
          test_msd_usb_sample_usb_mass_ram_none_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/mass/build_dcbd1bf sample.usb.mass_ram_none '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/mass/build_dcbd1bf'
        script {
          test_msd_usb_sample_usb_mass_ram_none_result = "SUCCESS"
        }
      }
      script {
        echo test_msd_usb_sample_usb_mass_ram_none_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.mass_ram_none', 'result': test_msd_usb_sample_usb_mass_ram_none_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.mass_ram_none', 'result': test_msd_usb_sample_usb_mass_ram_none_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_msd_usb_sample_usb_mass_ram_fat_result
   def test_msd_usb_sample_usb_mass_ram_fat() {
      echo 'Test sample.usb.mass_ram_fat'
      echo 'sample.usb.mass_ram_fat'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_msd_usb_sample_usb_mass_ram_fat_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/mass frdm_k64f build_5ebae7e -DCONFIG_LOG_DEFAULT_LEVEL=3 -DCONFIG_APP_MSC_STORAGE_RAM=y sample.usb.mass_ram_fat samples/subsys/usb/mass -DCONFIG_LOG_DEFAULT_LEVEL=3 -DCONFIG_APP_MSC_STORAGE_RAM=y'''
        script {
          test_msd_usb_sample_usb_mass_ram_fat_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/mass/build_5ebae7e sample.usb.mass_ram_fat '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/mass/build_5ebae7e'
        script {
          test_msd_usb_sample_usb_mass_ram_fat_result = "SUCCESS"
        }
      }
      script {
        echo test_msd_usb_sample_usb_mass_ram_fat_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.mass_ram_fat', 'result': test_msd_usb_sample_usb_mass_ram_fat_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.mass_ram_fat', 'result': test_msd_usb_sample_usb_mass_ram_fat_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_samples_net_hawkbit_result
   def test_net_samples_net_hawkbit() {
      echo 'Test samples.net.hawkbit'
      echo 'samples.net.hawkbit'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_samples_net_hawkbit_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/mgmt/hawkbit frdm_k64f build_83babbe samples.net.hawkbit samples/subsys/mgmt/hawkbit'''
        script {
          test_net_samples_net_hawkbit_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/mgmt/hawkbit/build_83babbe'
        script {
          test_net_samples_net_hawkbit_result = "SUCCESS"
        }
      }
      script {
        echo test_net_samples_net_hawkbit_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'samples.net.hawkbit', 'result': test_net_samples_net_hawkbit_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'samples.net.hawkbit', 'result': test_net_samples_net_hawkbit_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_coap_simple_result
   def test_net_net_coap_simple() {
      echo 'Test net.coap.simple'
      echo 'net.coap.simple'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_coap_simple_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/coap frdm_k64f build_c4b42f4 net.coap.simple tests/net/lib/coap'''
        script {
          test_net_net_coap_simple_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/coap/build_c4b42f4 net.coap.simple '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/coap/build_c4b42f4'
        script {
          test_net_net_coap_simple_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_coap_simple_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.coap.simple', 'result': test_net_net_coap_simple_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.coap.simple', 'result': test_net_net_coap_simple_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_packet_result
   def test_net_net_packet() {
      echo 'Test net.packet'
      echo 'net.packet'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_packet_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/net_pkt frdm_k64f build_a571c26 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.packet tests/net/net_pkt -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_net_packet_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/net_pkt/build_a571c26 net.packet '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/net_pkt/build_a571c26'
        script {
          test_net_net_packet_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_packet_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.packet', 'result': test_net_net_packet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.packet', 'result': test_net_net_packet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_packet_preempt_result
   def test_net_net_packet_preempt() {
      echo 'Test net.packet.preempt'
      echo 'net.packet.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_packet_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/net_pkt frdm_k64f build_cf4ac2d -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.packet.preempt tests/net/net_pkt -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_net_packet_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/net_pkt/build_cf4ac2d net.packet.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/net_pkt/build_cf4ac2d'
        script {
          test_net_net_packet_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_packet_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.packet.preempt', 'result': test_net_net_packet_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.packet.preempt', 'result': test_net_net_packet_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_packet_large_buffer_result
   def test_net_net_packet_large_buffer() {
      echo 'Test net.packet.large_buffer'
      echo 'net.packet.large_buffer'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_packet_large_buffer_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/net_pkt frdm_k64f build_4766b8c -DCONFIG_NET_BUF_FIXED_DATA_SIZE=y -DCONFIG_NET_BUF_DATA_SIZE=512 net.packet.large_buffer tests/net/net_pkt -DCONFIG_NET_BUF_FIXED_DATA_SIZE=y -DCONFIG_NET_BUF_DATA_SIZE=512'''
        script {
          test_net_net_packet_large_buffer_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/net_pkt/build_4766b8c net.packet.large_buffer '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/net_pkt/build_4766b8c'
        script {
          test_net_net_packet_large_buffer_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_packet_large_buffer_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.packet.large_buffer', 'result': test_net_net_packet_large_buffer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.packet.large_buffer', 'result': test_net_net_packet_large_buffer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_udp_result
   def test_net_net_udp() {
      echo 'Test net.udp'
      echo 'net.udp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_udp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/udp frdm_k64f build_b66dc95 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.udp tests/net/udp -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_net_udp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/udp/build_b66dc95 net.udp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/udp/build_b66dc95'
        script {
          test_net_net_udp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_udp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.udp', 'result': test_net_net_udp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.udp', 'result': test_net_net_udp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_udp_preempt_result
   def test_net_net_udp_preempt() {
      echo 'Test net.udp.preempt'
      echo 'net.udp.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_udp_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/udp frdm_k64f build_eb2c044 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.udp.preempt tests/net/udp -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_net_udp_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/udp/build_eb2c044 net.udp.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/udp/build_eb2c044'
        script {
          test_net_net_udp_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_udp_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.udp.preempt', 'result': test_net_net_udp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.udp.preempt', 'result': test_net_net_udp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_6loWPAN_net_6lo_result
   def test_net_6loWPAN_net_6lo() {
      echo 'Test net.6lo'
      echo 'net.6lo'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_6loWPAN_net_6lo_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/6lo frdm_k64f build_625987d -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.6lo tests/net/6lo -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_6loWPAN_net_6lo_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/6lo/build_625987d net.6lo '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/6lo/build_625987d'
        script {
          test_net_6loWPAN_net_6lo_result = "SUCCESS"
        }
      }
      script {
        echo test_net_6loWPAN_net_6lo_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.6lo', 'result': test_net_6loWPAN_net_6lo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.6lo', 'result': test_net_6loWPAN_net_6lo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_6loWPAN_net_6lo_preempt_result
   def test_net_6loWPAN_net_6lo_preempt() {
      echo 'Test net.6lo.preempt'
      echo 'net.6lo.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_6loWPAN_net_6lo_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/6lo frdm_k64f build_607b234 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.6lo.preempt tests/net/6lo -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_6loWPAN_net_6lo_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/6lo/build_607b234 net.6lo.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/6lo/build_607b234'
        script {
          test_net_6loWPAN_net_6lo_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_6loWPAN_net_6lo_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.6lo.preempt', 'result': test_net_6loWPAN_net_6lo_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.6lo.preempt', 'result': test_net_6loWPAN_net_6lo_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_arp_net_arp_result
   def test_net_arp_net_arp() {
      echo 'Test net.arp'
      echo 'net.arp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_arp_net_arp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/arp frdm_k64f build_618d442 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.arp tests/net/arp -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_arp_net_arp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/arp/build_618d442 net.arp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/arp/build_618d442'
        script {
          test_net_arp_net_arp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_arp_net_arp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.arp', 'result': test_net_arp_net_arp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.arp', 'result': test_net_arp_net_arp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_arp_net_arp_preempt_result
   def test_net_arp_net_arp_preempt() {
      echo 'Test net.arp.preempt'
      echo 'net.arp.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_arp_net_arp_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/arp frdm_k64f build_00a83e1 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.arp.preempt tests/net/arp -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_arp_net_arp_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/arp/build_00a83e1 net.arp.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/arp/build_00a83e1'
        script {
          test_net_arp_net_arp_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_arp_net_arp_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.arp.preempt', 'result': test_net_arp_net_arp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.arp.preempt', 'result': test_net_arp_net_arp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_bridge_net_eth_bridge_result
   def test_net_bridge_net_eth_bridge() {
      echo 'Test net.eth_bridge'
      echo 'net.eth_bridge'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_bridge_net_eth_bridge_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/bridge frdm_k64f build_77d57ab -DCONFIG_NET_IPV4=n -DCONFIG_NET_IPV6=n net.eth_bridge tests/net/bridge -DCONFIG_NET_IPV4=n -DCONFIG_NET_IPV6=n'''
        script {
          test_net_bridge_net_eth_bridge_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/bridge/build_77d57ab net.eth_bridge '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/bridge/build_77d57ab'
        script {
          test_net_bridge_net_eth_bridge_result = "SUCCESS"
        }
      }
      script {
        echo test_net_bridge_net_eth_bridge_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.eth_bridge', 'result': test_net_bridge_net_eth_bridge_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.eth_bridge', 'result': test_net_bridge_net_eth_bridge_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_bridge_net_eth_bridge_ip_result
   def test_net_bridge_net_eth_bridge_ip() {
      echo 'Test net.eth_bridge.ip'
      echo 'net.eth_bridge.ip'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_bridge_net_eth_bridge_ip_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/bridge frdm_k64f build_a958206 -DCONFIG_NET_IPV4=y -DCONFIG_NET_IPV6=y net.eth_bridge.ip tests/net/bridge -DCONFIG_NET_IPV4=y -DCONFIG_NET_IPV6=y'''
        script {
          test_net_bridge_net_eth_bridge_ip_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/bridge/build_a958206 net.eth_bridge.ip '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/bridge/build_a958206'
        script {
          test_net_bridge_net_eth_bridge_ip_result = "SUCCESS"
        }
      }
      script {
        echo test_net_bridge_net_eth_bridge_ip_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.eth_bridge.ip', 'result': test_net_bridge_net_eth_bridge_ip_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.eth_bridge.ip', 'result': test_net_bridge_net_eth_bridge_ip_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_buf_net_buf_result
   def test_net_buf_net_buf() {
      echo 'Test net.buf'
      echo 'net.buf'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_buf_net_buf_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/buf frdm_k64f build_f7cc967 net.buf tests/net/buf'''
        script {
          test_net_buf_net_buf_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/buf/build_f7cc967 net.buf '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/buf/build_f7cc967'
        script {
          test_net_buf_net_buf_result = "SUCCESS"
        }
      }
      script {
        echo test_net_buf_net_buf_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.buf', 'result': test_net_buf_net_buf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.buf', 'result': test_net_buf_net_buf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_capture_sample_net_capture_result
   def test_net_capture_sample_net_capture() {
      echo 'Test sample.net.capture'
      echo 'sample.net.capture'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_capture_sample_net_capture_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/capture frdm_k64f build_2353d3e sample.net.capture samples/net/capture'''
        script {
          test_net_capture_sample_net_capture_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/capture/build_2353d3e sample.net.capture '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/capture/build_2353d3e'
        script {
          test_net_capture_sample_net_capture_result = "SUCCESS"
        }
      }
      script {
        echo test_net_capture_sample_net_capture_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.capture', 'result': test_net_capture_sample_net_capture_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.capture', 'result': test_net_capture_sample_net_capture_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_checksum_offload_net_offload_result
   def test_net_checksum_offload_net_offload() {
      echo 'Test net.offload'
      echo 'net.offload'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_checksum_offload_net_offload_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/checksum_offload frdm_k64f build_2fa2190 net.offload tests/net/checksum_offload'''
        script {
          test_net_checksum_offload_net_offload_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/checksum_offload/build_2fa2190 net.offload '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/checksum_offload/build_2fa2190'
        script {
          test_net_checksum_offload_net_offload_result = "SUCCESS"
        }
      }
      script {
        echo test_net_checksum_offload_net_offload_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.offload', 'result': test_net_checksum_offload_net_offload_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.offload', 'result': test_net_checksum_offload_net_offload_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_result
   def test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post() {
      echo 'Test sample.net.cloud.tagoio_http_post'
      echo 'sample.net.cloud.tagoio_http_post'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/cloud/tagoio_http_post frdm_k64f build_98535bc sample.net.cloud.tagoio_http_post samples/net/cloud/tagoio_http_post'''
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/cloud/tagoio_http_post/build_98535bc sample.net.cloud.tagoio_http_post '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/cloud/tagoio_http_post/build_98535bc'
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_result = "SUCCESS"
        }
      }
      script {
        echo test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.tagoio_http_post', 'result': test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.tagoio_http_post', 'result': test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp_result
   def test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp() {
      echo 'Test sample.net.cloud.tagoio_http_post.wifi.esp'
      echo 'sample.net.cloud.tagoio_http_post.wifi.esp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/cloud/tagoio_http_post frdm_k64f build_7532bd6  -DSHIELD=esp_8266_arduino -DOVERLAY_CONFIG=overlay-wifi.conf sample.net.cloud.tagoio_http_post.wifi.esp samples/net/cloud/tagoio_http_post  -DSHIELD=esp_8266_arduino -DOVERLAY_CONFIG=overlay-wifi.conf'''
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/cloud/tagoio_http_post/build_7532bd6 sample.net.cloud.tagoio_http_post.wifi.esp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/cloud/tagoio_http_post/build_7532bd6'
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.tagoio_http_post.wifi.esp', 'result': test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.tagoio_http_post.wifi.esp', 'result': test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_wifi_esp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino_result
   def test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino() {
      echo 'Test sample.net.cloud.tagoio_http_post.modem.arduino'
      echo 'sample.net.cloud.tagoio_http_post.modem.arduino'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/cloud/tagoio_http_post frdm_k64f build_2a52d98  -DOVERLAY_CONFIG=overlay-modem.conf -DDTC_OVERLAY_FILE=arduino.overlay sample.net.cloud.tagoio_http_post.modem.arduino samples/net/cloud/tagoio_http_post  -DOVERLAY_CONFIG=overlay-modem.conf -DDTC_OVERLAY_FILE=arduino.overlay'''
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/cloud/tagoio_http_post/build_2a52d98 sample.net.cloud.tagoio_http_post.modem.arduino '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/cloud/tagoio_http_post/build_2a52d98'
        script {
          test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino_result = "SUCCESS"
        }
      }
      script {
        echo test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.tagoio_http_post.modem.arduino', 'result': test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.tagoio_http_post.modem.arduino', 'result': test_net_cloud_dns_http_ppp_modem_gsm_wifi_sample_net_cloud_tagoio_http_post_modem_arduino_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_dhcpv4_net_dhcp_result
   def test_net_dhcpv4_net_dhcp() {
      echo 'Test net.dhcp'
      echo 'net.dhcp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_dhcpv4_net_dhcp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/dhcpv4 frdm_k64f build_5506d39 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.dhcp tests/net/dhcpv4 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_dhcpv4_net_dhcp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/dhcpv4/build_5506d39 net.dhcp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/dhcpv4/build_5506d39'
        script {
          test_net_dhcpv4_net_dhcp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_dhcpv4_net_dhcp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dhcp', 'result': test_net_dhcpv4_net_dhcp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dhcp', 'result': test_net_dhcpv4_net_dhcp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_dhcpv4_net_dhcp_preempt_result
   def test_net_dhcpv4_net_dhcp_preempt() {
      echo 'Test net.dhcp.preempt'
      echo 'net.dhcp.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_dhcpv4_net_dhcp_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/dhcpv4 frdm_k64f build_976f4ca -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.dhcp.preempt tests/net/dhcpv4 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_dhcpv4_net_dhcp_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/dhcpv4/build_976f4ca net.dhcp.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/dhcpv4/build_976f4ca'
        script {
          test_net_dhcpv4_net_dhcp_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_dhcpv4_net_dhcp_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.dhcp.preempt', 'result': test_net_dhcpv4_net_dhcp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.dhcp.preempt', 'result': test_net_dhcpv4_net_dhcp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_ethernet_mgmt_net_ethernet_mgmt_result
   def test_net_ethernet_mgmt_net_ethernet_mgmt() {
      echo 'Test net.ethernet_mgmt'
      echo 'net.ethernet_mgmt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_ethernet_mgmt_net_ethernet_mgmt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/ethernet_mgmt frdm_k64f build_b309cbf net.ethernet_mgmt tests/net/ethernet_mgmt'''
        script {
          test_net_ethernet_mgmt_net_ethernet_mgmt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/ethernet_mgmt/build_b309cbf net.ethernet_mgmt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/ethernet_mgmt/build_b309cbf'
        script {
          test_net_ethernet_mgmt_net_ethernet_mgmt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_ethernet_mgmt_net_ethernet_mgmt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.ethernet_mgmt', 'result': test_net_ethernet_mgmt_net_ethernet_mgmt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.ethernet_mgmt', 'result': test_net_ethernet_mgmt_net_ethernet_mgmt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_gptp_sample_net_gptp_result
   def test_net_gptp_sample_net_gptp() {
      echo 'Test sample.net.gptp'
      echo 'sample.net.gptp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_gptp_sample_net_gptp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/gptp frdm_k64f build_47d9122 sample.net.gptp samples/net/gptp'''
        script {
          test_net_gptp_sample_net_gptp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/gptp/build_47d9122 sample.net.gptp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/gptp/build_47d9122'
        script {
          test_net_gptp_sample_net_gptp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_gptp_sample_net_gptp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.gptp', 'result': test_net_gptp_sample_net_gptp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.gptp', 'result': test_net_gptp_sample_net_gptp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_hostname_net_hostname_result
   def test_net_hostname_net_hostname() {
      echo 'Test net.hostname'
      echo 'net.hostname'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_hostname_net_hostname_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/hostname frdm_k64f build_dc99e11 -DCONFIG_NET_HOSTNAME_UNIQUE=n net.hostname tests/net/hostname -DCONFIG_NET_HOSTNAME_UNIQUE=n'''
        script {
          test_net_hostname_net_hostname_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/hostname/build_dc99e11 net.hostname '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/hostname/build_dc99e11'
        script {
          test_net_hostname_net_hostname_result = "SUCCESS"
        }
      }
      script {
        echo test_net_hostname_net_hostname_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.hostname', 'result': test_net_hostname_net_hostname_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.hostname', 'result': test_net_hostname_net_hostname_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_hostname_net_hostname_unique_result
   def test_net_hostname_net_hostname_unique() {
      echo 'Test net.hostname.unique'
      echo 'net.hostname.unique'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_hostname_net_hostname_unique_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/hostname frdm_k64f build_22ed594 -DCONFIG_NET_HOSTNAME_UNIQUE=y net.hostname.unique tests/net/hostname -DCONFIG_NET_HOSTNAME_UNIQUE=y'''
        script {
          test_net_hostname_net_hostname_unique_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/hostname/build_22ed594 net.hostname.unique '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/hostname/build_22ed594'
        script {
          test_net_hostname_net_hostname_unique_result = "SUCCESS"
        }
      }
      script {
        echo test_net_hostname_net_hostname_unique_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.hostname.unique', 'result': test_net_hostname_net_hostname_unique_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.hostname.unique', 'result': test_net_hostname_net_hostname_unique_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_http_sample_net_dhcpv4_client_result
   def test_net_http_sample_net_dhcpv4_client() {
      echo 'Test sample.net.dhcpv4_client'
      echo 'sample.net.dhcpv4_client'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_http_sample_net_dhcpv4_client_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/dhcpv4_client frdm_k64f build_7d6e15e sample.net.dhcpv4_client samples/net/dhcpv4_client'''
        script {
          test_net_http_sample_net_dhcpv4_client_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/dhcpv4_client/build_7d6e15e sample.net.dhcpv4_client '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/dhcpv4_client/build_7d6e15e'
        script {
          test_net_http_sample_net_dhcpv4_client_result = "SUCCESS"
        }
      }
      script {
        echo test_net_http_sample_net_dhcpv4_client_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.dhcpv4_client', 'result': test_net_http_sample_net_dhcpv4_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.dhcpv4_client', 'result': test_net_http_sample_net_dhcpv4_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_http_http_client_sample_net_sockets_http_client_result
   def test_net_http_http_client_sample_net_sockets_http_client() {
      echo 'Test sample.net.sockets.http_client'
      echo 'sample.net.sockets.http_client'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_http_http_client_sample_net_sockets_http_client_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/http_client frdm_k64f build_e65993f sample.net.sockets.http_client samples/net/sockets/http_client'''
        script {
          test_net_http_http_client_sample_net_sockets_http_client_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/http_client/build_e65993f sample.net.sockets.http_client '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/http_client/build_e65993f'
        script {
          test_net_http_http_client_sample_net_sockets_http_client_result = "SUCCESS"
        }
      }
      script {
        echo test_net_http_http_client_sample_net_sockets_http_client_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.http_client', 'result': test_net_http_http_client_sample_net_sockets_http_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.http_client', 'result': test_net_http_http_client_sample_net_sockets_http_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client_result
   def test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client() {
      echo 'Test sample.net.sockets.websocket_client'
      echo 'sample.net.sockets.websocket_client'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/websocket_client frdm_k64f build_3b345e5 sample.net.sockets.websocket_client samples/net/sockets/websocket_client'''
        script {
          test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/websocket_client/build_3b345e5 sample.net.sockets.websocket_client '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/websocket_client/build_3b345e5'
        script {
          test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client_result = "SUCCESS"
        }
      }
      script {
        echo test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.websocket_client', 'result': test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.websocket_client', 'result': test_net_http_http_client_websocket_client_websocket_sample_net_sockets_websocket_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_icmpv4_net_icmpv6_result
   def test_net_icmpv4_net_icmpv6() {
      echo 'Test net.icmpv6'
      echo 'net.icmpv6'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_icmpv4_net_icmpv6_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/icmpv4 frdm_k64f build_5d4e3dd net.icmpv6 tests/net/icmpv4'''
        script {
          test_net_icmpv4_net_icmpv6_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/icmpv4/build_5d4e3dd net.icmpv6 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/icmpv4/build_5d4e3dd'
        script {
          test_net_icmpv4_net_icmpv6_result = "SUCCESS"
        }
      }
      script {
        echo test_net_icmpv4_net_icmpv6_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.icmpv6', 'result': test_net_icmpv4_net_icmpv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.icmpv6', 'result': test_net_icmpv4_net_icmpv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_icmpv6_net_icmpv6_icmpv6_result
   def test_net_icmpv6_net_icmpv6_icmpv6() {
      echo 'Test net.icmpv6.icmpv6'
      echo 'net.icmpv6.icmpv6'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_icmpv6_net_icmpv6_icmpv6_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/icmpv6 frdm_k64f build_f2d7c27 net.icmpv6.icmpv6 tests/net/icmpv6'''
        script {
          test_net_icmpv6_net_icmpv6_icmpv6_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/icmpv6/build_f2d7c27 net.icmpv6.icmpv6 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/icmpv6/build_f2d7c27'
        script {
          test_net_icmpv6_net_icmpv6_icmpv6_result = "SUCCESS"
        }
      }
      script {
        echo test_net_icmpv6_net_icmpv6_icmpv6_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.icmpv6.icmpv6', 'result': test_net_icmpv6_net_icmpv6_icmpv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.icmpv6.icmpv6', 'result': test_net_icmpv6_net_icmpv6_icmpv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a_result
   def test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a() {
      echo 'Test sample.net.wpanusb_frdm_cr20a'
      echo 'sample.net.wpanusb_frdm_cr20a'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/wpanusb frdm_k64f build_a4ca0fb  -DSHIELD=frdm_cr20a sample.net.wpanusb_frdm_cr20a samples/net/wpanusb  -DSHIELD=frdm_cr20a'''
        script {
          test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/wpanusb/build_a4ca0fb sample.net.wpanusb_frdm_cr20a '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/wpanusb/build_a4ca0fb'
        script {
          test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a_result = "SUCCESS"
        }
      }
      script {
        echo test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.wpanusb_frdm_cr20a', 'result': test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.wpanusb_frdm_cr20a', 'result': test_net_ieee802154_usb_sample_net_wpanusb_frdm_cr20a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_iface_userspace_net_iface_result
   def test_net_iface_userspace_net_iface() {
      echo 'Test net.iface'
      echo 'net.iface'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_iface_userspace_net_iface_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/iface frdm_k64f build_071b1af net.iface tests/net/iface'''
        script {
          test_net_iface_userspace_net_iface_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/iface/build_071b1af net.iface '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/iface/build_071b1af'
        script {
          test_net_iface_userspace_net_iface_result = "SUCCESS"
        }
      }
      script {
        echo test_net_iface_userspace_net_iface_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.iface', 'result': test_net_iface_userspace_net_iface_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.iface', 'result': test_net_iface_userspace_net_iface_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_igmp_net_igmp_result
   def test_net_igmp_net_igmp() {
      echo 'Test net.igmp'
      echo 'net.igmp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_igmp_net_igmp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/igmp frdm_k64f build_7aadd00 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.igmp tests/net/igmp -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_igmp_net_igmp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/igmp/build_7aadd00 net.igmp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/igmp/build_7aadd00'
        script {
          test_net_igmp_net_igmp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_igmp_net_igmp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.igmp', 'result': test_net_igmp_net_igmp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.igmp', 'result': test_net_igmp_net_igmp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_igmp_net_igmp_preempt_result
   def test_net_igmp_net_igmp_preempt() {
      echo 'Test net.igmp.preempt'
      echo 'net.igmp.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_igmp_net_igmp_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/igmp frdm_k64f build_2b047e4 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.igmp.preempt tests/net/igmp -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_igmp_net_igmp_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/igmp/build_2b047e4 net.igmp.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/igmp/build_2b047e4'
        script {
          test_net_igmp_net_igmp_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_igmp_net_igmp_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.igmp.preempt', 'result': test_net_igmp_net_igmp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.igmp.preempt', 'result': test_net_igmp_net_igmp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_ip_addr_net_ip_addr_result
   def test_net_ip_addr_net_ip_addr() {
      echo 'Test net.ip-addr'
      echo 'net.ip-addr'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_ip_addr_net_ip_addr_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/ip-addr frdm_k64f build_e3e3b57 net.ip-addr tests/net/ip-addr'''
        script {
          test_net_ip_addr_net_ip_addr_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/ip-addr/build_e3e3b57 net.ip-addr '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/ip-addr/build_e3e3b57'
        script {
          test_net_ip_addr_net_ip_addr_result = "SUCCESS"
        }
      }
      script {
        echo test_net_ip_addr_net_ip_addr_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.ip-addr', 'result': test_net_ip_addr_net_ip_addr_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.ip-addr', 'result': test_net_ip_addr_net_ip_addr_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_ipv6_net_ipv6_result
   def test_net_ipv6_net_ipv6() {
      echo 'Test net.ipv6'
      echo 'net.ipv6'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_ipv6_net_ipv6_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/ipv6 frdm_k64f build_3cfc289 net.ipv6 tests/net/ipv6'''
        script {
          test_net_ipv6_net_ipv6_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/ipv6/build_3cfc289 net.ipv6 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/ipv6/build_3cfc289'
        script {
          test_net_ipv6_net_ipv6_result = "SUCCESS"
        }
      }
      script {
        echo test_net_ipv6_net_ipv6_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.ipv6', 'result': test_net_ipv6_net_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.ipv6', 'result': test_net_ipv6_net_ipv6_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_ipv6_fragment_net_ipv6_fragment_result
   def test_net_ipv6_fragment_net_ipv6_fragment() {
      echo 'Test net.ipv6.fragment'
      echo 'net.ipv6.fragment'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_ipv6_fragment_net_ipv6_fragment_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/ipv6_fragment frdm_k64f build_c141572 net.ipv6.fragment tests/net/ipv6_fragment'''
        script {
          test_net_ipv6_fragment_net_ipv6_fragment_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/ipv6_fragment/build_c141572 net.ipv6.fragment '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/ipv6_fragment/build_c141572'
        script {
          test_net_ipv6_fragment_net_ipv6_fragment_result = "SUCCESS"
        }
      }
      script {
        echo test_net_ipv6_fragment_net_ipv6_fragment_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.ipv6.fragment', 'result': test_net_ipv6_fragment_net_ipv6_fragment_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.ipv6.fragment', 'result': test_net_ipv6_fragment_net_ipv6_fragment_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_lwm2m_sample_net_lwm2m_client_result
   def test_net_lwm2m_sample_net_lwm2m_client() {
      echo 'Test sample.net.lwm2m_client'
      echo 'sample.net.lwm2m_client'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_lwm2m_sample_net_lwm2m_client_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/lwm2m_client frdm_k64f build_fbc74c7 sample.net.lwm2m_client samples/net/lwm2m_client'''
        script {
          test_net_lwm2m_sample_net_lwm2m_client_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/lwm2m_client/build_fbc74c7 sample.net.lwm2m_client '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/lwm2m_client/build_fbc74c7'
        script {
          test_net_lwm2m_sample_net_lwm2m_client_result = "SUCCESS"
        }
      }
      script {
        echo test_net_lwm2m_sample_net_lwm2m_client_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.lwm2m_client', 'result': test_net_lwm2m_sample_net_lwm2m_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.lwm2m_client', 'result': test_net_lwm2m_sample_net_lwm2m_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_lwm2m_sample_net_lwm2m_client_dtls_result
   def test_net_lwm2m_sample_net_lwm2m_client_dtls() {
      echo 'Test sample.net.lwm2m_client.dtls'
      echo 'sample.net.lwm2m_client.dtls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_lwm2m_sample_net_lwm2m_client_dtls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/lwm2m_client frdm_k64f build_58fd391  -DOVERLAY_CONFIG=overlay-dtls.conf sample.net.lwm2m_client.dtls samples/net/lwm2m_client  -DOVERLAY_CONFIG=overlay-dtls.conf'''
        script {
          test_net_lwm2m_sample_net_lwm2m_client_dtls_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/lwm2m_client/build_58fd391 sample.net.lwm2m_client.dtls '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/lwm2m_client/build_58fd391'
        script {
          test_net_lwm2m_sample_net_lwm2m_client_dtls_result = "SUCCESS"
        }
      }
      script {
        echo test_net_lwm2m_sample_net_lwm2m_client_dtls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.lwm2m_client.dtls', 'result': test_net_lwm2m_sample_net_lwm2m_client_dtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.lwm2m_client.dtls', 'result': test_net_lwm2m_sample_net_lwm2m_client_dtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a_result
   def test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a() {
      echo 'Test sample.net.lwm2m_client.wnc_m14a2a'
      echo 'sample.net.lwm2m_client.wnc_m14a2a'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/lwm2m_client frdm_k64f build_e78067f  -DSHIELD=wnc_m14a2a sample.net.lwm2m_client.wnc_m14a2a samples/net/lwm2m_client  -DSHIELD=wnc_m14a2a'''
        script {
          test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/lwm2m_client/build_e78067f sample.net.lwm2m_client.wnc_m14a2a '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/lwm2m_client/build_e78067f'
        script {
          test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a_result = "SUCCESS"
        }
      }
      script {
        echo test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.lwm2m_client.wnc_m14a2a', 'result': test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.lwm2m_client.wnc_m14a2a', 'result': test_net_lwm2m_sample_net_lwm2m_client_wnc_m14a2a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mgmt_net_management_result
   def test_net_mgmt_net_management() {
      echo 'Test net.management'
      echo 'net.management'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mgmt_net_management_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/mgmt frdm_k64f build_23a5cc3 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.management tests/net/mgmt -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_mgmt_net_management_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/mgmt/build_23a5cc3 net.management '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/mgmt/build_23a5cc3'
        script {
          test_net_mgmt_net_management_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mgmt_net_management_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.management', 'result': test_net_mgmt_net_management_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.management', 'result': test_net_mgmt_net_management_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mgmt_net_management_preempt_result
   def test_net_mgmt_net_management_preempt() {
      echo 'Test net.management.preempt'
      echo 'net.management.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mgmt_net_management_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/mgmt frdm_k64f build_58d3f84 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.management.preempt tests/net/mgmt -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_mgmt_net_management_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/mgmt/build_58d3f84 net.management.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/mgmt/build_58d3f84'
        script {
          test_net_mgmt_net_management_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mgmt_net_management_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.management.preempt', 'result': test_net_mgmt_net_management_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.management.preempt', 'result': test_net_mgmt_net_management_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mld_net_mld_result
   def test_net_mld_net_mld() {
      echo 'Test net.mld'
      echo 'net.mld'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mld_net_mld_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/mld frdm_k64f build_aea99f6 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.mld tests/net/mld -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_mld_net_mld_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/mld/build_aea99f6 net.mld '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/mld/build_aea99f6'
        script {
          test_net_mld_net_mld_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mld_net_mld_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mld', 'result': test_net_mld_net_mld_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mld', 'result': test_net_mld_net_mld_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mld_net_mld_preempt_result
   def test_net_mld_net_mld_preempt() {
      echo 'Test net.mld.preempt'
      echo 'net.mld.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mld_net_mld_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/mld frdm_k64f build_8cc02cf -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.mld.preempt tests/net/mld -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_mld_net_mld_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/mld/build_8cc02cf net.mld.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/mld/build_8cc02cf'
        script {
          test_net_mld_net_mld_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mld_net_mld_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.mld.preempt', 'result': test_net_mld_net_mld_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.mld.preempt', 'result': test_net_mld_net_mld_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_mqtt_cloud_sample_net_cloud_mqtt_azure_result
   def test_net_mqtt_cloud_sample_net_cloud_mqtt_azure() {
      echo 'Test sample.net.cloud.mqtt_azure'
      echo 'sample.net.cloud.mqtt_azure'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_mqtt_cloud_sample_net_cloud_mqtt_azure_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/cloud/mqtt_azure frdm_k64f build_ffd7262 sample.net.cloud.mqtt_azure samples/net/cloud/mqtt_azure'''
        script {
          test_net_mqtt_cloud_sample_net_cloud_mqtt_azure_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/cloud/mqtt_azure/build_ffd7262 sample.net.cloud.mqtt_azure '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/cloud/mqtt_azure/build_ffd7262'
        script {
          test_net_mqtt_cloud_sample_net_cloud_mqtt_azure_result = "SUCCESS"
        }
      }
      script {
        echo test_net_mqtt_cloud_sample_net_cloud_mqtt_azure_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.mqtt_azure', 'result': test_net_mqtt_cloud_sample_net_cloud_mqtt_azure_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.cloud.mqtt_azure', 'result': test_net_mqtt_cloud_sample_net_cloud_mqtt_azure_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_neighbour_net_neighbour_result
   def test_net_neighbour_net_neighbour() {
      echo 'Test net.neighbour'
      echo 'net.neighbour'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_neighbour_net_neighbour_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/neighbor frdm_k64f build_b5365c3 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.neighbour tests/net/neighbor -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_neighbour_net_neighbour_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/neighbor/build_b5365c3 net.neighbour '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/neighbor/build_b5365c3'
        script {
          test_net_neighbour_net_neighbour_result = "SUCCESS"
        }
      }
      script {
        echo test_net_neighbour_net_neighbour_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.neighbour', 'result': test_net_neighbour_net_neighbour_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.neighbour', 'result': test_net_neighbour_net_neighbour_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_neighbour_net_neighbor_preempt_result
   def test_net_neighbour_net_neighbor_preempt() {
      echo 'Test net.neighbor.preempt'
      echo 'net.neighbor.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_neighbour_net_neighbor_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/neighbor frdm_k64f build_080db46 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.neighbor.preempt tests/net/neighbor -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_neighbour_net_neighbor_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/neighbor/build_080db46 net.neighbor.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/neighbor/build_080db46'
        script {
          test_net_neighbour_net_neighbor_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_neighbour_net_neighbor_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.neighbor.preempt', 'result': test_net_neighbour_net_neighbor_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.neighbor.preempt', 'result': test_net_neighbour_net_neighbor_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_shell_net_shell_result
   def test_net_net_shell_net_shell() {
      echo 'Test net.shell'
      echo 'net.shell'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_shell_net_shell_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/shell frdm_k64f build_e4a9f59 net.shell tests/net/shell'''
        script {
          test_net_net_shell_net_shell_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/shell/build_e4a9f59 net.shell '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/shell/build_e4a9f59'
        script {
          test_net_net_shell_net_shell_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_shell_net_shell_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.shell', 'result': test_net_net_shell_net_shell_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.shell', 'result': test_net_net_shell_net_shell_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_net_context_net_context_result
   def test_net_net_context_net_context() {
      echo 'Test net.context'
      echo 'net.context'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_net_context_net_context_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/context frdm_k64f build_16547fc -DCONFIG_ASSERT_LEVEL=0 net.context tests/net/context -DCONFIG_ASSERT_LEVEL=0'''
        script {
          test_net_net_context_net_context_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/context/build_16547fc net.context '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/context/build_16547fc'
        script {
          test_net_net_context_net_context_result = "SUCCESS"
        }
      }
      script {
        echo test_net_net_context_net_context_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.context', 'result': test_net_net_context_net_context_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.context', 'result': test_net_net_context_net_context_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_promisc_sample_net_promiscuous_mode_result
   def test_net_promisc_sample_net_promiscuous_mode() {
      echo 'Test sample.net.promiscuous_mode'
      echo 'sample.net.promiscuous_mode'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_promisc_sample_net_promiscuous_mode_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/promiscuous_mode frdm_k64f build_7a0b570 sample.net.promiscuous_mode samples/net/promiscuous_mode'''
        script {
          test_net_promisc_sample_net_promiscuous_mode_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/promiscuous_mode/build_7a0b570 sample.net.promiscuous_mode '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/promiscuous_mode/build_7a0b570'
        script {
          test_net_promisc_sample_net_promiscuous_mode_result = "SUCCESS"
        }
      }
      script {
        echo test_net_promisc_sample_net_promiscuous_mode_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.promiscuous_mode', 'result': test_net_promisc_sample_net_promiscuous_mode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.promiscuous_mode', 'result': test_net_promisc_sample_net_promiscuous_mode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_promisc_net_promisc_result
   def test_net_promisc_net_promisc() {
      echo 'Test net.promisc'
      echo 'net.promisc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_promisc_net_promisc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/promiscuous frdm_k64f build_c815934 net.promisc tests/net/promiscuous'''
        script {
          test_net_promisc_net_promisc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/promiscuous/build_c815934 net.promisc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/promiscuous/build_c815934'
        script {
          test_net_promisc_net_promisc_result = "SUCCESS"
        }
      }
      script {
        echo test_net_promisc_net_promisc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.promisc', 'result': test_net_promisc_net_promisc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.promisc', 'result': test_net_promisc_net_promisc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_ptp_gptp_userspace_net_ptp_clock_result
   def test_net_ptp_gptp_userspace_net_ptp_clock() {
      echo 'Test net.ptp.clock'
      echo 'net.ptp.clock'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_ptp_gptp_userspace_net_ptp_clock_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/ptp/clock frdm_k64f build_24710e7 net.ptp.clock tests/net/ptp/clock'''
        script {
          test_net_ptp_gptp_userspace_net_ptp_clock_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/ptp/clock/build_24710e7 net.ptp.clock '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/ptp/clock/build_24710e7'
        script {
          test_net_ptp_gptp_userspace_net_ptp_clock_result = "SUCCESS"
        }
      }
      script {
        echo test_net_ptp_gptp_userspace_net_ptp_clock_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.ptp.clock', 'result': test_net_ptp_gptp_userspace_net_ptp_clock_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.ptp.clock', 'result': test_net_ptp_gptp_userspace_net_ptp_clock_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_route_net_route_result
   def test_net_route_net_route() {
      echo 'Test net.route'
      echo 'net.route'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_route_net_route_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/route frdm_k64f build_9dc3259 net.route tests/net/route'''
        script {
          test_net_route_net_route_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/route/build_9dc3259 net.route '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/route/build_9dc3259'
        script {
          test_net_route_net_route_result = "SUCCESS"
        }
      }
      script {
        echo test_net_route_net_route_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.route', 'result': test_net_route_net_route_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.route', 'result': test_net_route_net_route_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_route_mcast_net_route_mcast_result
   def test_net_route_mcast_net_route_mcast() {
      echo 'Test net.route_mcast'
      echo 'net.route_mcast'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_route_mcast_net_route_mcast_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/route_mcast frdm_k64f build_fd9ca82 net.route_mcast tests/net/route_mcast'''
        script {
          test_net_route_mcast_net_route_mcast_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/route_mcast/build_fd9ca82 net.route_mcast '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/route_mcast/build_fd9ca82'
        script {
          test_net_route_mcast_net_route_mcast_result = "SUCCESS"
        }
      }
      script {
        echo test_net_route_mcast_net_route_mcast_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.route_mcast', 'result': test_net_route_mcast_net_route_mcast_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.route_mcast', 'result': test_net_route_mcast_net_route_mcast_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_big_http_download_result
   def test_net_socket_sample_net_sockets_big_http_download() {
      echo 'Test sample.net.sockets.big_http_download'
      echo 'sample.net.sockets.big_http_download'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_big_http_download_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/big_http_download frdm_k64f build_064eaf5 -DCONFIG_NET_SOCKETS_POSIX_NAMES=y sample.net.sockets.big_http_download samples/net/sockets/big_http_download -DCONFIG_NET_SOCKETS_POSIX_NAMES=y'''
        script {
          test_net_socket_sample_net_sockets_big_http_download_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/big_http_download/build_064eaf5 sample.net.sockets.big_http_download '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/big_http_download/build_064eaf5'
        script {
          test_net_socket_sample_net_sockets_big_http_download_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_big_http_download_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.big_http_download', 'result': test_net_socket_sample_net_sockets_big_http_download_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.big_http_download', 'result': test_net_socket_sample_net_sockets_big_http_download_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_big_http_download_posix_result
   def test_net_socket_sample_net_sockets_big_http_download_posix() {
      echo 'Test sample.net.sockets.big_http_download.posix'
      echo 'sample.net.sockets.big_http_download.posix'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_big_http_download_posix_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/big_http_download frdm_k64f build_8df60b3 -DCONFIG_NET_SOCKETS_POSIX_NAMES=n -DCONFIG_POSIX_API=y sample.net.sockets.big_http_download.posix samples/net/sockets/big_http_download -DCONFIG_NET_SOCKETS_POSIX_NAMES=n -DCONFIG_POSIX_API=y'''
        script {
          test_net_socket_sample_net_sockets_big_http_download_posix_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/big_http_download/build_8df60b3 sample.net.sockets.big_http_download.posix '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/big_http_download/build_8df60b3'
        script {
          test_net_socket_sample_net_sockets_big_http_download_posix_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_big_http_download_posix_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.big_http_download.posix', 'result': test_net_socket_sample_net_sockets_big_http_download_posix_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.big_http_download.posix', 'result': test_net_socket_sample_net_sockets_big_http_download_posix_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_big_http_download_ci_result
   def test_net_socket_sample_net_sockets_big_http_download_ci() {
      echo 'Test sample.net.sockets.big_http_download.ci'
      echo 'sample.net.sockets.big_http_download.ci'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_big_http_download_ci_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/big_http_download frdm_k64f build_c74b0d1  -DOVERLAY_CONFIG=overlay-ci.conf sample.net.sockets.big_http_download.ci samples/net/sockets/big_http_download  -DOVERLAY_CONFIG=overlay-ci.conf'''
        script {
          test_net_socket_sample_net_sockets_big_http_download_ci_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/big_http_download/build_c74b0d1 sample.net.sockets.big_http_download.ci '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/big_http_download/build_c74b0d1'
        script {
          test_net_socket_sample_net_sockets_big_http_download_ci_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_big_http_download_ci_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.big_http_download.ci', 'result': test_net_socket_sample_net_sockets_big_http_download_ci_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.big_http_download.ci', 'result': test_net_socket_sample_net_sockets_big_http_download_ci_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_dumb_http_server_result
   def test_net_socket_sample_net_sockets_dumb_http_server() {
      echo 'Test sample.net.sockets.dumb_http_server'
      echo 'sample.net.sockets.dumb_http_server'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_dumb_http_server_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/dumb_http_server frdm_k64f build_a7deba9 -DCONFIG_NET_SOCKETS_POSIX_NAMES=y sample.net.sockets.dumb_http_server samples/net/sockets/dumb_http_server -DCONFIG_NET_SOCKETS_POSIX_NAMES=y'''
        script {
          test_net_socket_sample_net_sockets_dumb_http_server_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/dumb_http_server/build_a7deba9 sample.net.sockets.dumb_http_server '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/dumb_http_server/build_a7deba9'
        script {
          test_net_socket_sample_net_sockets_dumb_http_server_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_dumb_http_server_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server', 'result': test_net_socket_sample_net_sockets_dumb_http_server_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server', 'result': test_net_socket_sample_net_sockets_dumb_http_server_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_dumb_http_server_posix_result
   def test_net_socket_sample_net_sockets_dumb_http_server_posix() {
      echo 'Test sample.net.sockets.dumb_http_server.posix'
      echo 'sample.net.sockets.dumb_http_server.posix'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_dumb_http_server_posix_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/dumb_http_server frdm_k64f build_f8f57f4 -DCONFIG_NET_SOCKETS_POSIX_NAMES=n -DCONFIG_POSIX_API=y sample.net.sockets.dumb_http_server.posix samples/net/sockets/dumb_http_server -DCONFIG_NET_SOCKETS_POSIX_NAMES=n -DCONFIG_POSIX_API=y'''
        script {
          test_net_socket_sample_net_sockets_dumb_http_server_posix_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/dumb_http_server/build_f8f57f4 sample.net.sockets.dumb_http_server.posix '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/dumb_http_server/build_f8f57f4'
        script {
          test_net_socket_sample_net_sockets_dumb_http_server_posix_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_dumb_http_server_posix_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server.posix', 'result': test_net_socket_sample_net_sockets_dumb_http_server_posix_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server.posix', 'result': test_net_socket_sample_net_sockets_dumb_http_server_posix_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_echo_result
   def test_net_socket_sample_net_sockets_echo() {
      echo 'Test sample.net.sockets.echo'
      echo 'sample.net.sockets.echo'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_echo_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/echo frdm_k64f build_84e5dd2 sample.net.sockets.echo samples/net/sockets/echo'''
        script {
          test_net_socket_sample_net_sockets_echo_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/echo/build_84e5dd2 sample.net.sockets.echo '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/echo/build_84e5dd2'
        script {
          test_net_socket_sample_net_sockets_echo_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_echo_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo', 'result': test_net_socket_sample_net_sockets_echo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo', 'result': test_net_socket_sample_net_sockets_echo_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_echo_client_result
   def test_net_socket_sample_net_sockets_echo_client() {
      echo 'Test sample.net.sockets.echo_client'
      echo 'sample.net.sockets.echo_client'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_echo_client_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/echo_client frdm_k64f build_d1f75fd sample.net.sockets.echo_client samples/net/sockets/echo_client'''
        script {
          test_net_socket_sample_net_sockets_echo_client_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/echo_client/build_d1f75fd sample.net.sockets.echo_client '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/echo_client/build_d1f75fd'
        script {
          test_net_socket_sample_net_sockets_echo_client_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_echo_client_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_client', 'result': test_net_socket_sample_net_sockets_echo_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_client', 'result': test_net_socket_sample_net_sockets_echo_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino_result
   def test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino() {
      echo 'Test sample.net.sockets.echo_server.802154.rf2xx.arduino'
      echo 'sample.net.sockets.echo_server.802154.rf2xx.arduino'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/echo_server frdm_k64f build_ec853f3  -DSHIELD=atmel_rf2xx_arduino -DOVERLAY_CONFIG=overlay-802154.conf sample.net.sockets.echo_server.802154.rf2xx.arduino samples/net/sockets/echo_server  -DSHIELD=atmel_rf2xx_arduino -DOVERLAY_CONFIG=overlay-802154.conf'''
        script {
          test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/echo_server/build_ec853f3 sample.net.sockets.echo_server.802154.rf2xx.arduino '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/echo_server/build_ec853f3'
        script {
          test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_server.802154.rf2xx.arduino', 'result': test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_server.802154.rf2xx.arduino', 'result': test_net_socket_sample_net_sockets_echo_server_802154_rf2xx_arduino_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_echo_client_mcr20a_result
   def test_net_socket_sample_net_sockets_echo_client_mcr20a() {
      echo 'Test sample.net.sockets.echo_client.mcr20a'
      echo 'sample.net.sockets.echo_client.mcr20a'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_echo_client_mcr20a_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/echo_client frdm_k64f build_958d602  -DSHIELD=frdm_cr20a -DOVERLAY_CONFIG=overlay-802154.conf sample.net.sockets.echo_client.mcr20a samples/net/sockets/echo_client  -DSHIELD=frdm_cr20a -DOVERLAY_CONFIG=overlay-802154.conf'''
        script {
          test_net_socket_sample_net_sockets_echo_client_mcr20a_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/echo_client/build_958d602 sample.net.sockets.echo_client.mcr20a '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/echo_client/build_958d602'
        script {
          test_net_socket_sample_net_sockets_echo_client_mcr20a_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_echo_client_mcr20a_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_client.mcr20a', 'result': test_net_socket_sample_net_sockets_echo_client_mcr20a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_client.mcr20a', 'result': test_net_socket_sample_net_sockets_echo_client_mcr20a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_echo_server_result
   def test_net_socket_sample_net_sockets_echo_server() {
      echo 'Test sample.net.sockets.echo_server'
      echo 'sample.net.sockets.echo_server'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_echo_server_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/echo_server frdm_k64f build_d765862 sample.net.sockets.echo_server samples/net/sockets/echo_server'''
        script {
          test_net_socket_sample_net_sockets_echo_server_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/echo_server/build_d765862 sample.net.sockets.echo_server '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/echo_server/build_d765862'
        script {
          test_net_socket_sample_net_sockets_echo_server_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_echo_server_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_server', 'result': test_net_socket_sample_net_sockets_echo_server_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.echo_server', 'result': test_net_socket_sample_net_sockets_echo_server_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_http_get_result
   def test_net_socket_sample_net_sockets_http_get() {
      echo 'Test sample.net.sockets.http_get'
      echo 'sample.net.sockets.http_get'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_http_get_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/http_get frdm_k64f build_e633e68 -DCONFIG_NET_SOCKETS_POSIX_NAMES=y sample.net.sockets.http_get samples/net/sockets/http_get -DCONFIG_NET_SOCKETS_POSIX_NAMES=y'''
        script {
          test_net_socket_sample_net_sockets_http_get_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/http_get/build_e633e68 sample.net.sockets.http_get '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/http_get/build_e633e68'
        script {
          test_net_socket_sample_net_sockets_http_get_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_http_get_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.http_get', 'result': test_net_socket_sample_net_sockets_http_get_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.http_get', 'result': test_net_socket_sample_net_sockets_http_get_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_http_get_posix_result
   def test_net_socket_sample_net_sockets_http_get_posix() {
      echo 'Test sample.net.sockets.http_get.posix'
      echo 'sample.net.sockets.http_get.posix'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_http_get_posix_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/http_get frdm_k64f build_ef311bc -DCONFIG_NET_SOCKETS_POSIX_NAMES=n -DCONFIG_POSIX_API=y sample.net.sockets.http_get.posix samples/net/sockets/http_get -DCONFIG_NET_SOCKETS_POSIX_NAMES=n -DCONFIG_POSIX_API=y'''
        script {
          test_net_socket_sample_net_sockets_http_get_posix_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/http_get/build_ef311bc sample.net.sockets.http_get.posix '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/http_get/build_ef311bc'
        script {
          test_net_socket_sample_net_sockets_http_get_posix_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_http_get_posix_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.http_get.posix', 'result': test_net_socket_sample_net_sockets_http_get_posix_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.http_get.posix', 'result': test_net_socket_sample_net_sockets_http_get_posix_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_sample_net_sockets_socketpair_result
   def test_net_socket_sample_net_sockets_socketpair() {
      echo 'Test sample.net.sockets.socketpair'
      echo 'sample.net.sockets.socketpair'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_sample_net_sockets_socketpair_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/socketpair frdm_k64f build_1edd60a sample.net.sockets.socketpair samples/net/sockets/socketpair'''
        script {
          test_net_socket_sample_net_sockets_socketpair_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/socketpair/build_1edd60a sample.net.sockets.socketpair '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/socketpair/build_1edd60a'
        script {
          test_net_socket_sample_net_sockets_socketpair_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_sample_net_sockets_socketpair_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.socketpair', 'result': test_net_socket_sample_net_sockets_socketpair_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.socketpair', 'result': test_net_socket_sample_net_sockets_socketpair_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_af_packet_net_socket_packet_result
   def test_net_socket_af_packet_net_socket_packet() {
      echo 'Test net.socket.packet'
      echo 'net.socket.packet'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_af_packet_net_socket_packet_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/af_packet frdm_k64f build_2174279 net.socket.packet tests/net/socket/af_packet'''
        script {
          test_net_socket_af_packet_net_socket_packet_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/af_packet/build_2174279 net.socket.packet '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/af_packet/build_2174279'
        script {
          test_net_socket_af_packet_net_socket_packet_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_af_packet_net_socket_packet_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.packet', 'result': test_net_socket_af_packet_net_socket_packet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.packet', 'result': test_net_socket_af_packet_net_socket_packet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw_result
   def test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw() {
      echo 'Test net.socket.packet.af_packet_ipproto_raw'
      echo 'net.socket.packet.af_packet_ipproto_raw'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/af_packet_ipproto_raw frdm_k64f build_c4b1e54 net.socket.packet.af_packet_ipproto_raw tests/net/socket/af_packet_ipproto_raw'''
        script {
          test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/af_packet_ipproto_raw/build_c4b1e54 net.socket.packet.af_packet_ipproto_raw '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/af_packet_ipproto_raw/build_c4b1e54'
        script {
          test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.packet.af_packet_ipproto_raw', 'result': test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.packet.af_packet_ipproto_raw', 'result': test_net_socket_af_packet_net_socket_packet_af_packet_ipproto_raw_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket_result
   def test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket() {
      echo 'Test sample.net.sockets.can.test_with_one_socket'
      echo 'sample.net.sockets.can.test_with_one_socket'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/can frdm_k64f build_e234d32 -DCONFIG_NET_SOCKETS_CAN_RECEIVERS=1 sample.net.sockets.can.test_with_one_socket samples/net/sockets/can -DCONFIG_NET_SOCKETS_CAN_RECEIVERS=1'''
        script {
          test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/can/build_e234d32 sample.net.sockets.can.test_with_one_socket '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/can/build_e234d32'
        script {
          test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.can.test_with_one_socket', 'result': test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.can.test_with_one_socket', 'result': test_net_socket_can_CAN_sample_net_sockets_can_test_with_one_socket_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets_result
   def test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets() {
      echo 'Test sample.net.sockets.can.test_with_two_sockets'
      echo 'sample.net.sockets.can.test_with_two_sockets'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/can frdm_k64f build_888640e -DCONFIG_NET_SOCKETS_CAN_RECEIVERS=2 sample.net.sockets.can.test_with_two_sockets samples/net/sockets/can -DCONFIG_NET_SOCKETS_CAN_RECEIVERS=2'''
        script {
          test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/can/build_888640e sample.net.sockets.can.test_with_two_sockets '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/can/build_888640e'
        script {
          test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.can.test_with_two_sockets', 'result': test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.can.test_with_two_sockets', 'result': test_net_socket_can_CAN_sample_net_sockets_can_test_with_two_sockets_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info_result
   def test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info() {
      echo 'Test net.socket.get_addr_info'
      echo 'net.socket.get_addr_info'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/getaddrinfo frdm_k64f build_34ffb18 net.socket.get_addr_info tests/net/socket/getaddrinfo'''
        script {
          test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/getaddrinfo/build_34ffb18 net.socket.get_addr_info '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/getaddrinfo/build_34ffb18'
        script {
          test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.get_addr_info', 'result': test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.get_addr_info', 'result': test_net_socket_getaddrinfo_userspace_net_socket_get_addr_info_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_http_sample_net_sockets_dumb_http_server_mt_result
   def test_net_socket_http_sample_net_sockets_dumb_http_server_mt() {
      echo 'Test sample.net.sockets.dumb_http_server_mt'
      echo 'sample.net.sockets.dumb_http_server_mt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_http_sample_net_sockets_dumb_http_server_mt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/dumb_http_server_mt frdm_k64f build_16e0dea -DCONFIG_NET_SOCKETS_POSIX_NAMES=y sample.net.sockets.dumb_http_server_mt samples/net/sockets/dumb_http_server_mt -DCONFIG_NET_SOCKETS_POSIX_NAMES=y'''
        script {
          test_net_socket_http_sample_net_sockets_dumb_http_server_mt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/dumb_http_server_mt/build_16e0dea sample.net.sockets.dumb_http_server_mt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/dumb_http_server_mt/build_16e0dea'
        script {
          test_net_socket_http_sample_net_sockets_dumb_http_server_mt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_http_sample_net_sockets_dumb_http_server_mt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server_mt', 'result': test_net_socket_http_sample_net_sockets_dumb_http_server_mt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server_mt', 'result': test_net_socket_http_sample_net_sockets_dumb_http_server_mt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode_result
   def test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode() {
      echo 'Test sample.net.sockets.net_mgmt.kernelmode'
      echo 'sample.net.sockets.net_mgmt.kernelmode'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/net_mgmt frdm_k64f build_125b646 -DCONFIG_USERSPACE=n sample.net.sockets.net_mgmt.kernelmode samples/net/sockets/net_mgmt -DCONFIG_USERSPACE=n'''
        script {
          test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/net_mgmt/build_125b646 sample.net.sockets.net_mgmt.kernelmode '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/net_mgmt/build_125b646'
        script {
          test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.net_mgmt.kernelmode', 'result': test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.net_mgmt.kernelmode', 'result': test_net_socket_mgmt_sample_net_sockets_net_mgmt_kernelmode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_net_mgmt_userspace_net_socket_mgmt_result
   def test_net_socket_net_mgmt_userspace_net_socket_mgmt() {
      echo 'Test net.socket.mgmt'
      echo 'net.socket.mgmt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_net_mgmt_userspace_net_socket_mgmt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/net_mgmt frdm_k64f build_1a57566 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.socket.mgmt tests/net/socket/net_mgmt -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_socket_net_mgmt_userspace_net_socket_mgmt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/net_mgmt/build_1a57566 net.socket.mgmt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/net_mgmt/build_1a57566'
        script {
          test_net_socket_net_mgmt_userspace_net_socket_mgmt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_net_mgmt_userspace_net_socket_mgmt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.mgmt', 'result': test_net_socket_net_mgmt_userspace_net_socket_mgmt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.mgmt', 'result': test_net_socket_net_mgmt_userspace_net_socket_mgmt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt_result
   def test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt() {
      echo 'Test net.socket.mgmt.preempt'
      echo 'net.socket.mgmt.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/net_mgmt frdm_k64f build_75dfc40 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.socket.mgmt.preempt tests/net/socket/net_mgmt -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/net_mgmt/build_75dfc40 net.socket.mgmt.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/net_mgmt/build_75dfc40'
        script {
          test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.mgmt.preempt', 'result': test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.mgmt.preempt', 'result': test_net_socket_net_mgmt_userspace_net_socket_mgmt_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_poll_net_socket_poll_result
   def test_net_socket_poll_net_socket_poll() {
      echo 'Test net.socket.poll'
      echo 'net.socket.poll'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_poll_net_socket_poll_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/poll frdm_k64f build_f3d97b6 net.socket.poll tests/net/socket/poll'''
        script {
          test_net_socket_poll_net_socket_poll_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/poll/build_f3d97b6 net.socket.poll '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/poll/build_f3d97b6'
        script {
          test_net_socket_poll_net_socket_poll_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_poll_net_socket_poll_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.poll', 'result': test_net_socket_poll_net_socket_poll_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.poll', 'result': test_net_socket_poll_net_socket_poll_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_socket_register_net_socket_register_result
   def test_net_socket_socket_register_net_socket_register() {
      echo 'Test net.socket.register'
      echo 'net.socket.register'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_socket_register_net_socket_register_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/register frdm_k64f build_489862b -DCONFIG_NET_SOCKETS_SOCKOPT_TLS=n net.socket.register tests/net/socket/register -DCONFIG_NET_SOCKETS_SOCKOPT_TLS=n'''
        script {
          test_net_socket_socket_register_net_socket_register_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/register/build_489862b net.socket.register '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/register/build_489862b'
        script {
          test_net_socket_socket_register_net_socket_register_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_socket_register_net_socket_register_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.register', 'result': test_net_socket_socket_register_net_socket_register_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.register', 'result': test_net_socket_socket_register_net_socket_register_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_socket_register_net_socket_register_tls_result
   def test_net_socket_socket_register_net_socket_register_tls() {
      echo 'Test net.socket.register.tls'
      echo 'net.socket.register.tls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_socket_register_net_socket_register_tls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/register frdm_k64f build_343ab12 -DCONFIG_MBEDTLS=y -DCONFIG_MBEDTLS_BUILTIN=y -DCONFIG_MBEDTLS_ENABLE_HEAP=y -DCONFIG_MBEDTLS_HEAP_SIZE=60000 -DCONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN=2048 -DCONFIG_NET_SOCKETS_SOCKOPT_TLS=y -DCONFIG_NET_SOCKETS_TLS_MAX_CONTEXTS=6 -DCONFIG_NET_SOCKETS_ENABLE_DTLS=y -DCONFIG_NET_SOCKETS_DTLS_TIMEOUT=30000 -DCONFIG_MAIN_STACK_SIZE=2048 net.socket.register.tls tests/net/socket/register -DCONFIG_MBEDTLS=y -DCONFIG_MBEDTLS_BUILTIN=y -DCONFIG_MBEDTLS_ENABLE_HEAP=y -DCONFIG_MBEDTLS_HEAP_SIZE=60000 -DCONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN=2048 -DCONFIG_NET_SOCKETS_SOCKOPT_TLS=y -DCONFIG_NET_SOCKETS_TLS_MAX_CONTEXTS=6 -DCONFIG_NET_SOCKETS_ENABLE_DTLS=y -DCONFIG_NET_SOCKETS_DTLS_TIMEOUT=30000 -DCONFIG_MAIN_STACK_SIZE=2048'''
        script {
          test_net_socket_socket_register_net_socket_register_tls_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/register/build_343ab12 net.socket.register.tls '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/register/build_343ab12'
        script {
          test_net_socket_socket_register_net_socket_register_tls_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_socket_register_net_socket_register_tls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.register.tls', 'result': test_net_socket_socket_register_net_socket_register_tls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.register.tls', 'result': test_net_socket_socket_register_net_socket_register_tls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_tls_net_socket_tls_result
   def test_net_socket_tls_net_socket_tls() {
      echo 'Test net.socket.tls'
      echo 'net.socket.tls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_tls_net_socket_tls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/tls frdm_k64f build_b22ede7 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.socket.tls tests/net/socket/tls -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_socket_tls_net_socket_tls_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/tls/build_b22ede7 net.socket.tls '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/tls/build_b22ede7'
        script {
          test_net_socket_tls_net_socket_tls_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_tls_net_socket_tls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.tls', 'result': test_net_socket_tls_net_socket_tls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.tls', 'result': test_net_socket_tls_net_socket_tls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_tls_net_socket_tls_preempt_result
   def test_net_socket_tls_net_socket_tls_preempt() {
      echo 'Test net.socket.tls.preempt'
      echo 'net.socket.tls.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_tls_net_socket_tls_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/tls frdm_k64f build_9143382 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.socket.tls.preempt tests/net/socket/tls -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_socket_tls_net_socket_tls_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/tls/build_9143382 net.socket.tls.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/tls/build_9143382'
        script {
          test_net_socket_tls_net_socket_tls_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_tls_net_socket_tls_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.tls.preempt', 'result': test_net_socket_tls_net_socket_tls_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.tls.preempt', 'result': test_net_socket_tls_net_socket_tls_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_udp_net_socket_udp_result
   def test_net_socket_udp_net_socket_udp() {
      echo 'Test net.socket.udp'
      echo 'net.socket.udp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_udp_net_socket_udp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/udp frdm_k64f build_ea48d90 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.socket.udp tests/net/socket/udp -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_socket_udp_net_socket_udp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/udp/build_ea48d90 net.socket.udp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/udp/build_ea48d90'
        script {
          test_net_socket_udp_net_socket_udp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_udp_net_socket_udp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.udp', 'result': test_net_socket_udp_net_socket_udp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.udp', 'result': test_net_socket_udp_net_socket_udp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_udp_net_socket_udp_preempt_result
   def test_net_socket_udp_net_socket_udp_preempt() {
      echo 'Test net.socket.udp.preempt'
      echo 'net.socket.udp.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_udp_net_socket_udp_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/udp frdm_k64f build_d90a8d0 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.socket.udp.preempt tests/net/socket/udp -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_socket_udp_net_socket_udp_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/udp/build_d90a8d0 net.socket.udp.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/udp/build_d90a8d0'
        script {
          test_net_socket_udp_net_socket_udp_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_udp_net_socket_udp_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.udp.preempt', 'result': test_net_socket_udp_net_socket_udp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.udp.preempt', 'result': test_net_socket_udp_net_socket_udp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_get_name_info_result
   def test_net_socket_userspace_net_socket_get_name_info() {
      echo 'Test net.socket.get_name_info'
      echo 'net.socket.get_name_info'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_get_name_info_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/getnameinfo frdm_k64f build_4c6e909 net.socket.get_name_info tests/net/socket/getnameinfo'''
        script {
          test_net_socket_userspace_net_socket_get_name_info_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/getnameinfo/build_4c6e909 net.socket.get_name_info '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/getnameinfo/build_4c6e909'
        script {
          test_net_socket_userspace_net_socket_get_name_info_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_get_name_info_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.get_name_info', 'result': test_net_socket_userspace_net_socket_get_name_info_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.get_name_info', 'result': test_net_socket_userspace_net_socket_get_name_info_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_misc_result
   def test_net_socket_userspace_net_socket_misc() {
      echo 'Test net.socket.misc'
      echo 'net.socket.misc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_misc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/misc frdm_k64f build_ccf5d7d -DCONFIG_TEST_USERSPACE=n net.socket.misc tests/net/socket/misc -DCONFIG_TEST_USERSPACE=n'''
        script {
          test_net_socket_userspace_net_socket_misc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/misc/build_ccf5d7d net.socket.misc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/misc/build_ccf5d7d'
        script {
          test_net_socket_userspace_net_socket_misc_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_misc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.misc', 'result': test_net_socket_userspace_net_socket_misc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.misc', 'result': test_net_socket_userspace_net_socket_misc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_misc_userspace_result
   def test_net_socket_userspace_net_socket_misc_userspace() {
      echo 'Test net.socket.misc.userspace'
      echo 'net.socket.misc.userspace'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_misc_userspace_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/misc frdm_k64f build_bea5aee -DCONFIG_TEST_USERSPACE=y net.socket.misc.userspace tests/net/socket/misc -DCONFIG_TEST_USERSPACE=y'''
        script {
          test_net_socket_userspace_net_socket_misc_userspace_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/misc/build_bea5aee net.socket.misc.userspace '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/misc/build_bea5aee'
        script {
          test_net_socket_userspace_net_socket_misc_userspace_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_misc_userspace_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.misc.userspace', 'result': test_net_socket_userspace_net_socket_misc_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.misc.userspace', 'result': test_net_socket_userspace_net_socket_misc_userspace_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_select_result
   def test_net_socket_userspace_net_socket_select() {
      echo 'Test net.socket.select'
      echo 'net.socket.select'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_select_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/select frdm_k64f build_7462de7 -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.socket.select tests/net/socket/select -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_socket_userspace_net_socket_select_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/select/build_7462de7 net.socket.select '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/select/build_7462de7'
        script {
          test_net_socket_userspace_net_socket_select_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_select_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.select', 'result': test_net_socket_userspace_net_socket_select_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.select', 'result': test_net_socket_userspace_net_socket_select_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_select_preempt_result
   def test_net_socket_userspace_net_socket_select_preempt() {
      echo 'Test net.socket.select.preempt'
      echo 'net.socket.select.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_select_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/select frdm_k64f build_eceab25 -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.socket.select.preempt tests/net/socket/select -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_socket_userspace_net_socket_select_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/select/build_eceab25 net.socket.select.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/select/build_eceab25'
        script {
          test_net_socket_userspace_net_socket_select_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_select_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.select.preempt', 'result': test_net_socket_userspace_net_socket_select_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.select.preempt', 'result': test_net_socket_userspace_net_socket_select_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_socketpair_result
   def test_net_socket_userspace_net_socket_socketpair() {
      echo 'Test net.socket.socketpair'
      echo 'net.socket.socketpair'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_socketpair_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/socketpair frdm_k64f build_c307a3c net.socket.socketpair tests/net/socket/socketpair'''
        script {
          test_net_socket_userspace_net_socket_socketpair_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/socketpair/build_c307a3c net.socket.socketpair '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/socketpair/build_c307a3c'
        script {
          test_net_socket_userspace_net_socket_socketpair_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_socketpair_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.socketpair', 'result': test_net_socket_userspace_net_socket_socketpair_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.socketpair', 'result': test_net_socket_userspace_net_socket_socketpair_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_tcp_result
   def test_net_socket_userspace_net_socket_tcp() {
      echo 'Test net.socket.tcp'
      echo 'net.socket.tcp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_tcp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/tcp frdm_k64f build_e0335cd -DCONFIG_NET_TC_THREAD_COOPERATIVE=y net.socket.tcp tests/net/socket/tcp -DCONFIG_NET_TC_THREAD_COOPERATIVE=y'''
        script {
          test_net_socket_userspace_net_socket_tcp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/tcp/build_e0335cd net.socket.tcp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/tcp/build_e0335cd'
        script {
          test_net_socket_userspace_net_socket_tcp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_tcp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.tcp', 'result': test_net_socket_userspace_net_socket_tcp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.tcp', 'result': test_net_socket_userspace_net_socket_tcp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_socket_userspace_net_socket_tcp_preempt_result
   def test_net_socket_userspace_net_socket_tcp_preempt() {
      echo 'Test net.socket.tcp.preempt'
      echo 'net.socket.tcp.preempt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_socket_userspace_net_socket_tcp_preempt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/tcp frdm_k64f build_9db6f8b -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y net.socket.tcp.preempt tests/net/socket/tcp -DCONFIG_NET_TC_THREAD_PREEMPTIVE=y'''
        script {
          test_net_socket_userspace_net_socket_tcp_preempt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/tcp/build_9db6f8b net.socket.tcp.preempt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/tcp/build_9db6f8b'
        script {
          test_net_socket_userspace_net_socket_tcp_preempt_result = "SUCCESS"
        }
      }
      script {
        echo test_net_socket_userspace_net_socket_tcp_preempt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.tcp.preempt', 'result': test_net_socket_userspace_net_socket_tcp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.tcp.preempt', 'result': test_net_socket_userspace_net_socket_tcp_preempt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_statistics_sample_net_stats_result
   def test_net_statistics_sample_net_stats() {
      echo 'Test sample.net.stats'
      echo 'sample.net.stats'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_statistics_sample_net_stats_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/stats frdm_k64f build_be498ba sample.net.stats samples/net/stats'''
        script {
          test_net_statistics_sample_net_stats_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/stats/build_be498ba sample.net.stats '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/stats/build_be498ba'
        script {
          test_net_statistics_sample_net_stats_result = "SUCCESS"
        }
      }
      script {
        echo test_net_statistics_sample_net_stats_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.stats', 'result': test_net_statistics_sample_net_stats_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.stats', 'result': test_net_statistics_sample_net_stats_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_syslog_sample_net_syslog_with_timefuncs_result
   def test_net_syslog_sample_net_syslog_with_timefuncs() {
      echo 'Test sample.net.syslog.with_timefuncs'
      echo 'sample.net.syslog.with_timefuncs'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_syslog_sample_net_syslog_with_timefuncs_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/syslog_net frdm_k64f build_a8bc507 -DCONFIG_NEWLIB_LIBC=y sample.net.syslog.with_timefuncs samples/net/syslog_net -DCONFIG_NEWLIB_LIBC=y'''
        script {
          test_net_syslog_sample_net_syslog_with_timefuncs_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/syslog_net/build_a8bc507 sample.net.syslog.with_timefuncs '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/syslog_net/build_a8bc507'
        script {
          test_net_syslog_sample_net_syslog_with_timefuncs_result = "SUCCESS"
        }
      }
      script {
        echo test_net_syslog_sample_net_syslog_with_timefuncs_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.with_timefuncs', 'result': test_net_syslog_sample_net_syslog_with_timefuncs_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.with_timefuncs', 'result': test_net_syslog_sample_net_syslog_with_timefuncs_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_syslog_sample_net_syslog_ipv4_only_result
   def test_net_syslog_sample_net_syslog_ipv4_only() {
      echo 'Test sample.net.syslog.ipv4_only'
      echo 'sample.net.syslog.ipv4_only'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_syslog_sample_net_syslog_ipv4_only_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/syslog_net frdm_k64f build_d5b2f6f -DCONFIG_NET_IPV6=n -DCONFIG_NET_CONFIG_NEED_IPV6=n -DCONFIG_NET_CONFIG_MY_IPV6_ADDR= -DCONFIG_NET_CONFIG_PEER_IPV6_ADDR= -DCONFIG_LOG_BACKEND_NET_SERVER=192.0.2.1:514 sample.net.syslog.ipv4_only samples/net/syslog_net -DCONFIG_NET_IPV6=n -DCONFIG_NET_CONFIG_NEED_IPV6=n -DCONFIG_NET_CONFIG_MY_IPV6_ADDR= -DCONFIG_NET_CONFIG_PEER_IPV6_ADDR= -DCONFIG_LOG_BACKEND_NET_SERVER=192.0.2.1:514'''
        script {
          test_net_syslog_sample_net_syslog_ipv4_only_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/syslog_net/build_d5b2f6f sample.net.syslog.ipv4_only '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/syslog_net/build_d5b2f6f'
        script {
          test_net_syslog_sample_net_syslog_ipv4_only_result = "SUCCESS"
        }
      }
      script {
        echo test_net_syslog_sample_net_syslog_ipv4_only_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.ipv4_only', 'result': test_net_syslog_sample_net_syslog_ipv4_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.ipv4_only', 'result': test_net_syslog_sample_net_syslog_ipv4_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_syslog_sample_net_syslog_ipv6_only_result
   def test_net_syslog_sample_net_syslog_ipv6_only() {
      echo 'Test sample.net.syslog.ipv6_only'
      echo 'sample.net.syslog.ipv6_only'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_syslog_sample_net_syslog_ipv6_only_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/syslog_net frdm_k64f build_5ff44c2 -DCONFIG_NET_IPV4=n -DCONFIG_NET_CONFIG_NEED_IPV4=n -DCONFIG_NET_CONFIG_MY_IPV4_ADDR= -DCONFIG_NET_CONFIG_PEER_IPV4_ADDR= sample.net.syslog.ipv6_only samples/net/syslog_net -DCONFIG_NET_IPV4=n -DCONFIG_NET_CONFIG_NEED_IPV4=n -DCONFIG_NET_CONFIG_MY_IPV4_ADDR= -DCONFIG_NET_CONFIG_PEER_IPV4_ADDR='''
        script {
          test_net_syslog_sample_net_syslog_ipv6_only_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/syslog_net/build_5ff44c2 sample.net.syslog.ipv6_only '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/syslog_net/build_5ff44c2'
        script {
          test_net_syslog_sample_net_syslog_ipv6_only_result = "SUCCESS"
        }
      }
      script {
        echo test_net_syslog_sample_net_syslog_ipv6_only_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.ipv6_only', 'result': test_net_syslog_sample_net_syslog_ipv6_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.ipv6_only', 'result': test_net_syslog_sample_net_syslog_ipv6_only_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_syslog_sample_net_syslog_no_autostart_result
   def test_net_syslog_sample_net_syslog_no_autostart() {
      echo 'Test sample.net.syslog.no_autostart'
      echo 'sample.net.syslog.no_autostart'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_syslog_sample_net_syslog_no_autostart_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/syslog_net frdm_k64f build_6000090 -DCONFIG_LOG_BACKEND_NET_AUTOSTART=n sample.net.syslog.no_autostart samples/net/syslog_net -DCONFIG_LOG_BACKEND_NET_AUTOSTART=n'''
        script {
          test_net_syslog_sample_net_syslog_no_autostart_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/syslog_net/build_6000090 sample.net.syslog.no_autostart '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/syslog_net/build_6000090'
        script {
          test_net_syslog_sample_net_syslog_no_autostart_result = "SUCCESS"
        }
      }
      script {
        echo test_net_syslog_sample_net_syslog_no_autostart_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.no_autostart', 'result': test_net_syslog_sample_net_syslog_no_autostart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.syslog.no_autostart', 'result': test_net_syslog_sample_net_syslog_no_autostart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_tcp_net_tcp_simple_result
   def test_net_tcp_net_tcp_simple() {
      echo 'Test net.tcp.simple'
      echo 'net.tcp.simple'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_tcp_net_tcp_simple_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/tcp frdm_k64f build_877d9e1 -DCONFIG_NET_TCP_RECV_QUEUE_TIMEOUT=1000 net.tcp.simple tests/net/tcp -DCONFIG_NET_TCP_RECV_QUEUE_TIMEOUT=1000'''
        script {
          test_net_tcp_net_tcp_simple_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/tcp/build_877d9e1 net.tcp.simple '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/tcp/build_877d9e1'
        script {
          test_net_tcp_net_tcp_simple_result = "SUCCESS"
        }
      }
      script {
        echo test_net_tcp_net_tcp_simple_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.tcp.simple', 'result': test_net_tcp_net_tcp_simple_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.tcp.simple', 'result': test_net_tcp_net_tcp_simple_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_tcp_net_tcp_no_recv_queue_result
   def test_net_tcp_net_tcp_no_recv_queue() {
      echo 'Test net.tcp.no_recv_queue'
      echo 'net.tcp.no_recv_queue'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_tcp_net_tcp_no_recv_queue_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/tcp frdm_k64f build_dd7b7f8 -DCONFIG_NET_TCP_RECV_QUEUE_TIMEOUT=0 net.tcp.no_recv_queue tests/net/tcp -DCONFIG_NET_TCP_RECV_QUEUE_TIMEOUT=0'''
        script {
          test_net_tcp_net_tcp_no_recv_queue_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/tcp/build_dd7b7f8 net.tcp.no_recv_queue '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/tcp/build_dd7b7f8'
        script {
          test_net_tcp_net_tcp_no_recv_queue_result = "SUCCESS"
        }
      }
      script {
        echo test_net_tcp_net_tcp_no_recv_queue_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.tcp.no_recv_queue', 'result': test_net_tcp_net_tcp_no_recv_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.tcp.no_recv_queue', 'result': test_net_tcp_net_tcp_no_recv_queue_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_telnet_sample_net_telnet_result
   def test_net_telnet_sample_net_telnet() {
      echo 'Test sample.net.telnet'
      echo 'sample.net.telnet'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_telnet_sample_net_telnet_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/telnet frdm_k64f build_7bab914 sample.net.telnet samples/net/telnet'''
        script {
          test_net_telnet_sample_net_telnet_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/telnet/build_7bab914 sample.net.telnet '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/telnet/build_7bab914'
        script {
          test_net_telnet_sample_net_telnet_result = "SUCCESS"
        }
      }
      script {
        echo test_net_telnet_sample_net_telnet_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.telnet', 'result': test_net_telnet_sample_net_telnet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.telnet', 'result': test_net_telnet_sample_net_telnet_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_tls_net_tls_credentials_result
   def test_net_tls_net_tls_credentials() {
      echo 'Test net.tls_credentials'
      echo 'net.tls_credentials'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_tls_net_tls_credentials_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/lib/tls_credentials frdm_k64f build_9a6e1de net.tls_credentials tests/net/lib/tls_credentials'''
        script {
          test_net_tls_net_tls_credentials_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/lib/tls_credentials/build_9a6e1de net.tls_credentials '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/lib/tls_credentials/build_9a6e1de'
        script {
          test_net_tls_net_tls_credentials_result = "SUCCESS"
        }
      }
      script {
        echo test_net_tls_net_tls_credentials_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.tls_credentials', 'result': test_net_tls_net_tls_credentials_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.tls_credentials', 'result': test_net_tls_net_tls_credentials_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_trickle_net_trickle_result
   def test_net_trickle_net_trickle() {
      echo 'Test net.trickle'
      echo 'net.trickle'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_trickle_net_trickle_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/trickle frdm_k64f build_59fbb05 net.trickle tests/net/trickle'''
        script {
          test_net_trickle_net_trickle_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/trickle/build_59fbb05 net.trickle '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/trickle/build_59fbb05'
        script {
          test_net_trickle_net_trickle_result = "SUCCESS"
        }
      }
      script {
        echo test_net_trickle_net_trickle_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.trickle', 'result': test_net_trickle_net_trickle_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.trickle', 'result': test_net_trickle_net_trickle_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_tx_timestamp_gptp_net_timestamp_result
   def test_net_tx_timestamp_gptp_net_timestamp() {
      echo 'Test net.timestamp'
      echo 'net.timestamp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_tx_timestamp_gptp_net_timestamp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/tx_timestamp frdm_k64f build_aea645e net.timestamp tests/net/tx_timestamp'''
        script {
          test_net_tx_timestamp_gptp_net_timestamp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/tx_timestamp/build_aea645e net.timestamp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/tx_timestamp/build_aea645e'
        script {
          test_net_tx_timestamp_gptp_net_timestamp_result = "SUCCESS"
        }
      }
      script {
        echo test_net_tx_timestamp_gptp_net_timestamp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.timestamp', 'result': test_net_tx_timestamp_gptp_net_timestamp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.timestamp', 'result': test_net_tx_timestamp_gptp_net_timestamp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_userspace_net_util_result
   def test_net_userspace_net_util() {
      echo 'Test net.util'
      echo 'net.util'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_userspace_net_util_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/utils frdm_k64f build_9d4c72f net.util tests/net/utils'''
        script {
          test_net_userspace_net_util_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/utils/build_9d4c72f net.util '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/utils/build_9d4c72f'
        script {
          test_net_userspace_net_util_result = "SUCCESS"
        }
      }
      script {
        echo test_net_userspace_net_util_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.util', 'result': test_net_userspace_net_util_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.util', 'result': test_net_userspace_net_util_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_virtual_tunnel_sample_net_virtual_result
   def test_net_virtual_tunnel_sample_net_virtual() {
      echo 'Test sample.net.virtual'
      echo 'sample.net.virtual'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_virtual_tunnel_sample_net_virtual_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/virtual frdm_k64f build_6d31164 sample.net.virtual samples/net/virtual'''
        script {
          test_net_virtual_tunnel_sample_net_virtual_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/virtual/build_6d31164 sample.net.virtual '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/virtual/build_6d31164'
        script {
          test_net_virtual_tunnel_sample_net_virtual_result = "SUCCESS"
        }
      }
      script {
        echo test_net_virtual_tunnel_sample_net_virtual_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.virtual', 'result': test_net_virtual_tunnel_sample_net_virtual_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.virtual', 'result': test_net_virtual_tunnel_sample_net_virtual_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_vlan_sample_net_vlan_result
   def test_net_vlan_sample_net_vlan() {
      echo 'Test sample.net.vlan'
      echo 'sample.net.vlan'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_vlan_sample_net_vlan_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/vlan frdm_k64f build_b006ba1 sample.net.vlan samples/net/vlan'''
        script {
          test_net_vlan_sample_net_vlan_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/vlan/build_b006ba1 sample.net.vlan '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/vlan/build_b006ba1'
        script {
          test_net_vlan_sample_net_vlan_result = "SUCCESS"
        }
      }
      script {
        echo test_net_vlan_sample_net_vlan_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.vlan', 'result': test_net_vlan_sample_net_vlan_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.vlan', 'result': test_net_vlan_sample_net_vlan_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_vlan_net_vlan_result
   def test_net_vlan_net_vlan() {
      echo 'Test net.vlan'
      echo 'net.vlan'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_vlan_net_vlan_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/vlan frdm_k64f build_361f116 net.vlan tests/net/vlan'''
        script {
          test_net_vlan_net_vlan_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/vlan/build_361f116 net.vlan '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/vlan/build_361f116'
        script {
          test_net_vlan_net_vlan_result = "SUCCESS"
        }
      }
      script {
        echo test_net_vlan_net_vlan_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.vlan', 'result': test_net_vlan_net_vlan_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.vlan', 'result': test_net_vlan_net_vlan_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_websocket_net_socket_websocket_result
   def test_net_websocket_net_socket_websocket() {
      echo 'Test net.socket.websocket'
      echo 'net.socket.websocket'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_websocket_net_socket_websocket_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/net/socket/websocket frdm_k64f build_952cac8 net.socket.websocket tests/net/socket/websocket'''
        script {
          test_net_websocket_net_socket_websocket_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/net/socket/websocket/build_952cac8 net.socket.websocket '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/net/socket/websocket/build_952cac8'
        script {
          test_net_websocket_net_socket_websocket_result = "SUCCESS"
        }
      }
      script {
        echo test_net_websocket_net_socket_websocket_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'net.socket.websocket', 'result': test_net_websocket_net_socket_websocket_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'net.socket.websocket', 'result': test_net_websocket_net_socket_websocket_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_wifi_sample_net_wifi_esp_8266_arduino_result
   def test_net_wifi_sample_net_wifi_esp_8266_arduino() {
      echo 'Test sample.net.wifi.esp_8266_arduino'
      echo 'sample.net.wifi.esp_8266_arduino'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_wifi_sample_net_wifi_esp_8266_arduino_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/wifi frdm_k64f build_4fc4989  -DSHIELD=esp_8266_arduino sample.net.wifi.esp_8266_arduino samples/net/wifi  -DSHIELD=esp_8266_arduino'''
        script {
          test_net_wifi_sample_net_wifi_esp_8266_arduino_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/wifi/build_4fc4989 sample.net.wifi.esp_8266_arduino '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/wifi/build_4fc4989'
        script {
          test_net_wifi_sample_net_wifi_esp_8266_arduino_result = "SUCCESS"
        }
      }
      script {
        echo test_net_wifi_sample_net_wifi_esp_8266_arduino_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.wifi.esp_8266_arduino', 'result': test_net_wifi_sample_net_wifi_esp_8266_arduino_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.wifi.esp_8266_arduino', 'result': test_net_wifi_sample_net_wifi_esp_8266_arduino_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart_result
   def test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart() {
      echo 'Test sample.net.wifi.inventek_eswifi_arduino_uart'
      echo 'sample.net.wifi.inventek_eswifi_arduino_uart'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/wifi frdm_k64f build_756c8ef  -DSHIELD=ventek_eswifi_arduino_uart sample.net.wifi.inventek_eswifi_arduino_uart samples/net/wifi  -DSHIELD=ventek_eswifi_arduino_uart'''
        script {
          test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/wifi/build_756c8ef sample.net.wifi.inventek_eswifi_arduino_uart '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/wifi/build_756c8ef'
        script {
          test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart_result = "SUCCESS"
        }
      }
      script {
        echo test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.wifi.inventek_eswifi_arduino_uart', 'result': test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.wifi.inventek_eswifi_arduino_uart', 'result': test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_uart_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi_result
   def test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi() {
      echo 'Test sample.net.wifi.inventek_eswifi_arduino_spi'
      echo 'sample.net.wifi.inventek_eswifi_arduino_spi'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/wifi frdm_k64f build_392c5ae  -DSHIELD=ventek_eswifi_arduino_spi sample.net.wifi.inventek_eswifi_arduino_spi samples/net/wifi  -DSHIELD=ventek_eswifi_arduino_spi'''
        script {
          test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/wifi/build_392c5ae sample.net.wifi.inventek_eswifi_arduino_spi '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/wifi/build_392c5ae'
        script {
          test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi_result = "SUCCESS"
        }
      }
      script {
        echo test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.wifi.inventek_eswifi_arduino_spi', 'result': test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.wifi.inventek_eswifi_arduino_spi', 'result': test_net_wifi_sample_net_wifi_inventek_eswifi_arduino_spi_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_wifi_updatehub_sample_net_updatehub_result
   def test_net_wifi_updatehub_sample_net_updatehub() {
      echo 'Test sample.net.updatehub'
      echo 'sample.net.updatehub'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_wifi_updatehub_sample_net_updatehub_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/mgmt/updatehub frdm_k64f build_22baaed -DCONFIG_UPDATEHUB_PRODUCT_UID=e4d37cfe6ec48a2d069cc0bbb8b078677e9a0d8df3a027c4d8ea131130c4265f -DCONFIG_UPDATEHUB_POLL_INTERVAL=1 -DCONFIG_UPDATEHUB_CE=y -DCONFIG_UPDATEHUB_SERVER=10.5.3.67 sample.net.updatehub samples/subsys/mgmt/updatehub -DCONFIG_UPDATEHUB_PRODUCT_UID=e4d37cfe6ec48a2d069cc0bbb8b078677e9a0d8df3a027c4d8ea131130c4265f -DCONFIG_UPDATEHUB_POLL_INTERVAL=1 -DCONFIG_UPDATEHUB_CE=y -DCONFIG_UPDATEHUB_SERVER=10.5.3.67'''
        script {
          test_net_wifi_updatehub_sample_net_updatehub_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/mgmt/updatehub/build_22baaed'
        script {
          test_net_wifi_updatehub_sample_net_updatehub_result = "SUCCESS"
        }
      }
      script {
        echo test_net_wifi_updatehub_sample_net_updatehub_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.updatehub', 'result': test_net_wifi_updatehub_sample_net_updatehub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.updatehub', 'result': test_net_wifi_updatehub_sample_net_updatehub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_net_wifi_updatehub_sample_net_updatehub_dtls_result
   def test_net_wifi_updatehub_sample_net_updatehub_dtls() {
      echo 'Test sample.net.updatehub.dtls'
      echo 'sample.net.updatehub.dtls'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_net_wifi_updatehub_sample_net_updatehub_dtls_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/mgmt/updatehub frdm_k64f build_5d9c7ef  -DOVERLAY_CONFIG=overlay-dtls.conf -DCONFIG_UPDATEHUB_PRODUCT_UID=e4d37cfe6ec48a2d069cc0bbb8b078677e9a0d8df3a027c4d8ea131130c4265f -DCONFIG_UPDATEHUB_POLL_INTERVAL=1 -DCONFIG_UPDATEHUB_CE=y -DCONFIG_UPDATEHUB_SERVER=10.5.3.67 sample.net.updatehub.dtls samples/subsys/mgmt/updatehub  -DOVERLAY_CONFIG=overlay-dtls.conf -DCONFIG_UPDATEHUB_PRODUCT_UID=e4d37cfe6ec48a2d069cc0bbb8b078677e9a0d8df3a027c4d8ea131130c4265f -DCONFIG_UPDATEHUB_POLL_INTERVAL=1 -DCONFIG_UPDATEHUB_CE=y -DCONFIG_UPDATEHUB_SERVER=10.5.3.67'''
        script {
          test_net_wifi_updatehub_sample_net_updatehub_dtls_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/mgmt/updatehub/build_5d9c7ef'
        script {
          test_net_wifi_updatehub_sample_net_updatehub_dtls_result = "SUCCESS"
        }
      }
      script {
        echo test_net_wifi_updatehub_sample_net_updatehub_dtls_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.updatehub.dtls', 'result': test_net_wifi_updatehub_sample_net_updatehub_dtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.updatehub.dtls', 'result': test_net_wifi_updatehub_sample_net_updatehub_dtls_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_nmi_interrupt_arm_arch_interrupt_arm_nmi_result
   def test_nmi_interrupt_arm_arch_interrupt_arm_nmi() {
      echo 'Test arch.interrupt.arm.nmi'
      echo 'arch.interrupt.arm.nmi'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_nmi_interrupt_arm_arch_interrupt_arm_nmi_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/arch/arm/arm_runtime_nmi frdm_k64f build_2ed3a6d arch.interrupt.arm.nmi tests/arch/arm/arm_runtime_nmi'''
        script {
          test_nmi_interrupt_arm_arch_interrupt_arm_nmi_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/arch/arm/arm_runtime_nmi/build_2ed3a6d arch.interrupt.arm.nmi '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/arch/arm/arm_runtime_nmi/build_2ed3a6d'
        script {
          test_nmi_interrupt_arm_arch_interrupt_arm_nmi_result = "SUCCESS"
        }
      }
      script {
        echo test_nmi_interrupt_arm_arch_interrupt_arm_nmi_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.arm.nmi', 'result': test_nmi_interrupt_arm_arch_interrupt_arm_nmi_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'arch.interrupt.arm.nmi', 'result': test_nmi_interrupt_arm_arch_interrupt_arm_nmi_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_notify_libraries_data_structures_result
   def test_notify_libraries_data_structures() {
      echo 'Test libraries.data_structures'
      echo 'libraries.data_structures'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_notify_libraries_data_structures_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/notify frdm_k64f build_e4f9029 libraries.data_structures tests/lib/notify'''
        script {
          test_notify_libraries_data_structures_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/notify/build_e4f9029 libraries.data_structures '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/notify/build_e4f9029'
        script {
          test_notify_libraries_data_structures_result = "SUCCESS"
        }
      }
      script {
        echo test_notify_libraries_data_structures_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.data_structures', 'result': test_notify_libraries_data_structures_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.data_structures', 'result': test_notify_libraries_data_structures_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_onoff_timer_libraries_onoff_result
   def test_onoff_timer_libraries_onoff() {
      echo 'Test libraries.onoff'
      echo 'libraries.onoff'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_onoff_timer_libraries_onoff_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/onoff frdm_k64f build_ee5a93e libraries.onoff tests/lib/onoff'''
        script {
          test_onoff_timer_libraries_onoff_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/onoff/build_ee5a93e libraries.onoff '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/onoff/build_ee5a93e'
        script {
          test_onoff_timer_libraries_onoff_result = "SUCCESS"
        }
      }
      script {
        echo test_onoff_timer_libraries_onoff_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.onoff', 'result': test_onoff_timer_libraries_onoff_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.onoff', 'result': test_onoff_timer_libraries_onoff_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_out_of_tree_sample_drivers_out_of_tree_result
   def test_out_of_tree_sample_drivers_out_of_tree() {
      echo 'Test sample.drivers.out_of_tree'
      echo 'sample.drivers.out_of_tree'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_out_of_tree_sample_drivers_out_of_tree_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/application_development/out_of_tree_driver frdm_k64f build_8a7a0cd sample.drivers.out_of_tree samples/application_development/out_of_tree_driver'''
        script {
          test_out_of_tree_sample_drivers_out_of_tree_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/application_development/out_of_tree_driver/build_8a7a0cd sample.drivers.out_of_tree '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/application_development/out_of_tree_driver/build_8a7a0cd'
        script {
          test_out_of_tree_sample_drivers_out_of_tree_result = "SUCCESS"
        }
      }
      script {
        echo test_out_of_tree_sample_drivers_out_of_tree_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.out_of_tree', 'result': test_out_of_tree_sample_drivers_out_of_tree_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.drivers.out_of_tree', 'result': test_out_of_tree_sample_drivers_out_of_tree_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_p4wq_lib_p4wq_result
   def test_p4wq_lib_p4wq() {
      echo 'Test lib.p4wq'
      echo 'lib.p4wq'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_p4wq_lib_p4wq_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/p4workq frdm_k64f build_c46f0e7 lib.p4wq tests/lib/p4workq'''
        script {
          test_p4wq_lib_p4wq_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/p4workq/build_c46f0e7 lib.p4wq '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/p4workq/build_c46f0e7'
        script {
          test_p4wq_lib_p4wq_result = "SUCCESS"
        }
      }
      script {
        echo test_p4wq_lib_p4wq_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'lib.p4wq', 'result': test_p4wq_lib_p4wq_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'lib.p4wq', 'result': test_p4wq_lib_p4wq_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_pm_subsys_pm_device_runtime_api_result
   def test_pm_subsys_pm_device_runtime_api() {
      echo 'Test subsys.pm.device_runtime_api'
      echo 'subsys.pm.device_runtime_api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_pm_subsys_pm_device_runtime_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/pm/device_runtime_api frdm_k64f build_9db0558 subsys.pm.device_runtime_api tests/subsys/pm/device_runtime_api'''
        script {
          test_pm_subsys_pm_device_runtime_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/pm/device_runtime_api/build_9db0558 subsys.pm.device_runtime_api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/pm/device_runtime_api/build_9db0558'
        script {
          test_pm_subsys_pm_device_runtime_api_result = "SUCCESS"
        }
      }
      script {
        echo test_pm_subsys_pm_device_runtime_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'subsys.pm.device_runtime_api', 'result': test_pm_subsys_pm_device_runtime_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'subsys.pm.device_runtime_api', 'result': test_pm_subsys_pm_device_runtime_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_sample_posix_eventfd_result
   def test_posix_sample_posix_eventfd() {
      echo 'Test sample.posix.eventfd'
      echo 'sample.posix.eventfd'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_sample_posix_eventfd_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/posix/eventfd frdm_k64f build_4c0046f sample.posix.eventfd samples/posix/eventfd'''
        script {
          test_posix_sample_posix_eventfd_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/posix/eventfd/build_4c0046f sample.posix.eventfd '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/posix/eventfd/build_4c0046f'
        script {
          test_posix_sample_posix_eventfd_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_sample_posix_eventfd_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.posix.eventfd', 'result': test_posix_sample_posix_eventfd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.posix.eventfd', 'result': test_posix_sample_posix_eventfd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_portability_posix_common_result
   def test_posix_portability_posix_common() {
      echo 'Test portability.posix.common'
      echo 'portability.posix.common'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_portability_posix_common_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/common frdm_k64f build_ef484cf -DCONFIG_NEWLIB_LIBC=n portability.posix.common tests/posix/common -DCONFIG_NEWLIB_LIBC=n'''
        script {
          test_posix_portability_posix_common_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/common/build_ef484cf portability.posix.common '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/common/build_ef484cf'
        script {
          test_posix_portability_posix_common_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_portability_posix_common_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.posix.common', 'result': test_posix_portability_posix_common_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.posix.common', 'result': test_posix_portability_posix_common_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_portability_posix_common_newlib_result
   def test_posix_portability_posix_common_newlib() {
      echo 'Test portability.posix.common.newlib'
      echo 'portability.posix.common.newlib'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_portability_posix_common_newlib_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/common frdm_k64f build_2683f5f -DCONFIG_NEWLIB_LIBC=y portability.posix.common.newlib tests/posix/common -DCONFIG_NEWLIB_LIBC=y'''
        script {
          test_posix_portability_posix_common_newlib_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/common/build_2683f5f portability.posix.common.newlib '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/common/build_2683f5f'
        script {
          test_posix_portability_posix_common_newlib_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_portability_posix_common_newlib_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.posix.common.newlib', 'result': test_posix_portability_posix_common_newlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.posix.common.newlib', 'result': test_posix_portability_posix_common_newlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_portability_posix_common_arcmwdtlib_result
   def test_posix_portability_posix_common_arcmwdtlib() {
      echo 'Test portability.posix.common.arcmwdtlib'
      echo 'portability.posix.common.arcmwdtlib'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_portability_posix_common_arcmwdtlib_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/common frdm_k64f build_10aeb4a -DCONFIG_ARCMWDT_LIBC=y portability.posix.common.arcmwdtlib tests/posix/common -DCONFIG_ARCMWDT_LIBC=y'''
        script {
          test_posix_portability_posix_common_arcmwdtlib_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/common/build_10aeb4a portability.posix.common.arcmwdtlib '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/common/build_10aeb4a'
        script {
          test_posix_portability_posix_common_arcmwdtlib_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_portability_posix_common_arcmwdtlib_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.posix.common.arcmwdtlib', 'result': test_posix_portability_posix_common_arcmwdtlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.posix.common.arcmwdtlib', 'result': test_posix_portability_posix_common_arcmwdtlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_filesystem_portability_posix_fs_result
   def test_posix_filesystem_portability_posix_fs() {
      echo 'Test portability.posix.fs'
      echo 'portability.posix.fs'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_filesystem_portability_posix_fs_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/fs frdm_k64f build_28b7e07 -DCONFIG_NEWLIB_LIBC=n portability.posix.fs tests/posix/fs -DCONFIG_NEWLIB_LIBC=n'''
        script {
          test_posix_filesystem_portability_posix_fs_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/fs/build_28b7e07 portability.posix.fs '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/fs/build_28b7e07'
        script {
          test_posix_filesystem_portability_posix_fs_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_filesystem_portability_posix_fs_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.posix.fs', 'result': test_posix_filesystem_portability_posix_fs_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.posix.fs', 'result': test_posix_filesystem_portability_posix_fs_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_filesystem_portability_posix_fs_newlib_result
   def test_posix_filesystem_portability_posix_fs_newlib() {
      echo 'Test portability.posix.fs.newlib'
      echo 'portability.posix.fs.newlib'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_filesystem_portability_posix_fs_newlib_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/fs frdm_k64f build_acd7e31 -DCONFIG_NEWLIB_LIBC=y portability.posix.fs.newlib tests/posix/fs -DCONFIG_NEWLIB_LIBC=y'''
        script {
          test_posix_filesystem_portability_posix_fs_newlib_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/fs/build_acd7e31 portability.posix.fs.newlib '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/fs/build_acd7e31'
        script {
          test_posix_filesystem_portability_posix_fs_newlib_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_filesystem_portability_posix_fs_newlib_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.posix.fs.newlib', 'result': test_posix_filesystem_portability_posix_fs_newlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.posix.fs.newlib', 'result': test_posix_filesystem_portability_posix_fs_newlib_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_pthread_eventfd_portability_posix_eventfd_result
   def test_posix_pthread_eventfd_portability_posix_eventfd() {
      echo 'Test portability.posix.eventfd'
      echo 'portability.posix.eventfd'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_pthread_eventfd_portability_posix_eventfd_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/eventfd frdm_k64f build_2d5093a portability.posix.eventfd tests/posix/eventfd'''
        script {
          test_posix_pthread_eventfd_portability_posix_eventfd_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/eventfd/build_2d5093a portability.posix.eventfd '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/eventfd/build_2d5093a'
        script {
          test_posix_pthread_eventfd_portability_posix_eventfd_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_pthread_eventfd_portability_posix_eventfd_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'portability.posix.eventfd', 'result': test_posix_pthread_eventfd_portability_posix_eventfd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'portability.posix.eventfd', 'result': test_posix_pthread_eventfd_portability_posix_eventfd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_pthread_eventfd_posix_eventfd_basic_result
   def test_posix_pthread_eventfd_posix_eventfd_basic() {
      echo 'Test posix.eventfd_basic'
      echo 'posix.eventfd_basic'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_pthread_eventfd_posix_eventfd_basic_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/eventfd_basic frdm_k64f build_b24acc8 -DCONFIG_POSIX_API=n posix.eventfd_basic tests/posix/eventfd_basic -DCONFIG_POSIX_API=n'''
        script {
          test_posix_pthread_eventfd_posix_eventfd_basic_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/eventfd_basic/build_b24acc8 posix.eventfd_basic '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/eventfd_basic/build_b24acc8'
        script {
          test_posix_pthread_eventfd_posix_eventfd_basic_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_pthread_eventfd_posix_eventfd_basic_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'posix.eventfd_basic', 'result': test_posix_pthread_eventfd_posix_eventfd_basic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'posix.eventfd_basic', 'result': test_posix_pthread_eventfd_posix_eventfd_basic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_posix_pthread_eventfd_posix_eventfd_basic_posix_api_result
   def test_posix_pthread_eventfd_posix_eventfd_basic_posix_api() {
      echo 'Test posix.eventfd_basic.posix_api'
      echo 'posix.eventfd_basic.posix_api'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_posix_pthread_eventfd_posix_eventfd_basic_posix_api_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/posix/eventfd_basic frdm_k64f build_a8a5537 -DCONFIG_POSIX_API=y posix.eventfd_basic.posix_api tests/posix/eventfd_basic -DCONFIG_POSIX_API=y'''
        script {
          test_posix_pthread_eventfd_posix_eventfd_basic_posix_api_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/posix/eventfd_basic/build_a8a5537 posix.eventfd_basic.posix_api '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/posix/eventfd_basic/build_a8a5537'
        script {
          test_posix_pthread_eventfd_posix_eventfd_basic_posix_api_result = "SUCCESS"
        }
      }
      script {
        echo test_posix_pthread_eventfd_posix_eventfd_basic_posix_api_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'posix.eventfd_basic.posix_api', 'result': test_posix_pthread_eventfd_posix_eventfd_basic_posix_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'posix.eventfd_basic.posix_api', 'result': test_posix_pthread_eventfd_posix_eventfd_basic_posix_api_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_ring_buffer_circular_buffer_libraries_ring_buffer_result
   def test_ring_buffer_circular_buffer_libraries_ring_buffer() {
      echo 'Test libraries.ring_buffer'
      echo 'libraries.ring_buffer'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_ring_buffer_circular_buffer_libraries_ring_buffer_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/lib/ringbuffer frdm_k64f build_4f8471b libraries.ring_buffer tests/lib/ringbuffer'''
        script {
          test_ring_buffer_circular_buffer_libraries_ring_buffer_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/lib/ringbuffer/build_4f8471b libraries.ring_buffer '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/lib/ringbuffer/build_4f8471b'
        script {
          test_ring_buffer_circular_buffer_libraries_ring_buffer_result = "SUCCESS"
        }
      }
      script {
        echo test_ring_buffer_circular_buffer_libraries_ring_buffer_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'libraries.ring_buffer', 'result': test_ring_buffer_circular_buffer_libraries_ring_buffer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'libraries.ring_buffer', 'result': test_ring_buffer_circular_buffer_libraries_ring_buffer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_samples_sample_sensor_iaqcore_result
   def test_samples_sample_sensor_iaqcore() {
      echo 'Test sample.sensor.iaqcore'
      echo 'sample.sensor.iaqcore'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_samples_sample_sensor_iaqcore_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/ams_iAQcore frdm_k64f build_ca20e70 sample.sensor.iaqcore samples/sensor/ams_iAQcore'''
        script {
          test_samples_sample_sensor_iaqcore_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/ams_iAQcore/build_ca20e70 sample.sensor.iaqcore '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/ams_iAQcore/build_ca20e70'
        script {
          test_samples_sample_sensor_iaqcore_result = "SUCCESS"
        }
      }
      script {
        echo test_samples_sample_sensor_iaqcore_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.iaqcore', 'result': test_samples_sample_sensor_iaqcore_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.iaqcore', 'result': test_samples_sample_sensor_iaqcore_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_samples_sample_sensor_ens210_result
   def test_samples_sample_sensor_ens210() {
      echo 'Test sample.sensor.ens210'
      echo 'sample.sensor.ens210'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_samples_sample_sensor_ens210_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/ens210 frdm_k64f build_11fe578 sample.sensor.ens210 samples/sensor/ens210'''
        script {
          test_samples_sample_sensor_ens210_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/ens210/build_11fe578 sample.sensor.ens210 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/ens210/build_11fe578'
        script {
          test_samples_sample_sensor_ens210_result = "SUCCESS"
        }
      }
      script {
        echo test_samples_sample_sensor_ens210_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.ens210', 'result': test_samples_sample_sensor_ens210_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.ens210', 'result': test_samples_sample_sensor_ens210_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_samples_nanopb_sample_modules_nanopb_result
   def test_samples_nanopb_sample_modules_nanopb() {
      echo 'Test sample.modules.nanopb'
      echo 'sample.modules.nanopb'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_samples_nanopb_sample_modules_nanopb_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/modules/nanopb frdm_k64f build_5a903ea sample.modules.nanopb samples/modules/nanopb'''
        script {
          test_samples_nanopb_sample_modules_nanopb_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/modules/nanopb/build_5a903ea sample.modules.nanopb '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/modules/nanopb/build_5a903ea'
        script {
          test_samples_nanopb_sample_modules_nanopb_result = "SUCCESS"
        }
      }
      script {
        echo test_samples_nanopb_sample_modules_nanopb_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.modules.nanopb', 'result': test_samples_nanopb_sample_modules_nanopb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.modules.nanopb', 'result': test_samples_nanopb_sample_modules_nanopb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_samples_sensor_sample_sensor_bmi270_result
   def test_samples_sensor_sample_sensor_bmi270() {
      echo 'Test sample.sensor.bmi270'
      echo 'sample.sensor.bmi270'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_samples_sensor_sample_sensor_bmi270_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/bmi270 frdm_k64f build_82a489e sample.sensor.bmi270 samples/sensor/bmi270'''
        script {
          test_samples_sensor_sample_sensor_bmi270_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/bmi270/build_82a489e sample.sensor.bmi270 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/bmi270/build_82a489e'
        script {
          test_samples_sensor_sample_sensor_bmi270_result = "SUCCESS"
        }
      }
      script {
        echo test_samples_sensor_sample_sensor_bmi270_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.bmi270', 'result': test_samples_sensor_sample_sensor_bmi270_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.bmi270', 'result': test_samples_sensor_sample_sensor_bmi270_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_adt7420_result
   def test_sensors_sample_sensor_adt7420() {
      echo 'Test sample.sensor.adt7420'
      echo 'sample.sensor.adt7420'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_adt7420_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/adt7420 frdm_k64f build_641d6b2 sample.sensor.adt7420 samples/sensor/adt7420'''
        script {
          test_sensors_sample_sensor_adt7420_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/adt7420/build_641d6b2 sample.sensor.adt7420 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/adt7420/build_641d6b2'
        script {
          test_sensors_sample_sensor_adt7420_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_adt7420_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.adt7420', 'result': test_sensors_sample_sensor_adt7420_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.adt7420', 'result': test_sensors_sample_sensor_adt7420_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_adxl372_i2c_result
   def test_sensors_sample_sensor_adxl372_i2c() {
      echo 'Test sample.sensor.adxl372.i2c'
      echo 'sample.sensor.adxl372.i2c'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_adxl372_i2c_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/adxl372 frdm_k64f build_7cf097e  -DCONF_FILE=prj_i2c.conf sample.sensor.adxl372.i2c samples/sensor/adxl372  -DCONF_FILE=prj_i2c.conf'''
        script {
          test_sensors_sample_sensor_adxl372_i2c_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/adxl372/build_7cf097e sample.sensor.adxl372.i2c '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/adxl372/build_7cf097e'
        script {
          test_sensors_sample_sensor_adxl372_i2c_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_adxl372_i2c_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.adxl372.i2c', 'result': test_sensors_sample_sensor_adxl372_i2c_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.adxl372.i2c', 'result': test_sensors_sample_sensor_adxl372_i2c_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_amg88xx_result
   def test_sensors_sample_sensor_amg88xx() {
      echo 'Test sample.sensor.amg88xx'
      echo 'sample.sensor.amg88xx'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_amg88xx_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/amg88xx frdm_k64f build_f57ca5a -DCONFIG_AMG88XX_TRIGGER_GLOBAL_THREAD=y sample.sensor.amg88xx samples/sensor/amg88xx -DCONFIG_AMG88XX_TRIGGER_GLOBAL_THREAD=y'''
        script {
          test_sensors_sample_sensor_amg88xx_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/amg88xx/build_f57ca5a'
        script {
          test_sensors_sample_sensor_amg88xx_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_amg88xx_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.amg88xx', 'result': test_sensors_sample_sensor_amg88xx_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.amg88xx', 'result': test_sensors_sample_sensor_amg88xx_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_dps310_result
   def test_sensors_sample_sensor_dps310() {
      echo 'Test sample.sensor.dps310'
      echo 'sample.sensor.dps310'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_dps310_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/dps310 frdm_k64f build_8f6fe47 sample.sensor.dps310 samples/sensor/dps310'''
        script {
          test_sensors_sample_sensor_dps310_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/dps310/build_8f6fe47 sample.sensor.dps310 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/dps310/build_8f6fe47'
        script {
          test_sensors_sample_sensor_dps310_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_dps310_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.dps310', 'result': test_sensors_sample_sensor_dps310_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.dps310', 'result': test_sensors_sample_sensor_dps310_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_fxos8700_hybrid_result
   def test_sensors_sample_sensor_fxos8700_hybrid() {
      echo 'Test sample.sensor.fxos8700.hybrid'
      echo 'sample.sensor.fxos8700.hybrid'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_fxos8700_hybrid_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/fxos8700 frdm_k64f build_0b5dbdf -DCONFIG_FXOS8700_PULSE=y -DCONFIG_FXOS8700_PULSE_INT1=y -DCONFIG_FXOS8700_MOTION=y -DCONFIG_FXOS8700_MOTION_INT1=y -DCONFIG_FXOS8700_MAG_VECM=y sample.sensor.fxos8700.hybrid samples/sensor/fxos8700 -DCONFIG_FXOS8700_PULSE=y -DCONFIG_FXOS8700_PULSE_INT1=y -DCONFIG_FXOS8700_MOTION=y -DCONFIG_FXOS8700_MOTION_INT1=y -DCONFIG_FXOS8700_MAG_VECM=y'''
        script {
          test_sensors_sample_sensor_fxos8700_hybrid_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/fxos8700/build_0b5dbdf sample.sensor.fxos8700.hybrid '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/fxos8700/build_0b5dbdf'
        script {
          test_sensors_sample_sensor_fxos8700_hybrid_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_fxos8700_hybrid_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.fxos8700.hybrid', 'result': test_sensors_sample_sensor_fxos8700_hybrid_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.fxos8700.hybrid', 'result': test_sensors_sample_sensor_fxos8700_hybrid_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_sht3xd_result
   def test_sensors_sample_sensor_sht3xd() {
      echo 'Test sample.sensor.sht3xd'
      echo 'sample.sensor.sht3xd'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_sht3xd_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/sht3xd frdm_k64f build_59942fa sample.sensor.sht3xd samples/sensor/sht3xd'''
        script {
          test_sensors_sample_sensor_sht3xd_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/sht3xd/build_59942fa'
        script {
          test_sensors_sample_sensor_sht3xd_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_sht3xd_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.sht3xd', 'result': test_sensors_sample_sensor_sht3xd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.sht3xd', 'result': test_sensors_sample_sensor_sht3xd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_sht3xd_trigger_result
   def test_sensors_sample_sensor_sht3xd_trigger() {
      echo 'Test sample.sensor.sht3xd.trigger'
      echo 'sample.sensor.sht3xd.trigger'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_sht3xd_trigger_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/sht3xd frdm_k64f build_5e111c3  -DCONF_FILE=trigger.conf sample.sensor.sht3xd.trigger samples/sensor/sht3xd  -DCONF_FILE=trigger.conf'''
        script {
          test_sensors_sample_sensor_sht3xd_trigger_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/sht3xd/build_5e111c3'
        script {
          test_sensors_sample_sensor_sht3xd_trigger_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_sht3xd_trigger_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.sht3xd.trigger', 'result': test_sensors_sample_sensor_sht3xd_trigger_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.sht3xd.trigger', 'result': test_sensors_sample_sensor_sht3xd_trigger_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_sensors_sample_sensor_thermometer_result
   def test_sensors_sample_sensor_thermometer() {
      echo 'Test sample.sensor.thermometer'
      echo 'sample.sensor.thermometer'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_sensors_sample_sensor_thermometer_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/thermometer frdm_k64f build_d276267 sample.sensor.thermometer samples/sensor/thermometer'''
        script {
          test_sensors_sample_sensor_thermometer_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/thermometer/build_d276267 sample.sensor.thermometer '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/thermometer/build_d276267'
        script {
          test_sensors_sample_sensor_thermometer_result = "SUCCESS"
        }
      }
      script {
        echo test_sensors_sample_sensor_thermometer_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.thermometer', 'result': test_sensors_sample_sensor_thermometer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.thermometer', 'result': test_sensors_sample_sensor_thermometer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_settings_sample_nvs_basic_result
   def test_settings_sample_nvs_basic() {
      echo 'Test sample.nvs.basic'
      echo 'sample.nvs.basic'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_settings_sample_nvs_basic_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/nvs frdm_k64f build_970c6d2 sample.nvs.basic samples/subsys/nvs'''
        script {
          test_settings_sample_nvs_basic_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/nvs/build_970c6d2 sample.nvs.basic '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/nvs/build_970c6d2'
        script {
          test_settings_sample_nvs_basic_result = "SUCCESS"
        }
      }
      script {
        echo test_settings_sample_nvs_basic_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.nvs.basic', 'result': test_settings_sample_nvs_basic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.nvs.basic', 'result': test_settings_sample_nvs_basic_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_settings_nvs_system_settings_nvs_result
   def test_settings_nvs_system_settings_nvs() {
      echo 'Test system.settings.nvs'
      echo 'system.settings.nvs'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_settings_nvs_system_settings_nvs_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/settings/nvs/raw frdm_k64f build_84e2fd3 system.settings.nvs tests/subsys/settings/nvs/raw'''
        script {
          test_settings_nvs_system_settings_nvs_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/settings/nvs/raw/build_84e2fd3 system.settings.nvs '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/settings/nvs/raw/build_84e2fd3'
        script {
          test_settings_nvs_system_settings_nvs_result = "SUCCESS"
        }
      }
      script {
        echo test_settings_nvs_system_settings_nvs_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'system.settings.nvs', 'result': test_settings_nvs_system_settings_nvs_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'system.settings.nvs', 'result': test_settings_nvs_system_settings_nvs_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_sample_shell_shell_module_minimal_rtt_result
   def test_shell_sample_shell_shell_module_minimal_rtt() {
      echo 'Test sample.shell.shell_module.minimal_rtt'
      echo 'sample.shell.shell_module.minimal_rtt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_sample_shell_shell_module_minimal_rtt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/shell/shell_module frdm_k64f build_0b5c79d  -DCONF_FILE=prj_minimal_rtt.conf sample.shell.shell_module.minimal_rtt samples/subsys/shell/shell_module  -DCONF_FILE=prj_minimal_rtt.conf'''
        script {
          test_shell_sample_shell_shell_module_minimal_rtt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/shell/shell_module/build_0b5c79d sample.shell.shell_module.minimal_rtt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/shell/shell_module/build_0b5c79d'
        script {
          test_shell_sample_shell_shell_module_minimal_rtt_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_sample_shell_shell_module_minimal_rtt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shell.shell_module.minimal_rtt', 'result': test_shell_sample_shell_shell_module_minimal_rtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shell.shell_module.minimal_rtt', 'result': test_shell_sample_shell_shell_module_minimal_rtt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_core_result
   def test_shell_shell_core() {
      echo 'Test shell.core'
      echo 'shell.core'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_core_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_8e6e152 shell.core tests/subsys/shell/shell'''
        script {
          test_shell_shell_core_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/shell/shell/build_8e6e152 shell.core '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_8e6e152'
        script {
          test_shell_shell_core_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_core_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.core', 'result': test_shell_shell_core_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.core', 'result': test_shell_shell_core_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_result
   def test_shell_shell_min() {
      echo 'Test shell.min'
      echo 'shell.min'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_8c6735a  -DCONF_FILE=shell_min.conf shell.min tests/subsys/shell/shell  -DCONF_FILE=shell_min.conf'''
        script {
          test_shell_shell_min_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_8c6735a'
        script {
          test_shell_shell_min_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min', 'result': test_shell_shell_min_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min', 'result': test_shell_shell_min_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_cmds_result
   def test_shell_shell_min_cmds() {
      echo 'Test shell.min_cmds'
      echo 'shell.min_cmds'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_cmds_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_1d17cc0  -DCONF_FILE=shell_min_cmds.conf shell.min_cmds tests/subsys/shell/shell  -DCONF_FILE=shell_min_cmds.conf'''
        script {
          test_shell_shell_min_cmds_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_1d17cc0'
        script {
          test_shell_shell_min_cmds_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_cmds_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds', 'result': test_shell_shell_min_cmds_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds', 'result': test_shell_shell_min_cmds_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_cmds_all_result
   def test_shell_shell_min_cmds_all() {
      echo 'Test shell.min_cmds_all'
      echo 'shell.min_cmds_all'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_cmds_all_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_567572f  -DCONF_FILE=shell_min_cmds_all.conf shell.min_cmds_all tests/subsys/shell/shell  -DCONF_FILE=shell_min_cmds_all.conf'''
        script {
          test_shell_shell_min_cmds_all_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_567572f'
        script {
          test_shell_shell_min_cmds_all_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_cmds_all_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds_all', 'result': test_shell_shell_min_cmds_all_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds_all', 'result': test_shell_shell_min_cmds_all_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_cmds_resize_result
   def test_shell_shell_min_cmds_resize() {
      echo 'Test shell.min_cmds_resize'
      echo 'shell.min_cmds_resize'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_cmds_resize_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_38e56a8  -DCONF_FILE=shell_min_cmds_resize.conf shell.min_cmds_resize tests/subsys/shell/shell  -DCONF_FILE=shell_min_cmds_resize.conf'''
        script {
          test_shell_shell_min_cmds_resize_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_38e56a8'
        script {
          test_shell_shell_min_cmds_resize_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_cmds_resize_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds_resize', 'result': test_shell_shell_min_cmds_resize_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds_resize', 'result': test_shell_shell_min_cmds_resize_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_cmds_select_result
   def test_shell_shell_min_cmds_select() {
      echo 'Test shell.min_cmds_select'
      echo 'shell.min_cmds_select'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_cmds_select_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_8590e26  -DCONF_FILE=shell_min_cmds_select.conf shell.min_cmds_select tests/subsys/shell/shell  -DCONF_FILE=shell_min_cmds_select.conf'''
        script {
          test_shell_shell_min_cmds_select_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_8590e26'
        script {
          test_shell_shell_min_cmds_select_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_cmds_select_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds_select', 'result': test_shell_shell_min_cmds_select_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_cmds_select', 'result': test_shell_shell_min_cmds_select_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_colors_result
   def test_shell_shell_min_colors() {
      echo 'Test shell.min_colors'
      echo 'shell.min_colors'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_colors_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_da1e88c  -DCONF_FILE=shell_min_colors.conf shell.min_colors tests/subsys/shell/shell  -DCONF_FILE=shell_min_colors.conf'''
        script {
          test_shell_shell_min_colors_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_da1e88c'
        script {
          test_shell_shell_min_colors_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_colors_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_colors', 'result': test_shell_shell_min_colors_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_colors', 'result': test_shell_shell_min_colors_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_help_result
   def test_shell_shell_min_help() {
      echo 'Test shell.min_help'
      echo 'shell.min_help'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_help_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_71023f8  -DCONF_FILE=shell_min_help.conf shell.min_help tests/subsys/shell/shell  -DCONF_FILE=shell_min_help.conf'''
        script {
          test_shell_shell_min_help_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_71023f8'
        script {
          test_shell_shell_min_help_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_help_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_help', 'result': test_shell_shell_min_help_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_help', 'result': test_shell_shell_min_help_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_help_all_result
   def test_shell_shell_min_help_all() {
      echo 'Test shell.min_help_all'
      echo 'shell.min_help_all'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_help_all_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_6074de3  -DCONF_FILE=shell_min_help_all.conf shell.min_help_all tests/subsys/shell/shell  -DCONF_FILE=shell_min_help_all.conf'''
        script {
          test_shell_shell_min_help_all_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_6074de3'
        script {
          test_shell_shell_min_help_all_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_help_all_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_help_all', 'result': test_shell_shell_min_help_all_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_help_all', 'result': test_shell_shell_min_help_all_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_history_result
   def test_shell_shell_min_history() {
      echo 'Test shell.min_history'
      echo 'shell.min_history'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_history_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_90a382c  -DCONF_FILE=shell_min_history.conf shell.min_history tests/subsys/shell/shell  -DCONF_FILE=shell_min_history.conf'''
        script {
          test_shell_shell_min_history_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_90a382c'
        script {
          test_shell_shell_min_history_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_history_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_history', 'result': test_shell_shell_min_history_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_history', 'result': test_shell_shell_min_history_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_log_backend_result
   def test_shell_shell_min_log_backend() {
      echo 'Test shell.min_log_backend'
      echo 'shell.min_log_backend'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_log_backend_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_c2eec9e  -DCONF_FILE=shell_min_log_backend.conf shell.min_log_backend tests/subsys/shell/shell  -DCONF_FILE=shell_min_log_backend.conf'''
        script {
          test_shell_shell_min_log_backend_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_c2eec9e'
        script {
          test_shell_shell_min_log_backend_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_log_backend_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_log_backend', 'result': test_shell_shell_min_log_backend_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_log_backend', 'result': test_shell_shell_min_log_backend_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_metakeys_result
   def test_shell_shell_min_metakeys() {
      echo 'Test shell.min_metakeys'
      echo 'shell.min_metakeys'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_metakeys_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_88eaa3c  -DCONF_FILE=shell_min_metakeys.conf shell.min_metakeys tests/subsys/shell/shell  -DCONF_FILE=shell_min_metakeys.conf'''
        script {
          test_shell_shell_min_metakeys_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_88eaa3c'
        script {
          test_shell_shell_min_metakeys_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_metakeys_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_metakeys', 'result': test_shell_shell_min_metakeys_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_metakeys', 'result': test_shell_shell_min_metakeys_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_tab_result
   def test_shell_shell_min_tab() {
      echo 'Test shell.min_tab'
      echo 'shell.min_tab'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_tab_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_fdc8b76  -DCONF_FILE=shell_min_tab.conf shell.min_tab tests/subsys/shell/shell  -DCONF_FILE=shell_min_tab.conf'''
        script {
          test_shell_shell_min_tab_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_fdc8b76'
        script {
          test_shell_shell_min_tab_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_tab_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_tab', 'result': test_shell_shell_min_tab_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_tab', 'result': test_shell_shell_min_tab_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_tab_auto_result
   def test_shell_shell_min_tab_auto() {
      echo 'Test shell.min_tab_auto'
      echo 'shell.min_tab_auto'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_tab_auto_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_18d35bb  -DCONF_FILE=shell_min_tab_auto.conf shell.min_tab_auto tests/subsys/shell/shell  -DCONF_FILE=shell_min_tab_auto.conf'''
        script {
          test_shell_shell_min_tab_auto_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_18d35bb'
        script {
          test_shell_shell_min_tab_auto_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_tab_auto_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_tab_auto', 'result': test_shell_shell_min_tab_auto_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_tab_auto', 'result': test_shell_shell_min_tab_auto_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_shell_min_wildcards_result
   def test_shell_shell_min_wildcards() {
      echo 'Test shell.min_wildcards'
      echo 'shell.min_wildcards'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_shell_min_wildcards_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/shell/shell frdm_k64f build_04da851  -DCONF_FILE=shell_min_wildcards.conf shell.min_wildcards tests/subsys/shell/shell  -DCONF_FILE=shell_min_wildcards.conf'''
        script {
          test_shell_shell_min_wildcards_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/shell/shell/build_04da851'
        script {
          test_shell_shell_min_wildcards_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_shell_min_wildcards_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'shell.min_wildcards', 'result': test_shell_shell_min_wildcards_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'shell.min_wildcards', 'result': test_shell_shell_min_wildcards_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shell_usb_sample_shell_shell_module_usb_result
   def test_shell_usb_sample_shell_shell_module_usb() {
      echo 'Test sample.shell.shell_module.usb'
      echo 'sample.shell.shell_module.usb'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shell_usb_sample_shell_shell_module_usb_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/shell/shell_module frdm_k64f build_41940bb  -DOVERLAY_CONFIG=overlay-usb.conf -DDTC_OVERLAY_FILE=usb.overlay sample.shell.shell_module.usb samples/subsys/shell/shell_module  -DOVERLAY_CONFIG=overlay-usb.conf -DDTC_OVERLAY_FILE=usb.overlay'''
        script {
          test_shell_usb_sample_shell_shell_module_usb_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/shell/shell_module/build_41940bb sample.shell.shell_module.usb '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/shell/shell_module/build_41940bb'
        script {
          test_shell_usb_sample_shell_shell_module_usb_result = "SUCCESS"
        }
      }
      script {
        echo test_shell_usb_sample_shell_shell_module_usb_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shell.shell_module.usb', 'result': test_shell_usb_sample_shell_shell_module_usb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shell.shell_module.usb', 'result': test_shell_usb_sample_shell_shell_module_usb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_lmp90100_evb_rtd_result
   def test_shield_sample_shields_lmp90100_evb_rtd() {
      echo 'Test sample.shields.lmp90100_evb.rtd'
      echo 'sample.shields.lmp90100_evb.rtd'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_lmp90100_evb_rtd_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/lmp90100_evb/rtd frdm_k64f build_f24b27e sample.shields.lmp90100_evb.rtd samples/shields/lmp90100_evb/rtd'''
        script {
          test_shield_sample_shields_lmp90100_evb_rtd_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/lmp90100_evb/rtd/build_f24b27e sample.shields.lmp90100_evb.rtd '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/lmp90100_evb/rtd/build_f24b27e'
        script {
          test_shield_sample_shields_lmp90100_evb_rtd_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_lmp90100_evb_rtd_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.lmp90100_evb.rtd', 'result': test_shield_sample_shields_lmp90100_evb_rtd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.lmp90100_evb.rtd', 'result': test_shield_sample_shields_lmp90100_evb_rtd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_x_nucleo_iks01a1_result
   def test_shield_sample_shields_x_nucleo_iks01a1() {
      echo 'Test sample.shields.x_nucleo_iks01a1'
      echo 'sample.shields.x_nucleo_iks01a1'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_x_nucleo_iks01a1_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/x_nucleo_iks01a1 frdm_k64f build_4dedc01 sample.shields.x_nucleo_iks01a1 samples/shields/x_nucleo_iks01a1'''
        script {
          test_shield_sample_shields_x_nucleo_iks01a1_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/x_nucleo_iks01a1/build_4dedc01 sample.shields.x_nucleo_iks01a1 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/x_nucleo_iks01a1/build_4dedc01'
        script {
          test_shield_sample_shields_x_nucleo_iks01a1_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_x_nucleo_iks01a1_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a1', 'result': test_shield_sample_shields_x_nucleo_iks01a1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a1', 'result': test_shield_sample_shields_x_nucleo_iks01a1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_x_nucleo_iks01a2_sensorhub_result
   def test_shield_sample_shields_x_nucleo_iks01a2_sensorhub() {
      echo 'Test sample.shields.x_nucleo_iks01a2.sensorhub'
      echo 'sample.shields.x_nucleo_iks01a2.sensorhub'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_x_nucleo_iks01a2_sensorhub_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/x_nucleo_iks01a2/sensorhub frdm_k64f build_cb7285e sample.shields.x_nucleo_iks01a2.sensorhub samples/shields/x_nucleo_iks01a2/sensorhub'''
        script {
          test_shield_sample_shields_x_nucleo_iks01a2_sensorhub_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/x_nucleo_iks01a2/sensorhub/build_cb7285e sample.shields.x_nucleo_iks01a2.sensorhub '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/x_nucleo_iks01a2/sensorhub/build_cb7285e'
        script {
          test_shield_sample_shields_x_nucleo_iks01a2_sensorhub_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_x_nucleo_iks01a2_sensorhub_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a2.sensorhub', 'result': test_shield_sample_shields_x_nucleo_iks01a2_sensorhub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a2.sensorhub', 'result': test_shield_sample_shields_x_nucleo_iks01a2_sensorhub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_x_nucleo_iks01a2_standard_result
   def test_shield_sample_shields_x_nucleo_iks01a2_standard() {
      echo 'Test sample.shields.x_nucleo_iks01a2.standard'
      echo 'sample.shields.x_nucleo_iks01a2.standard'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_x_nucleo_iks01a2_standard_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/x_nucleo_iks01a2/standard frdm_k64f build_f1590bf sample.shields.x_nucleo_iks01a2.standard samples/shields/x_nucleo_iks01a2/standard'''
        script {
          test_shield_sample_shields_x_nucleo_iks01a2_standard_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/x_nucleo_iks01a2/standard/build_f1590bf sample.shields.x_nucleo_iks01a2.standard '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/x_nucleo_iks01a2/standard/build_f1590bf'
        script {
          test_shield_sample_shields_x_nucleo_iks01a2_standard_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_x_nucleo_iks01a2_standard_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a2.standard', 'result': test_shield_sample_shields_x_nucleo_iks01a2_standard_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a2.standard', 'result': test_shield_sample_shields_x_nucleo_iks01a2_standard_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_x_nucleo_iks01a3_sensorhub_result
   def test_shield_sample_shields_x_nucleo_iks01a3_sensorhub() {
      echo 'Test sample.shields.x_nucleo_iks01a3.sensorhub'
      echo 'sample.shields.x_nucleo_iks01a3.sensorhub'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_x_nucleo_iks01a3_sensorhub_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/x_nucleo_iks01a3/sensorhub frdm_k64f build_1322d16 sample.shields.x_nucleo_iks01a3.sensorhub samples/shields/x_nucleo_iks01a3/sensorhub'''
        script {
          test_shield_sample_shields_x_nucleo_iks01a3_sensorhub_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/x_nucleo_iks01a3/sensorhub/build_1322d16 sample.shields.x_nucleo_iks01a3.sensorhub '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/x_nucleo_iks01a3/sensorhub/build_1322d16'
        script {
          test_shield_sample_shields_x_nucleo_iks01a3_sensorhub_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_x_nucleo_iks01a3_sensorhub_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a3.sensorhub', 'result': test_shield_sample_shields_x_nucleo_iks01a3_sensorhub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a3.sensorhub', 'result': test_shield_sample_shields_x_nucleo_iks01a3_sensorhub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_x_nucleo_iks01a3_standard_result
   def test_shield_sample_shields_x_nucleo_iks01a3_standard() {
      echo 'Test sample.shields.x_nucleo_iks01a3.standard'
      echo 'sample.shields.x_nucleo_iks01a3.standard'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_x_nucleo_iks01a3_standard_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/x_nucleo_iks01a3/standard frdm_k64f build_bd0353c sample.shields.x_nucleo_iks01a3.standard samples/shields/x_nucleo_iks01a3/standard'''
        script {
          test_shield_sample_shields_x_nucleo_iks01a3_standard_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/x_nucleo_iks01a3/standard/build_bd0353c sample.shields.x_nucleo_iks01a3.standard '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/x_nucleo_iks01a3/standard/build_bd0353c'
        script {
          test_shield_sample_shields_x_nucleo_iks01a3_standard_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_x_nucleo_iks01a3_standard_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a3.standard', 'result': test_shield_sample_shields_x_nucleo_iks01a3_standard_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks01a3.standard', 'result': test_shield_sample_shields_x_nucleo_iks01a3_standard_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_x_nucleo_iks02a1_sensorhub_result
   def test_shield_sample_shields_x_nucleo_iks02a1_sensorhub() {
      echo 'Test sample.shields.x_nucleo_iks02a1.sensorhub'
      echo 'sample.shields.x_nucleo_iks02a1.sensorhub'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_x_nucleo_iks02a1_sensorhub_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/x_nucleo_iks02a1/sensorhub frdm_k64f build_c33c089 sample.shields.x_nucleo_iks02a1.sensorhub samples/shields/x_nucleo_iks02a1/sensorhub'''
        script {
          test_shield_sample_shields_x_nucleo_iks02a1_sensorhub_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/x_nucleo_iks02a1/sensorhub/build_c33c089 sample.shields.x_nucleo_iks02a1.sensorhub '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/x_nucleo_iks02a1/sensorhub/build_c33c089'
        script {
          test_shield_sample_shields_x_nucleo_iks02a1_sensorhub_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_x_nucleo_iks02a1_sensorhub_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks02a1.sensorhub', 'result': test_shield_sample_shields_x_nucleo_iks02a1_sensorhub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks02a1.sensorhub', 'result': test_shield_sample_shields_x_nucleo_iks02a1_sensorhub_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_shields_x_nucleo_iks02a1_standard_result
   def test_shield_sample_shields_x_nucleo_iks02a1_standard() {
      echo 'Test sample.shields.x_nucleo_iks02a1.standard'
      echo 'sample.shields.x_nucleo_iks02a1.standard'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_shields_x_nucleo_iks02a1_standard_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/shields/x_nucleo_iks02a1/standard frdm_k64f build_ed76956 sample.shields.x_nucleo_iks02a1.standard samples/shields/x_nucleo_iks02a1/standard'''
        script {
          test_shield_sample_shields_x_nucleo_iks02a1_standard_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/shields/x_nucleo_iks02a1/standard/build_ed76956 sample.shields.x_nucleo_iks02a1.standard '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/shields/x_nucleo_iks02a1/standard/build_ed76956'
        script {
          test_shield_sample_shields_x_nucleo_iks02a1_standard_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_shields_x_nucleo_iks02a1_standard_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks02a1.standard', 'result': test_shield_sample_shields_x_nucleo_iks02a1_standard_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.shields.x_nucleo_iks02a1.standard', 'result': test_shield_sample_shields_x_nucleo_iks02a1_standard_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_display_cfb_ssd1306_result
   def test_shield_sample_display_cfb_ssd1306() {
      echo 'Test sample.display.cfb.ssd1306'
      echo 'sample.display.cfb.ssd1306'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_display_cfb_ssd1306_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/display/cfb frdm_k64f build_186251b  -DSHIELD=ssd1306_128x64 sample.display.cfb.ssd1306 samples/subsys/display/cfb  -DSHIELD=ssd1306_128x64'''
        script {
          test_shield_sample_display_cfb_ssd1306_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/display/cfb/build_186251b sample.display.cfb.ssd1306 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/display/cfb/build_186251b'
        script {
          test_shield_sample_display_cfb_ssd1306_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_display_cfb_ssd1306_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.display.cfb.ssd1306', 'result': test_shield_sample_display_cfb_ssd1306_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.display.cfb.ssd1306', 'result': test_shield_sample_display_cfb_ssd1306_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_display_cfb_shell_ssd1306_result
   def test_shield_sample_display_cfb_shell_ssd1306() {
      echo 'Test sample.display.cfb_shell.ssd1306'
      echo 'sample.display.cfb_shell.ssd1306'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_display_cfb_shell_ssd1306_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/display/cfb_shell frdm_k64f build_3987eed  -DSHIELD=ssd1306_128x32 sample.display.cfb_shell.ssd1306 samples/subsys/display/cfb_shell  -DSHIELD=ssd1306_128x32'''
        script {
          test_shield_sample_display_cfb_shell_ssd1306_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/display/cfb_shell/build_3987eed sample.display.cfb_shell.ssd1306 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/display/cfb_shell/build_3987eed'
        script {
          test_shield_sample_display_cfb_shell_ssd1306_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_display_cfb_shell_ssd1306_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.display.cfb_shell.ssd1306', 'result': test_shield_sample_display_cfb_shell_ssd1306_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.display.cfb_shell.ssd1306', 'result': test_shield_sample_display_cfb_shell_ssd1306_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_display_adafruit_2_8_tft_touch_v2_result
   def test_shield_sample_display_adafruit_2_8_tft_touch_v2() {
      echo 'Test sample.display.adafruit_2_8_tft_touch_v2'
      echo 'sample.display.adafruit_2_8_tft_touch_v2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_display_adafruit_2_8_tft_touch_v2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/display/lvgl frdm_k64f build_956cad8  -DSHIELD=adafruit_2_8_tft_touch_v2 sample.display.adafruit_2_8_tft_touch_v2 samples/subsys/display/lvgl  -DSHIELD=adafruit_2_8_tft_touch_v2'''
        script {
          test_shield_sample_display_adafruit_2_8_tft_touch_v2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/display/lvgl/build_956cad8 sample.display.adafruit_2_8_tft_touch_v2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/display/lvgl/build_956cad8'
        script {
          test_shield_sample_display_adafruit_2_8_tft_touch_v2_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_display_adafruit_2_8_tft_touch_v2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.display.adafruit_2_8_tft_touch_v2', 'result': test_shield_sample_display_adafruit_2_8_tft_touch_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.display.adafruit_2_8_tft_touch_v2', 'result': test_shield_sample_display_adafruit_2_8_tft_touch_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2_result
   def test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2() {
      echo 'Test sample.filesystem.fat_fs.adafruit_2_8_tft_touch_v2'
      echo 'sample.filesystem.fat_fs.adafruit_2_8_tft_touch_v2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/fs/fat_fs frdm_k64f build_6e4c635  -DSHIELD=adafruit_2_8_tft_touch_v2 sample.filesystem.fat_fs.adafruit_2_8_tft_touch_v2 samples/subsys/fs/fat_fs  -DSHIELD=adafruit_2_8_tft_touch_v2'''
        script {
          test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/fs/fat_fs/build_6e4c635 sample.filesystem.fat_fs.adafruit_2_8_tft_touch_v2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/fs/fat_fs/build_6e4c635'
        script {
          test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2_result = "SUCCESS"
        }
      }
      script {
        echo test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.filesystem.fat_fs.adafruit_2_8_tft_touch_v2', 'result': test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.filesystem.fat_fs.adafruit_2_8_tft_touch_v2', 'result': test_shield_sample_filesystem_fat_fs_adafruit_2_8_tft_touch_v2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_subsys_sample_subsys_task_wdt_result
   def test_subsys_sample_subsys_task_wdt() {
      echo 'Test sample.subsys.task_wdt'
      echo 'sample.subsys.task_wdt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_subsys_sample_subsys_task_wdt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/task_wdt frdm_k64f build_7429158 sample.subsys.task_wdt samples/subsys/task_wdt'''
        script {
          test_subsys_sample_subsys_task_wdt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/task_wdt/build_7429158 sample.subsys.task_wdt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/task_wdt/build_7429158'
        script {
          test_subsys_sample_subsys_task_wdt_result = "SUCCESS"
        }
      }
      script {
        echo test_subsys_sample_subsys_task_wdt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.subsys.task_wdt', 'result': test_subsys_sample_subsys_task_wdt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.subsys.task_wdt', 'result': test_subsys_sample_subsys_task_wdt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_synchronization_sample_kernel_synchronization_result
   def test_synchronization_sample_kernel_synchronization() {
      echo 'Test sample.kernel.synchronization'
      echo 'sample.kernel.synchronization'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_synchronization_sample_kernel_synchronization_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/synchronization frdm_k64f build_8e21259 sample.kernel.synchronization samples/synchronization'''
        script {
          test_synchronization_sample_kernel_synchronization_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/synchronization/build_8e21259 sample.kernel.synchronization '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/synchronization/build_8e21259'
        script {
          test_synchronization_sample_kernel_synchronization_result = "SUCCESS"
        }
      }
      script {
        echo test_synchronization_sample_kernel_synchronization_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.synchronization', 'result': test_synchronization_sample_kernel_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.synchronization', 'result': test_synchronization_sample_kernel_synchronization_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_tcp_samples_net_sockets_tcp_result
   def test_tcp_samples_net_sockets_tcp() {
      echo 'Test samples.net.sockets.tcp'
      echo 'samples.net.sockets.tcp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_tcp_samples_net_sockets_tcp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/tcp frdm_k64f build_8c23ff7 samples.net.sockets.tcp samples/net/sockets/tcp'''
        script {
          test_tcp_samples_net_sockets_tcp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/tcp/build_8c23ff7 samples.net.sockets.tcp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/tcp/build_8c23ff7'
        script {
          test_tcp_samples_net_sockets_tcp_result = "SUCCESS"
        }
      }
      script {
        echo test_tcp_samples_net_sockets_tcp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'samples.net.sockets.tcp', 'result': test_tcp_samples_net_sockets_tcp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'samples.net.sockets.tcp', 'result': test_tcp_samples_net_sockets_tcp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_register_result
   def test_test_framework_testing_ztest_register() {
      echo 'Test testing.ztest.register'
      echo 'testing.ztest.register'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_register_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) . frdm_k64f build_fa542ba testing.ztest.register .'''
        script {
          test_test_framework_testing_ztest_register_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) ./build_fa542ba testing.ztest.register '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/./build_fa542ba'
        script {
          test_test_framework_testing_ztest_register_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_register_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.register', 'result': test_test_framework_testing_ztest_register_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.register', 'result': test_test_framework_testing_ztest_register_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_automain_result
   def test_test_framework_testing_ztest_automain() {
      echo 'Test testing.ztest.automain'
      echo 'testing.ztest.automain'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_automain_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/automain frdm_k64f build_5208ba7 testing.ztest.automain tests/ztest/automain'''
        script {
          test_test_framework_testing_ztest_automain_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/automain/build_5208ba7 testing.ztest.automain '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/automain/build_5208ba7'
        script {
          test_test_framework_testing_ztest_automain_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_automain_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.automain', 'result': test_test_framework_testing_ztest_automain_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.automain', 'result': test_test_framework_testing_ztest_automain_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_verbose_0_result
   def test_test_framework_testing_ztest_verbose_0() {
      echo 'Test testing.ztest.verbose_0'
      echo 'testing.ztest.verbose_0'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_verbose_0_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/base frdm_k64f build_971e553  -DCONF_FILE=prj_verbose_0.conf testing.ztest.verbose_0 tests/ztest/base  -DCONF_FILE=prj_verbose_0.conf'''
        script {
          test_test_framework_testing_ztest_verbose_0_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/base/build_971e553 testing.ztest.verbose_0 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/base/build_971e553'
        script {
          test_test_framework_testing_ztest_verbose_0_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_verbose_0_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.verbose_0', 'result': test_test_framework_testing_ztest_verbose_0_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.verbose_0', 'result': test_test_framework_testing_ztest_verbose_0_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_verbose_1_result
   def test_test_framework_testing_ztest_verbose_1() {
      echo 'Test testing.ztest.verbose_1'
      echo 'testing.ztest.verbose_1'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_verbose_1_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/base frdm_k64f build_fdb51ad  -DCONF_FILE=prj_verbose_1.conf testing.ztest.verbose_1 tests/ztest/base  -DCONF_FILE=prj_verbose_1.conf'''
        script {
          test_test_framework_testing_ztest_verbose_1_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/base/build_fdb51ad testing.ztest.verbose_1 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/base/build_fdb51ad'
        script {
          test_test_framework_testing_ztest_verbose_1_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_verbose_1_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.verbose_1', 'result': test_test_framework_testing_ztest_verbose_1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.verbose_1', 'result': test_test_framework_testing_ztest_verbose_1_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_verbose_2_result
   def test_test_framework_testing_ztest_verbose_2() {
      echo 'Test testing.ztest.verbose_2'
      echo 'testing.ztest.verbose_2'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_verbose_2_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/base frdm_k64f build_70ed96a  -DCONF_FILE=prj_verbose_2.conf testing.ztest.verbose_2 tests/ztest/base  -DCONF_FILE=prj_verbose_2.conf'''
        script {
          test_test_framework_testing_ztest_verbose_2_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/base/build_70ed96a testing.ztest.verbose_2 '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/base/build_70ed96a'
        script {
          test_test_framework_testing_ztest_verbose_2_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_verbose_2_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.verbose_2', 'result': test_test_framework_testing_ztest_verbose_2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.verbose_2', 'result': test_test_framework_testing_ztest_verbose_2_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_regular_output_result
   def test_test_framework_testing_ztest_regular_output() {
      echo 'Test testing.ztest.regular_output'
      echo 'testing.ztest.regular_output'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_regular_output_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/custom_output frdm_k64f build_56f76bb testing.ztest.regular_output tests/ztest/custom_output'''
        script {
          test_test_framework_testing_ztest_regular_output_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/custom_output/build_56f76bb testing.ztest.regular_output '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/custom_output/build_56f76bb'
        script {
          test_test_framework_testing_ztest_regular_output_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_regular_output_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.regular_output', 'result': test_test_framework_testing_ztest_regular_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.regular_output', 'result': test_test_framework_testing_ztest_regular_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_customized_output_result
   def test_test_framework_testing_ztest_customized_output() {
      echo 'Test testing.ztest.customized_output'
      echo 'testing.ztest.customized_output'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_customized_output_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/custom_output frdm_k64f build_aca2789  -DCONF_FILE=prj_customized_output.conf testing.ztest.customized_output tests/ztest/custom_output  -DCONF_FILE=prj_customized_output.conf'''
        script {
          test_test_framework_testing_ztest_customized_output_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/custom_output/build_aca2789 testing.ztest.customized_output '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/custom_output/build_aca2789'
        script {
          test_test_framework_testing_ztest_customized_output_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_customized_output_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.customized_output', 'result': test_test_framework_testing_ztest_customized_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.customized_output', 'result': test_test_framework_testing_ztest_customized_output_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_testing_ztest_register_register_result
   def test_test_framework_testing_ztest_register_register() {
      echo 'Test testing.ztest.register.register'
      echo 'testing.ztest.register.register'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_testing_ztest_register_register_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/register frdm_k64f build_f91815f testing.ztest.register.register tests/ztest/register'''
        script {
          test_test_framework_testing_ztest_register_register_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/register/build_f91815f testing.ztest.register.register '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/register/build_f91815f'
        script {
          test_test_framework_testing_ztest_register_register_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_testing_ztest_register_register_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.register.register', 'result': test_test_framework_testing_ztest_register_register_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.register.register', 'result': test_test_framework_testing_ztest_register_register_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_test_framework_userspace_ignore_faults_testing_ztest_error_hook_result
   def test_test_framework_userspace_ignore_faults_testing_ztest_error_hook() {
      echo 'Test testing.ztest.error_hook'
      echo 'testing.ztest.error_hook'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_test_framework_userspace_ignore_faults_testing_ztest_error_hook_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/ztest/error_hook frdm_k64f build_cc946ff testing.ztest.error_hook tests/ztest/error_hook'''
        script {
          test_test_framework_userspace_ignore_faults_testing_ztest_error_hook_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/ztest/error_hook/build_cc946ff testing.ztest.error_hook '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/ztest/error_hook/build_cc946ff'
        script {
          test_test_framework_userspace_ignore_faults_testing_ztest_error_hook_result = "SUCCESS"
        }
      }
      script {
        echo test_test_framework_userspace_ignore_faults_testing_ztest_error_hook_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.error_hook', 'result': test_test_framework_userspace_ignore_faults_testing_ztest_error_hook_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'testing.ztest.error_hook', 'result': test_test_framework_userspace_ignore_faults_testing_ztest_error_hook_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt_result
   def test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt() {
      echo 'Test crypto.tinycrypt'
      echo 'crypto.tinycrypt'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/crypto/tinycrypt frdm_k64f build_b167f31 crypto.tinycrypt tests/crypto/tinycrypt'''
        script {
          test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/crypto/tinycrypt/build_b167f31 crypto.tinycrypt '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/crypto/tinycrypt/build_b167f31'
        script {
          test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt_result = "SUCCESS"
        }
      }
      script {
        echo test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'crypto.tinycrypt', 'result': test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'crypto.tinycrypt', 'result': test_tinycrypt_crypto_aes_ccm_crypto_tinycrypt_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng_result
   def test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng() {
      echo 'Test crypto.tinycrypt.hmac_prng'
      echo 'crypto.tinycrypt.hmac_prng'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/crypto/tinycrypt_hmac_prng frdm_k64f build_b3a846a crypto.tinycrypt.hmac_prng tests/crypto/tinycrypt_hmac_prng'''
        script {
          test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/crypto/tinycrypt_hmac_prng/build_b3a846a crypto.tinycrypt.hmac_prng '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/crypto/tinycrypt_hmac_prng/build_b3a846a'
        script {
          test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng_result = "SUCCESS"
        }
      }
      script {
        echo test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'crypto.tinycrypt.hmac_prng', 'result': test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'crypto.tinycrypt.hmac_prng', 'result': test_tinycrypt_crypto_sha256_hmac_prng_crypto_tinycrypt_hmac_prng_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_tracing_debug_tracing_osawareness_openocd_result
   def test_tracing_debug_tracing_osawareness_openocd() {
      echo 'Test tracing.osawareness.openocd'
      echo 'tracing.osawareness.openocd'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_tracing_debug_tracing_osawareness_openocd_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/tracing frdm_k64f build_5c64369 tracing.osawareness.openocd samples/subsys/tracing'''
        script {
          test_tracing_debug_tracing_osawareness_openocd_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/tracing/build_5c64369 tracing.osawareness.openocd '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/tracing/build_5c64369'
        script {
          test_tracing_debug_tracing_osawareness_openocd_result = "SUCCESS"
        }
      }
      script {
        echo test_tracing_debug_tracing_osawareness_openocd_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'tracing.osawareness.openocd', 'result': test_tracing_debug_tracing_osawareness_openocd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'tracing.osawareness.openocd', 'result': test_tracing_debug_tracing_osawareness_openocd_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_uart_modbus_sample_modbus_rtu_client_result
   def test_uart_modbus_sample_modbus_rtu_client() {
      echo 'Test sample.modbus.rtu_client'
      echo 'sample.modbus.rtu_client'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_uart_modbus_sample_modbus_rtu_client_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/modbus/rtu_client frdm_k64f build_19ffeb1 sample.modbus.rtu_client samples/subsys/modbus/rtu_client'''
        script {
          test_uart_modbus_sample_modbus_rtu_client_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/modbus/rtu_client/build_19ffeb1 sample.modbus.rtu_client '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/modbus/rtu_client/build_19ffeb1'
        script {
          test_uart_modbus_sample_modbus_rtu_client_result = "SUCCESS"
        }
      }
      script {
        echo test_uart_modbus_sample_modbus_rtu_client_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.modbus.rtu_client', 'result': test_uart_modbus_sample_modbus_rtu_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.modbus.rtu_client', 'result': test_uart_modbus_sample_modbus_rtu_client_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_unknown_sample_basic_maxim_ds3231_result
   def test_unknown_sample_basic_maxim_ds3231() {
      echo 'Test sample.basic.maxim_ds3231'
      echo 'sample.basic.maxim_ds3231'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_unknown_sample_basic_maxim_ds3231_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/drivers/counter/maxim_ds3231 frdm_k64f build_dd81ff4 sample.basic.maxim_ds3231 samples/drivers/counter/maxim_ds3231'''
        script {
          test_unknown_sample_basic_maxim_ds3231_result = "FAILURE"
        }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/drivers/counter/maxim_ds3231/build_dd81ff4'
        script {
          test_unknown_sample_basic_maxim_ds3231_result = "SUCCESS"
        }
      }
      script {
        echo test_unknown_sample_basic_maxim_ds3231_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.basic.maxim_ds3231', 'result': test_unknown_sample_basic_maxim_ds3231_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.basic.maxim_ds3231', 'result': test_unknown_sample_basic_maxim_ds3231_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_net_sockets_dumb_http_server_netusb_result
   def test_usb_sample_net_sockets_dumb_http_server_netusb() {
      echo 'Test sample.net.sockets.dumb_http_server.netusb'
      echo 'sample.net.sockets.dumb_http_server.netusb'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_net_sockets_dumb_http_server_netusb_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/dumb_http_server frdm_k64f build_8ca41b4  -DOVERLAY_CONFIG=overlay-netusb.conf sample.net.sockets.dumb_http_server.netusb samples/net/sockets/dumb_http_server  -DOVERLAY_CONFIG=overlay-netusb.conf'''
        script {
          test_usb_sample_net_sockets_dumb_http_server_netusb_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/dumb_http_server/build_8ca41b4 sample.net.sockets.dumb_http_server.netusb '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/dumb_http_server/build_8ca41b4'
        script {
          test_usb_sample_net_sockets_dumb_http_server_netusb_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_net_sockets_dumb_http_server_netusb_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server.netusb', 'result': test_usb_sample_net_sockets_dumb_http_server_netusb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server.netusb', 'result': test_usb_sample_net_sockets_dumb_http_server_netusb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf_result
   def test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf() {
      echo 'Test sample.net.sockets.dumb_http_server.netusb_zeroconf'
      echo 'sample.net.sockets.dumb_http_server.netusb_zeroconf'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/dumb_http_server frdm_k64f build_36eab1c  -DOVERLAY_CONFIG=overlay-netusb.conf -DOVERLAY_CONFIG=overlay-zeroconf.conf sample.net.sockets.dumb_http_server.netusb_zeroconf samples/net/sockets/dumb_http_server  -DOVERLAY_CONFIG=overlay-netusb.conf -DOVERLAY_CONFIG=overlay-zeroconf.conf'''
        script {
          test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/dumb_http_server/build_36eab1c sample.net.sockets.dumb_http_server.netusb_zeroconf '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/dumb_http_server/build_36eab1c'
        script {
          test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server.netusb_zeroconf', 'result': test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.dumb_http_server.netusb_zeroconf', 'result': test_usb_sample_net_sockets_dumb_http_server_netusb_zeroconf_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_audio_headphones_microphone_result
   def test_usb_sample_usb_audio_headphones_microphone() {
      echo 'Test sample.usb.audio.headphones_microphone'
      echo 'sample.usb.audio.headphones_microphone'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_audio_headphones_microphone_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/audio/headphones_microphone frdm_k64f build_d0a1ab0 sample.usb.audio.headphones_microphone samples/subsys/usb/audio/headphones_microphone'''
        script {
          test_usb_sample_usb_audio_headphones_microphone_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/audio/headphones_microphone/build_d0a1ab0 sample.usb.audio.headphones_microphone '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/audio/headphones_microphone/build_d0a1ab0'
        script {
          test_usb_sample_usb_audio_headphones_microphone_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_audio_headphones_microphone_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.audio.headphones_microphone', 'result': test_usb_sample_usb_audio_headphones_microphone_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.audio.headphones_microphone', 'result': test_usb_sample_usb_audio_headphones_microphone_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_audio_headset_result
   def test_usb_sample_usb_audio_headset() {
      echo 'Test sample.usb.audio.headset'
      echo 'sample.usb.audio.headset'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_audio_headset_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/audio/headset frdm_k64f build_a6db246 sample.usb.audio.headset samples/subsys/usb/audio/headset'''
        script {
          test_usb_sample_usb_audio_headset_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/audio/headset/build_a6db246 sample.usb.audio.headset '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/audio/headset/build_a6db246'
        script {
          test_usb_sample_usb_audio_headset_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_audio_headset_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.audio.headset', 'result': test_usb_sample_usb_audio_headset_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.audio.headset', 'result': test_usb_sample_usb_audio_headset_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_cdc_acm_result
   def test_usb_sample_usb_cdc_acm() {
      echo 'Test sample.usb.cdc-acm'
      echo 'sample.usb.cdc-acm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_cdc_acm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/cdc_acm frdm_k64f build_deacefc sample.usb.cdc-acm samples/subsys/usb/cdc_acm'''
        script {
          test_usb_sample_usb_cdc_acm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/cdc_acm/build_deacefc sample.usb.cdc-acm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/cdc_acm/build_deacefc'
        script {
          test_usb_sample_usb_cdc_acm_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_cdc_acm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.cdc-acm', 'result': test_usb_sample_usb_cdc_acm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.cdc-acm', 'result': test_usb_sample_usb_cdc_acm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_cdc_acm_comp_result
   def test_usb_sample_usb_cdc_acm_comp() {
      echo 'Test sample.usb.cdc-acm.comp'
      echo 'sample.usb.cdc-acm.comp'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_cdc_acm_comp_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/cdc_acm frdm_k64f build_8e8d4af -DOVERLAY_CONFIG=overlay-composite-cdc-msc.conf sample.usb.cdc-acm.comp samples/subsys/usb/cdc_acm -DOVERLAY_CONFIG=overlay-composite-cdc-msc.conf'''
        script {
          test_usb_sample_usb_cdc_acm_comp_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/cdc_acm/build_8e8d4af sample.usb.cdc-acm.comp '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/cdc_acm/build_8e8d4af'
        script {
          test_usb_sample_usb_cdc_acm_comp_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_cdc_acm_comp_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.cdc-acm.comp', 'result': test_usb_sample_usb_cdc_acm_comp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.cdc-acm.comp', 'result': test_usb_sample_usb_cdc_acm_comp_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_cdc_acm_composite_result
   def test_usb_sample_usb_cdc_acm_composite() {
      echo 'Test sample.usb.cdc-acm-composite'
      echo 'sample.usb.cdc-acm-composite'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_cdc_acm_composite_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/cdc_acm_composite frdm_k64f build_5ed44b4 sample.usb.cdc-acm-composite samples/subsys/usb/cdc_acm_composite'''
        script {
          test_usb_sample_usb_cdc_acm_composite_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/cdc_acm_composite/build_5ed44b4 sample.usb.cdc-acm-composite '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/cdc_acm_composite/build_5ed44b4'
        script {
          test_usb_sample_usb_cdc_acm_composite_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_cdc_acm_composite_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.cdc-acm-composite', 'result': test_usb_sample_usb_cdc_acm_composite_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.cdc-acm-composite', 'result': test_usb_sample_usb_cdc_acm_composite_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_hid_result
   def test_usb_sample_usb_hid() {
      echo 'Test sample.usb.hid'
      echo 'sample.usb.hid'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_hid_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/hid frdm_k64f build_26cc55e sample.usb.hid samples/subsys/usb/hid'''
        script {
          test_usb_sample_usb_hid_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/hid/build_26cc55e sample.usb.hid '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/hid/build_26cc55e'
        script {
          test_usb_sample_usb_hid_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_hid_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.hid', 'result': test_usb_sample_usb_hid_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.hid', 'result': test_usb_sample_usb_hid_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_hid_composite_result
   def test_usb_sample_usb_hid_composite() {
      echo 'Test sample.usb.hid_composite'
      echo 'sample.usb.hid_composite'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_hid_composite_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/hid frdm_k64f build_b9fd99b -DCONFIG_USB_COMPOSITE_DEVICE=y sample.usb.hid_composite samples/subsys/usb/hid -DCONFIG_USB_COMPOSITE_DEVICE=y'''
        script {
          test_usb_sample_usb_hid_composite_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/hid/build_b9fd99b sample.usb.hid_composite '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/hid/build_b9fd99b'
        script {
          test_usb_sample_usb_hid_composite_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_hid_composite_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.hid_composite', 'result': test_usb_sample_usb_hid_composite_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.hid_composite', 'result': test_usb_sample_usb_hid_composite_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_hid_mouse_result
   def test_usb_sample_usb_hid_mouse() {
      echo 'Test sample.usb.hid-mouse'
      echo 'sample.usb.hid-mouse'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_hid_mouse_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/hid-mouse frdm_k64f build_a056b3a sample.usb.hid-mouse samples/subsys/usb/hid-mouse'''
        script {
          test_usb_sample_usb_hid_mouse_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/hid-mouse/build_a056b3a sample.usb.hid-mouse '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/hid-mouse/build_a056b3a'
        script {
          test_usb_sample_usb_hid_mouse_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_hid_mouse_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.hid-mouse', 'result': test_usb_sample_usb_hid_mouse_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.hid-mouse', 'result': test_usb_sample_usb_hid_mouse_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_loopback_result
   def test_usb_sample_usb_loopback() {
      echo 'Test sample.usb.loopback'
      echo 'sample.usb.loopback'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_loopback_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/testusb frdm_k64f build_48b30c1 sample.usb.loopback samples/subsys/usb/testusb'''
        script {
          test_usb_sample_usb_loopback_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/testusb/build_48b30c1 sample.usb.loopback '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/testusb/build_48b30c1'
        script {
          test_usb_sample_usb_loopback_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_loopback_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.loopback', 'result': test_usb_sample_usb_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.loopback', 'result': test_usb_sample_usb_loopback_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sample_usb_webusb_result
   def test_usb_sample_usb_webusb() {
      echo 'Test sample.usb.webusb'
      echo 'sample.usb.webusb'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sample_usb_webusb_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/subsys/usb/webusb frdm_k64f build_1523e1f sample.usb.webusb samples/subsys/usb/webusb'''
        script {
          test_usb_sample_usb_webusb_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/subsys/usb/webusb/build_1523e1f sample.usb.webusb '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/subsys/usb/webusb/build_1523e1f'
        script {
          test_usb_sample_usb_webusb_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sample_usb_webusb_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.usb.webusb', 'result': test_usb_sample_usb_webusb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.usb.webusb', 'result': test_usb_sample_usb_webusb_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_usb_device_result
   def test_usb_usb_device() {
      echo 'Test usb.device'
      echo 'usb.device'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_usb_device_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/usb/device frdm_k64f build_b9299bd usb.device tests/subsys/usb/device'''
        script {
          test_usb_usb_device_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/usb/device/build_b9299bd usb.device '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/usb/device/build_b9299bd'
        script {
          test_usb_usb_device_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_usb_device_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'usb.device', 'result': test_usb_usb_device_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'usb.device', 'result': test_usb_usb_device_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_bos_usb_bos_result
   def test_usb_bos_usb_bos() {
      echo 'Test usb.bos'
      echo 'usb.bos'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_bos_usb_bos_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/usb/bos frdm_k64f build_d72429f usb.bos tests/subsys/usb/bos'''
        script {
          test_usb_bos_usb_bos_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/usb/bos/build_d72429f usb.bos '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/usb/bos/build_d72429f'
        script {
          test_usb_bos_usb_bos_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_bos_usb_bos_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'usb.bos', 'result': test_usb_bos_usb_bos_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'usb.bos', 'result': test_usb_bos_usb_bos_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_desc_sections_usb_desc_sections_result
   def test_usb_desc_sections_usb_desc_sections() {
      echo 'Test usb.desc_sections'
      echo 'usb.desc_sections'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_desc_sections_usb_desc_sections_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/usb/desc_sections frdm_k64f build_8495e4b usb.desc_sections tests/subsys/usb/desc_sections'''
        script {
          test_usb_desc_sections_usb_desc_sections_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/usb/desc_sections/build_8495e4b usb.desc_sections '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/usb/desc_sections/build_8495e4b'
        script {
          test_usb_desc_sections_usb_desc_sections_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_desc_sections_usb_desc_sections_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'usb.desc_sections', 'result': test_usb_desc_sections_usb_desc_sections_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'usb.desc_sections', 'result': test_usb_desc_sections_usb_desc_sections_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a_result
   def test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a() {
      echo 'Test sample.net.wpan_serial.frdm_cr20a'
      echo 'sample.net.wpan_serial.frdm_cr20a'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/wpan_serial frdm_k64f build_04c5244  -DSHIELD=frdm_cr20a sample.net.wpan_serial.frdm_cr20a samples/net/wpan_serial  -DSHIELD=frdm_cr20a'''
        script {
          test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/wpan_serial/build_04c5244 sample.net.wpan_serial.frdm_cr20a '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/wpan_serial/build_04c5244'
        script {
          test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.wpan_serial.frdm_cr20a', 'result': test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.wpan_serial.frdm_cr20a', 'result': test_usb_ieee802154_sample_net_wpan_serial_frdm_cr20a_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_net_zperf_sample_net_zperf_netusb_ecm_result
   def test_usb_net_zperf_sample_net_zperf_netusb_ecm() {
      echo 'Test sample.net.zperf.netusb_ecm'
      echo 'sample.net.zperf.netusb_ecm'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_ecm_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/zperf frdm_k64f build_af9b934  -DOVERLAY_CONFIG=overlay-netusb.conf sample.net.zperf.netusb_ecm samples/net/zperf  -DOVERLAY_CONFIG=overlay-netusb.conf'''
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_ecm_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/zperf/build_af9b934 sample.net.zperf.netusb_ecm '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/zperf/build_af9b934'
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_ecm_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_net_zperf_sample_net_zperf_netusb_ecm_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.zperf.netusb_ecm', 'result': test_usb_net_zperf_sample_net_zperf_netusb_ecm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.zperf.netusb_ecm', 'result': test_usb_net_zperf_sample_net_zperf_netusb_ecm_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_net_zperf_sample_net_zperf_netusb_eem_result
   def test_usb_net_zperf_sample_net_zperf_netusb_eem() {
      echo 'Test sample.net.zperf.netusb_eem'
      echo 'sample.net.zperf.netusb_eem'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_eem_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/zperf frdm_k64f build_ec7c4c6  -DOVERLAY_CONFIG=overlay-netusb.conf -DCONFIG_USB_DEVICE_NETWORK_ECM=n -DCONFIG_USB_DEVICE_NETWORK_EEM=y sample.net.zperf.netusb_eem samples/net/zperf  -DOVERLAY_CONFIG=overlay-netusb.conf -DCONFIG_USB_DEVICE_NETWORK_ECM=n -DCONFIG_USB_DEVICE_NETWORK_EEM=y'''
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_eem_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/zperf/build_ec7c4c6 sample.net.zperf.netusb_eem '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/zperf/build_ec7c4c6'
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_eem_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_net_zperf_sample_net_zperf_netusb_eem_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.zperf.netusb_eem', 'result': test_usb_net_zperf_sample_net_zperf_netusb_eem_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.zperf.netusb_eem', 'result': test_usb_net_zperf_sample_net_zperf_netusb_eem_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_net_zperf_sample_net_zperf_netusb_rndis_result
   def test_usb_net_zperf_sample_net_zperf_netusb_rndis() {
      echo 'Test sample.net.zperf.netusb_rndis'
      echo 'sample.net.zperf.netusb_rndis'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_rndis_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/zperf frdm_k64f build_e66afef  -DOVERLAY_CONFIG=overlay-netusb.conf -DCONFIG_USB_DEVICE_NETWORK_ECM=n -DCONFIG_USB_DEVICE_NETWORK_RNDIS=y sample.net.zperf.netusb_rndis samples/net/zperf  -DOVERLAY_CONFIG=overlay-netusb.conf -DCONFIG_USB_DEVICE_NETWORK_ECM=n -DCONFIG_USB_DEVICE_NETWORK_RNDIS=y'''
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_rndis_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/zperf/build_e66afef sample.net.zperf.netusb_rndis '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/zperf/build_e66afef'
        script {
          test_usb_net_zperf_sample_net_zperf_netusb_rndis_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_net_zperf_sample_net_zperf_netusb_rndis_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.zperf.netusb_rndis', 'result': test_usb_net_zperf_sample_net_zperf_netusb_rndis_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.zperf.netusb_rndis', 'result': test_usb_net_zperf_sample_net_zperf_netusb_rndis_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_osdesc_usb_osdesc_result
   def test_usb_osdesc_usb_osdesc() {
      echo 'Test usb.osdesc'
      echo 'usb.osdesc'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_osdesc_usb_osdesc_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) tests/subsys/usb/os_desc frdm_k64f build_bfe503b usb.osdesc tests/subsys/usb/os_desc'''
        script {
          test_usb_osdesc_usb_osdesc_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) tests/subsys/usb/os_desc/build_bfe503b usb.osdesc '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/tests/subsys/usb/os_desc/build_bfe503b'
        script {
          test_usb_osdesc_usb_osdesc_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_osdesc_usb_osdesc_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'usb.osdesc', 'result': test_usb_osdesc_usb_osdesc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'usb.osdesc', 'result': test_usb_osdesc_usb_osdesc_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_usb_sensors_sample_sensor_usb_fxos8700_hid_result
   def test_usb_sensors_sample_sensor_usb_fxos8700_hid() {
      echo 'Test sample.sensor.usb.fxos8700-hid'
      echo 'sample.sensor.usb.fxos8700-hid'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_usb_sensors_sample_sensor_usb_fxos8700_hid_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/sensor/fxos8700-hid frdm_k64f build_d1fb818 sample.sensor.usb.fxos8700-hid samples/sensor/fxos8700-hid'''
        script {
          test_usb_sensors_sample_sensor_usb_fxos8700_hid_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/sensor/fxos8700-hid/build_d1fb818 sample.sensor.usb.fxos8700-hid '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/sensor/fxos8700-hid/build_d1fb818'
        script {
          test_usb_sensors_sample_sensor_usb_fxos8700_hid_result = "SUCCESS"
        }
      }
      script {
        echo test_usb_sensors_sample_sensor_usb_fxos8700_hid_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.usb.fxos8700-hid', 'result': test_usb_sensors_sample_sensor_usb_fxos8700_hid_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.sensor.usb.fxos8700-hid', 'result': test_usb_sensors_sample_sensor_usb_fxos8700_hid_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_userspace_sample_net_sockets_net_mgmt_usermode_result
   def test_userspace_sample_net_sockets_net_mgmt_usermode() {
      echo 'Test sample.net.sockets.net_mgmt.usermode'
      echo 'sample.net.sockets.net_mgmt.usermode'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_userspace_sample_net_sockets_net_mgmt_usermode_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/net/sockets/net_mgmt frdm_k64f build_b96ba43 -DCONFIG_USERSPACE=y sample.net.sockets.net_mgmt.usermode samples/net/sockets/net_mgmt -DCONFIG_USERSPACE=y'''
        script {
          test_userspace_sample_net_sockets_net_mgmt_usermode_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/net/sockets/net_mgmt/build_b96ba43 sample.net.sockets.net_mgmt.usermode '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/net/sockets/net_mgmt/build_b96ba43'
        script {
          test_userspace_sample_net_sockets_net_mgmt_usermode_result = "SUCCESS"
        }
      }
      script {
        echo test_userspace_sample_net_sockets_net_mgmt_usermode_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.net_mgmt.usermode', 'result': test_userspace_sample_net_sockets_net_mgmt_usermode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.net.sockets.net_mgmt.usermode', 'result': test_userspace_sample_net_sockets_net_mgmt_usermode_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_userspace_sample_userspace_prod_consumer_result
   def test_userspace_sample_userspace_prod_consumer() {
      echo 'Test sample.userspace.prod_consumer'
      echo 'sample.userspace.prod_consumer'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_userspace_sample_userspace_prod_consumer_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/userspace/prod_consumer frdm_k64f build_9bc9785 sample.userspace.prod_consumer samples/userspace/prod_consumer'''
        script {
          test_userspace_sample_userspace_prod_consumer_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/userspace/prod_consumer/build_9bc9785 sample.userspace.prod_consumer '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/userspace/prod_consumer/build_9bc9785'
        script {
          test_userspace_sample_userspace_prod_consumer_result = "SUCCESS"
        }
      }
      script {
        echo test_userspace_sample_userspace_prod_consumer_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.userspace.prod_consumer', 'result': test_userspace_sample_userspace_prod_consumer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.userspace.prod_consumer', 'result': test_userspace_sample_userspace_prod_consumer_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
   def test_userspace_sample_kernel_memory_protection_shared_mem_result
   def test_userspace_sample_kernel_memory_protection_shared_mem() {
      echo 'Test sample.kernel.memory_protection.shared_mem'
      echo 'sample.kernel.memory_protection.shared_mem'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_userspace_sample_kernel_memory_protection_shared_mem_result = "BUILD_FAILURE"
        }
          sh '''docker exec confident_sinoussi build_zephyr_elf.sh  $(basename $(pwd)) samples/userspace/shared_mem frdm_k64f build_b4161bf sample.kernel.memory_protection.shared_mem samples/userspace/shared_mem'''
        script {
          test_userspace_sample_kernel_memory_protection_shared_mem_result = "FAILURE"
        }
          retry(2)  {
            sh 'docker exec confident_sinoussi run_zephyr_elf.sh $(basename $(pwd)) samples/userspace/shared_mem/build_b4161bf sample.kernel.memory_protection.shared_mem '
          }
          sh 'docker exec confident_sinoussi rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/samples/userspace/shared_mem/build_b4161bf'
        script {
          test_userspace_sample_kernel_memory_protection_shared_mem_result = "SUCCESS"
        }
      }
      script {
        echo test_userspace_sample_kernel_memory_protection_shared_mem_result
        myCustomMeasurementFields = ['results_info' : ['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.memory_protection.shared_mem', 'result': test_userspace_sample_kernel_memory_protection_shared_mem_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        mycustomDataMapTags = ['results_info' :['board_name': 'frdm_k64f', 'app_name': 'sample.kernel.memory_protection.shared_mem', 'result': test_userspace_sample_kernel_memory_protection_shared_mem_result, 'version': 'v2.7.99-1784-g6dfdff7165']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }

return this
