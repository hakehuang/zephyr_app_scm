<?rb for l, items in @catalog ?>
  <?rb items['cases'].each do |k, item| ?>
   <?rb ll=l.gsub(/\-|\./, '_')  ?>
   <?rb kk=k.gsub(/\-|\./, '_')  ?>
   def test_#{ll}_#{kk}_result
   def test_#{ll}_#{kk}() {
      echo 'Test #{k}'
      echo '#{item['opt'][0]}'
      catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
        script {
          test_#{ll}_#{kk}_result = "BUILD_FAILURE"
        }
        <?rb if item['scripts'] ?>
          <?rb item['scripts'].each do |cmd| ?>
            sh '''docker exec #{@docker} run_script.sh $(basename $(pwd)) #{item['opt'][1]} #{cmd}'''
          <?rb end ?>
        <?rb end ?>
        <?rb if item['opt'][2] ?>
          sh '''docker exec #{@docker} #{@build_script}  $(basename $(pwd)) #{item['opt'][1]} #{@board} #{item['build']} #{item['opt'][2..-1].join(' ')}'''
        <?rb else ?>
          sh 'docker exec #{@docker} #{@build_script} $(basename $(pwd)) #{item['opt'][1]} #{item['opt'][0]} #{item['build']}'
        <?rb end ?>
          sh 'docker exec #{@docker} rm -rf  /build/src/workspace/$(basename $(pwd))/zephyr/#{item['build_path']}'
        script {
          test_#{ll}_#{kk}_result = "SUCCESS"
        }  
      }
      script {
        echo test_#{ll}_#{kk}_result
        myCustomMeasurementFields = ['results_info' : ['board_name': '#{@report_board_name}', 'app_name': '#{k}', 'result': test_#{ll}_#{kk}_result, 'version': '#{@version}']]
        mycustomDataMapTags = ['results_info' :['board_name': '#{@report_board_name}', 'app_name': '#{k}', 'result': test_#{ll}_#{kk}_result, 'version': '#{@version}']]
        influxDbPublisher(selectedTarget: 'influxdb', customDataMap: myCustomMeasurementFields, customDataMapTags: mycustomDataMapTags)
      }
   }
  <?rb end ?>
<?rb end ?>

properties([
  // only keep 1 builds to prevent disk usage from growing out of control
  buildDiscarder(
    logRotator(
      artifactDaysToKeepStr: '7', 
      artifactNumToKeepStr: '1', 
      daysToKeepStr: '10', 
      numToKeepStr: '5',
    ),
  ),
])

pipeline {
  agent any
  environment {
    PATH = "/root/.local/bin/:$PATH"
  }
  stages {
    stage('build') {
      parallel {
        stage('hello world') {
          steps {
            sh '''docker exec #{@docker} run_setup.sh $(basename $(pwd)) #{@board}'''
            sh 'docker exec #{@docker} #{@build_script}  $(basename $(pwd)) samples/hello_world #{@board} build'
          }
        }
      }
    }
    <?rb for l, items in @catalog ?>
    stage('#{l}') {
      parallel {
      <?rb items['cases'].each do |k, item| ?>
        stage('#{k}') {
          steps {
            <?rb ll=l.gsub(/\-|\./, '_')  ?>
            <?rb kk=k.gsub(/\-|\./, '_')  ?>
            test_#{ll}_#{kk}()
          }
        }
      <?rb end ?>
      }
    }
    <?rb end ?>
  }
}
