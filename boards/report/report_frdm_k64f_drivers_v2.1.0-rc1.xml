<?xml version="1.0"?>
<testsuites>
    <testsuite tests="710" errors="0" failures="0" name="" skipped="199" time="0">
      <testcase classname="frdm_k64f:arch.interrupt.arm_irq_vector_table" name="arch.interrupt.arm_irq_vector_table" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.arm_runtime_nmi" name="arch.interrupt.arm_runtime_nmi" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.fatal" name="arch.interrupt.fatal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.idt_stub" name="arch.interrupt.idt_stub" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.irq_offload" name="arch.interrupt.irq_offload" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.isr_dynamic" name="arch.interrupt.isr_dynamic" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.main" name="arch.interrupt.main" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nested_isr" name="arch.interrupt.nested_isr" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nmi_test_isr" name="arch.interrupt.nmi_test_isr" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nodyn.isr_dynamic" name="arch.interrupt.nodyn.isr_dynamic" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nodyn.nested_isr" name="arch.interrupt.nodyn.nested_isr" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nodyn.prevent_interruption" name="arch.interrupt.nodyn.prevent_interruption" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.obj_tracing" name="arch.interrupt.obj_tracing" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.philosophers_tracing" name="arch.interrupt.philosophers_tracing" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.prevent_interruption" name="arch.interrupt.prevent_interruption" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.sem_give_limit" name="arch.interrupt.sem_give_limit" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.sem_multiple_threads_wait" name="arch.interrupt.sem_multiple_threads_wait" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.static_idt" name="arch.interrupt.static_idt" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.rand32" name="crypto.rand32.rand32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_hw_xoroshiro.mpool_alloc_free_isr" name="crypto.rand32.random_hw_xoroshiro.mpool_alloc_free_isr" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_hw_xoroshiro.mpool_alloc_size" name="crypto.rand32.random_hw_xoroshiro.mpool_alloc_size" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_hw_xoroshiro.mpool_kdefine_extern" name="crypto.rand32.random_hw_xoroshiro.mpool_kdefine_extern" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_hw_xoroshiro.rand32" name="crypto.rand32.random_hw_xoroshiro.rand32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_sw_systimer" name="crypto.rand32.random_sw_systimer" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_sw_systimer.fatal" name="crypto.rand32.random_sw_systimer.fatal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_sw_systimer.rand32" name="crypto.rand32.random_sw_systimer.rand32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:crypto.rand32.random_sw_systimer.te" name="crypto.rand32.random_sw_systimer.te" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common" name="kernel.common" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_00p 0x0000 0x0000" name="kernel.common.adc_00p 0x0000 0x0000" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_asynchronous_call" name="kernel.common.adc_asynchronous_call" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_invalid_request" name="kernel.common.adc_invalid_request" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_repeated_sampling" name="kernel.common.adc_repeated_sampling" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_repeated_samplings" name="kernel.common.adc_repeated_samplings" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_sample_two_channels" name="kernel.common.adc_sample_two_channels" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_sample_with_inter: 0x0150 0x0ck: done 5" name="kernel.common.adc_sample_with_inter: 0x0150 0x0ck: done 5" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.adc_sample_with_interval" name="kernel.common.adc_sample_with_interval" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.atomic" name="kernel.common.atomic" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.bitfield" name="kernel.common.bitfield" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.bounds_check_mitigation" name="kernel.common.bounds_check_mitigation" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.busy_wait" name="kernel.common.busy_wait" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.byteorder_mem_swap" name="kernel.common.byteorder_mem_swap" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.byteorder_memcpy_swap" name="kernel.common.byteorder_memcpy_swap" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.clock_cycle" name="kernel.common.clock_cycle" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.clock_uptime" name="kernel.common.clock_uptime" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.critical" name="kernel.common.critical" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.dlist" name="kernel.common.dlist" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.early_sleep" name="kernel.common.early_sleep" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.errno.newlib.thread_context" name="kernel.common.errno.newlib.thread_context" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.errno.thread_context" name="kernel.common.errno.thread_context" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.init.verify_bootdelay" name="kernel.common.init.verify_bootdelay" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.intmath" name="kernel.common.intmath" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.irq_offload" name="kernel.common.irq_offload" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.k_sleep" name="kernel.common.k_sleep" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.k_yield" name="kernel.common.k_yield" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.kernel_cpu_idle" name="kernel.common.kernel_cpu_idle" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.kernel_cpu_idle_atomic" name="kernel.common.kernel_cpu_idle_atomic" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.kernel_ctx_thread" name="kernel.common.kernel_ctx_thread" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.kernel_interrupts" name="kernel.common.kernel_interrupts" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.kernel_thread" name="kernel.common.kernel_thread" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.kernel_timer_interrupts" name="kernel.common.kernel_timer_interrupts" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.main" name="kernel.common.main" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.atomic" name="kernel.common.misra.atomic" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.bitfield" name="kernel.common.misra.bitfield" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.bounds_check_mitigation" name="kernel.common.misra.bounds_check_mitigation" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.byteorder_mem_swap" name="kernel.common.misra.byteorder_mem_swap" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.byteorder_memcpy_swap" name="kernel.common.misra.byteorder_memcpy_swap" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.clock_cycle" name="kernel.common.misra.clock_cycle" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.clock_uptime" name="kernel.common.misra.clock_uptime" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.dlist" name="kernel.common.misra.dlist" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.intmath" name="kernel.common.misra.intmath" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.irq_offload" name="kernel.common.misra.irq_offload" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.msg_receive===" name="kernel.common.misra.msg_receive===" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.multilib" name="kernel.common.misra.multilib" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.printk" name="kernel.common.misra.printk" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.slist" name="kernel.common.misra.slist" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_get_be16" name="kernel.common.misra.sys_get_be16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_get_be32" name="kernel.common.misra.sys_get_be32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_get_be64" name="kernel.common.misra.sys_get_be64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_get_le16" name="kernel.common.misra.sys_get_le16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_get_le32" name="kernel.common.misra.sys_get_le32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_get_le64" name="kernel.common.misra.sys_get_le64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_put_be16" name="kernel.common.misra.sys_put_be16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_put_be32" name="kernel.common.misra.sys_put_be32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_put_be64" name="kernel.common.misra.sys_put_be64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_put_le16" name="kernel.common.misra.sys_put_le16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_put_le32" name="kernel.common.misra.sys_put_le32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.sys_put_le64" name="kernel.common.misra.sys_put_le64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.thread_context" name="kernel.common.misra.thread_context" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.timeout_order" name="kernel.common.misra.timeout_order" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.vector" name="kernel.common.misra.vector" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.verify_bootdelay" name="kernel.common.misra.verify_bootdelay" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.misra.version" name="kernel.common.misra.version" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.multilib" name="kernel.common.multilib" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.obj_tracing" name="kernel.common.obj_tracing" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.printk" name="kernel.common.printk" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.priority_cooperative" name="kernel.common.priority_cooperative" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sam.critical" name="kernel.common.sam.critical" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.slist" name="kernel.common.slist" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection.fata0000000  s[2]:  0x00000000  s[3]:  0x00000000" name="kernel.common.stack_protection.fata0000000  s[2]:  0x00000000  s[3]:  0x00000000" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection.fatal" name="kernel.common.stack_protection.fatal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_arm_fp_sharing.fatal" name="kernel.common.stack_protection_arm_fp_sharing.fatal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_arm_fp_sharing.pipe_forever_timeout" name="kernel.common.stack_protection_arm_fp_sharing.pipe_forever_timeout" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_arm_fp_sharing.pipe_forever_wait" name="kernel.common.stack_protection_arm_fp_sharing.pipe_forever_wait" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_arm_fp_sharing.pipe_get_invalid_size" name="kernel.common.stack_protection_arm_fp_sharing.pipe_get_invalid_size" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_arm_fp_sharing.pipe_get_on_empty_pipe" name="kernel.common.stack_protection_arm_fp_sharing.pipe_get_on_empty_pipe" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_arm_fp_sharing.pipe_timeoung test - test_pipe_get_invalid_size" name="kernel.common.stack_protection_arm_fp_sharing.pipe_timeoung test - test_pipe_get_invalid_size" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_arm_fp_sharing.pipe_timeout" name="kernel.common.stack_protection_arm_fp_sharing.pipe_timeout" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_protection_no_userspace.fatal" name="kernel.common.stack_protection_no_userspace.fatal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.stack_sentinel.fatal" name="kernel.common.stack_sentinel.fatal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_get_be16" name="kernel.common.sys_get_be16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_get_be32" name="kernel.common.sys_get_be32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_get_be64" name="kernel.common.sys_get_be64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_get_le16" name="kernel.common.sys_get_le16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_get_le32" name="kernel.common.sys_get_le32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_get_le64" name="kernel.common.sys_get_le64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_put_be16" name="kernel.common.sys_put_be16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_put_be32" name="kernel.common.sys_put_be32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_put_be64" name="kernel.common.sys_put_be64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_put_le16" name="kernel.common.sys_put_le16" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_put_le32" name="kernel.common.sys_put_le32" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.sys_put_le64" name="kernel.common.sys_put_le64" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.te========" name="kernel.common.te========" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.thread_context" name="kernel.common.thread_context" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.timeout_order" name="kernel.common.timeout_order" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.timing.assert_mem_equal" name="kernel.common.timing.assert_mem_equal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.timing.assert_tests" name="kernel.common.timing.assert_tests" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.timing.fatal" name="kernel.common.timing.fatal" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.timing.pending" name="kernel.common.timing.pending" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.timing.sleep" name="kernel.common.timing.sleep" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.timing.usleep" name="kernel.common.timing.usleep" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.verify_bootdelay" name="kernel.common.verify_bootdelay" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:kernel.common.version" name="kernel.common.version" time="0">
         <skipped message="Skipped" type="skipped"/>
      </testcase>
      <testcase classname="frdm_k64f:tracing.openocd" name="tracing.openocd" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.check=========================================================" name="kernel.timer.check=========================================================" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.check_promisc_mode_4_addr_add" name="kernel.timer.check_promisc_mode_4_addr_add" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.check_promisc_mode_off" name="kernel.timer.check_promisc_mode_off" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.check_promisc_mode_on" name="kernel.timer.check_promisc_mode_on" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.gw_addr_add" name="kernel.timer.gw_addr_add" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.select_src_iface" name="kernel.timer.select_src_iface" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.send_iface1_up" name="kernel.timer.send_iface1_up" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.set_promisc_mode_on" name="kernel.timer.set_promisc_mode_on" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_duration_period" name="kernel.timer.tickless.timer_duration_period" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_expirefn_null" name="kernel.timer.tickless.timer_expirefn_null" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_k_define" name="kernel.timer.tickless.timer_k_define" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_period_0" name="kernel.timer.tickless.timer_period_0" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_periodicity" name="kernel.timer.tickless.timer_periodicity" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_remaining_get" name="kernel.timer.tickless.timer_remaining_get" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_status_get" name="kernel.timer.tickless.timer_status_get" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_status_get_anytime" name="kernel.timer.tickless.timer_status_get_anytime" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_status_sync" name="kernel.timer.tickless.timer_status_sync" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.tickless.timer_user_data" name="kernel.timer.tickless.timer_user_data" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer" name="kernel.timer.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_duration_period" name="kernel.timer.timer_duration_period" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_expirefn_null" name="kernel.timer.timer_expirefn_null" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_k_define" name="kernel.timer.timer_k_define" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_period_0" name="kernel.timer.timer_period_0" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_periodicity" name="kernel.timer.timer_periodicity" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_remaining_get" name="kernel.timer.timer_remaining_get" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_status_get" name="kernel.timer.timer_status_get" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_status_get_anytime" name="kernel.timer.timer_status_get_anytime" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_status_sync" name="kernel.timer.timer_status_sync" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.timer_user_data" name="kernel.timer.timer_user_data" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v4_addr_add" name="kernel.timer.v4_addr_add" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v4_addr_add_usASS - check_promisc_mode_off" name="kernel.timer.v4_addr_add_usASS - check_promisc_mode_off" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v4_addr_add_user" name="kernel.timer.v4_addr_add_user" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v4_addr_lookup" name="kernel.timer.v4_addr_lookup" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v4_addr_rm" name="kernel.timer.v4_addr_rm" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v6_addr_add" name="kernel.timer.v6_addr_add" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v6_addr_add_user" name="kernel.timer.v6_addr_add_user" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v6_addr_lookup" name="kernel.timer.v6_addr_lookup" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v6_addr_lookup_ - v6_addr_add" name="kernel.timer.v6_addr_lookup_ - v6_addr_add" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v6_addr_lookup_user" name="kernel.timer.v6_addr_lookup_user" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v6_addr_rm" name="kernel.timer.v6_addr_rm" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.timer.v6ddr_add" name="kernel.timer.v6ddr_add" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.bad_priorities" name="kernel.tickless.bad_priorities" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.busy_wait" name="kernel.tickless.busy_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.kernel_ctx_thread" name="kernel.tickless.kernel_ctx_thread" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.lock_preemptible" name="kernel.tickless.lock_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.pending_thread_wakeup" name="kernel.tickless.pending_thread_wakeup" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.priority_cooperative" name="kernel.tickless.priority_cooperative" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.priority_preemptible" name="kernel.tickless.priority_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.priority_scheduling" name="kernel.tickless.priority_scheduling" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.sleep================================================" name="kernel.tickless.sleep================================================" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.sleep_cooperative" name="kernel.tickless.sleep_cooperative" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.sleep_wake===============" name="kernel.tickless.sleep_wake===============" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.sleep_wakeup_preemp======" name="kernel.tickless.sleep_wakeup_preemp======" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.sleep_wakeup_preemptible" name="kernel.tickless.sleep_wakeup_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.slice_reset" name="kernel.tickless.slice_reset" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.slice_scheduling" name="kernel.tickless.slice_scheduling" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.tes===" name="kernel.tickless.tes===" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.test==========================" name="kernel.tickless.test==========================" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.tickless" name="kernel.tickless.tickless" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.tickless_slice" name="kernel.tickless.tickless_slice" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.tickless_sysclock" name="kernel.tickless.tickless_sysclock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.time_slicing_disable_preemptible" name="kernel.tickless.time_slicing_disable_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.time_slicing_preemptible" name="kernel.tickless.time_slicing_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.tst - test_slice_reset" name="kernel.tickless.tst - test_slice_reset" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.unlock_nested_sche test_time_slicing_disable_preemptible" name="kernel.tickless.unlock_nested_sche test_time_slicing_disable_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.unlock_nested_sched_lock" name="kernel.tickless.unlock_nested_sched_lock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.unlock_ning test - test_time_slicing_disable_preemptible" name="kernel.tickless.unlock_ning test - test_time_slicing_disable_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.unlock_preemptible" name="kernel.tickless.unlock_preemptible" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.unlock_preemptiting test - test_slice_scheduling" name="kernel.tickless.unlock_preemptiting test - test_slice_scheduling" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.user_k_is_preempt" name="kernel.tickless.user_k_is_preempt" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.user_k_wakeup" name="kernel.tickless.user_k_wakeup" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.wakeup_expired_timer_thread" name="kernel.tickless.wakeup_expired_timer_thread" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.wakeup_expired_tt" name="kernel.tickless.wakeup_expired_tt" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.wakeupslice_reset" name="kernel.tickless.wakeupslice_reset" time="0">
      </testcase>
      <testcase classname="frdm_k64f:kernel.tickless.yield_cooperative" name="kernel.tickless.yield_cooperative" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.assert_tests" name="testing.ztest.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.delay" name="testing.ztest.customized_output.delay" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_isr" name="testing.ztest.customized_output.event_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_signalled" name="testing.ztest.customized_output.event_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.kernel_apis" name="testing.ztest.customized_output.kernel_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool" name="testing.ztest.customized_output.mempool" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool_dynamic" name="testing.ztest.customized_output.mempool_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.messageq" name="testing.ztest.customized_output.messageq" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex" name="testing.ztest.customized_output.mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex_lock_timeout" name="testing.ztest.customized_output.mutex_lock_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.semaphore" name="testing.ztest.customized_output.semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.t- test_thread_prio_dynamic" name="testing.ztest.customized_output.t- test_thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.te6" name="testing.ztest.customized_output.te6" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thrd B started." name="testing.ztest.customized_output.thrd B started." time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis" name="testing.ztest.customized_output.thread_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis_dynamic" name="testing.ztest.customized_output.thread_apis_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_isr" name="testing.ztest.customized_output.thread_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_no_wait_timeout" name="testing.ztest.customized_output.thread_flags_no_wait_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_signalled" name="testing.ztest.customized_output.thread_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio" name="testing.ztest.customized_output.thread_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio_dynamic" name="testing.ztest.customized_output.thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.timer" name="testing.ztest.customized_output.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.empty_test" name="testing.ztest.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.multi_value_tests" name="testing.ztest.mock.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.parameter_tests" name="testing.ztest.mock.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.return_value_tests" name="testing.ztest.mock.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_pass" name="testing.ztest.regular_output.assert_pass" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_skip" name="testing.ztest.regular_output.assert_skip" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_cancel_main_low_prio" name="testing.ztest.regular_output.poll_cancel_main_low_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_no_wait" name="testing.ztest.regular_output.poll_no_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wait" name="testing.ztest.regular_output.poll_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.multi_value_tests" name="testing.ztest.unit.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.parameter_tests" name="testing.ztest.unit.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.return_value_tests" name="testing.ztest.unit.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_mem_equal" name="testing.ztest.verbose_0.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_tests" name="testing.ztest.verbose_0.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.empty_test" name="testing.ztest.verbose_0.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_mem_equal" name="testing.ztest.verbose_1.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_tests" name="testing.ztest.verbose_1.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.empty_test" name="testing.ztest.verbose_1.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_msg_dropped_notification" name="testing.ztest.verbose_1.log_msg_dropped_notification" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_panic" name="testing.ztest.verbose_1.log_panic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_mem_equal" name="testing.ztest.verbose_2.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_tests" name="testing.ztest.verbose_2.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.empty_test" name="testing.ztest.verbose_2.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.assert_tests" name="testing.ztest.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.delay" name="testing.ztest.customized_output.delay" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_isr" name="testing.ztest.customized_output.event_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_signalled" name="testing.ztest.customized_output.event_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.kernel_apis" name="testing.ztest.customized_output.kernel_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool" name="testing.ztest.customized_output.mempool" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool_dynamic" name="testing.ztest.customized_output.mempool_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.messageq" name="testing.ztest.customized_output.messageq" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex" name="testing.ztest.customized_output.mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex_lock_timeout" name="testing.ztest.customized_output.mutex_lock_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.semaphore" name="testing.ztest.customized_output.semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.t- test_thread_prio_dynamic" name="testing.ztest.customized_output.t- test_thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.te6" name="testing.ztest.customized_output.te6" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thrd B started." name="testing.ztest.customized_output.thrd B started." time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis" name="testing.ztest.customized_output.thread_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis_dynamic" name="testing.ztest.customized_output.thread_apis_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_isr" name="testing.ztest.customized_output.thread_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_no_wait_timeout" name="testing.ztest.customized_output.thread_flags_no_wait_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_signalled" name="testing.ztest.customized_output.thread_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio" name="testing.ztest.customized_output.thread_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio_dynamic" name="testing.ztest.customized_output.thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.timer" name="testing.ztest.customized_output.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.empty_test" name="testing.ztest.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.multi_value_tests" name="testing.ztest.mock.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.parameter_tests" name="testing.ztest.mock.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.return_value_tests" name="testing.ztest.mock.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_pass" name="testing.ztest.regular_output.assert_pass" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_skip" name="testing.ztest.regular_output.assert_skip" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_cancel_main_low_prio" name="testing.ztest.regular_output.poll_cancel_main_low_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_no_wait" name="testing.ztest.regular_output.poll_no_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wait" name="testing.ztest.regular_output.poll_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.multi_value_tests" name="testing.ztest.unit.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.parameter_tests" name="testing.ztest.unit.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.return_value_tests" name="testing.ztest.unit.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_mem_equal" name="testing.ztest.verbose_0.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_tests" name="testing.ztest.verbose_0.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.empty_test" name="testing.ztest.verbose_0.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_mem_equal" name="testing.ztest.verbose_1.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_tests" name="testing.ztest.verbose_1.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.empty_test" name="testing.ztest.verbose_1.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_msg_dropped_notification" name="testing.ztest.verbose_1.log_msg_dropped_notification" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_panic" name="testing.ztest.verbose_1.log_panic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_mem_equal" name="testing.ztest.verbose_2.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_tests" name="testing.ztest.verbose_2.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.empty_test" name="testing.ztest.verbose_2.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.assert_tests" name="testing.ztest.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.delay" name="testing.ztest.customized_output.delay" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_isr" name="testing.ztest.customized_output.event_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_signalled" name="testing.ztest.customized_output.event_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.kernel_apis" name="testing.ztest.customized_output.kernel_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool" name="testing.ztest.customized_output.mempool" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool_dynamic" name="testing.ztest.customized_output.mempool_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.messageq" name="testing.ztest.customized_output.messageq" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex" name="testing.ztest.customized_output.mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex_lock_timeout" name="testing.ztest.customized_output.mutex_lock_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.semaphore" name="testing.ztest.customized_output.semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.t- test_thread_prio_dynamic" name="testing.ztest.customized_output.t- test_thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.te6" name="testing.ztest.customized_output.te6" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thrd B started." name="testing.ztest.customized_output.thrd B started." time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis" name="testing.ztest.customized_output.thread_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis_dynamic" name="testing.ztest.customized_output.thread_apis_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_isr" name="testing.ztest.customized_output.thread_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_no_wait_timeout" name="testing.ztest.customized_output.thread_flags_no_wait_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_signalled" name="testing.ztest.customized_output.thread_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio" name="testing.ztest.customized_output.thread_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio_dynamic" name="testing.ztest.customized_output.thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.timer" name="testing.ztest.customized_output.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.empty_test" name="testing.ztest.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.multi_value_tests" name="testing.ztest.mock.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.parameter_tests" name="testing.ztest.mock.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.return_value_tests" name="testing.ztest.mock.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_pass" name="testing.ztest.regular_output.assert_pass" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_skip" name="testing.ztest.regular_output.assert_skip" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_cancel_main_low_prio" name="testing.ztest.regular_output.poll_cancel_main_low_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_no_wait" name="testing.ztest.regular_output.poll_no_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wait" name="testing.ztest.regular_output.poll_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.multi_value_tests" name="testing.ztest.unit.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.parameter_tests" name="testing.ztest.unit.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.return_value_tests" name="testing.ztest.unit.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_mem_equal" name="testing.ztest.verbose_0.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_tests" name="testing.ztest.verbose_0.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.empty_test" name="testing.ztest.verbose_0.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_mem_equal" name="testing.ztest.verbose_1.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_tests" name="testing.ztest.verbose_1.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.empty_test" name="testing.ztest.verbose_1.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_msg_dropped_notification" name="testing.ztest.verbose_1.log_msg_dropped_notification" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_panic" name="testing.ztest.verbose_1.log_panic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_mem_equal" name="testing.ztest.verbose_2.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_tests" name="testing.ztest.verbose_2.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.empty_test" name="testing.ztest.verbose_2.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.assert_tests" name="testing.ztest.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.delay" name="testing.ztest.customized_output.delay" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_isr" name="testing.ztest.customized_output.event_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_signalled" name="testing.ztest.customized_output.event_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.kernel_apis" name="testing.ztest.customized_output.kernel_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool" name="testing.ztest.customized_output.mempool" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool_dynamic" name="testing.ztest.customized_output.mempool_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.messageq" name="testing.ztest.customized_output.messageq" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex" name="testing.ztest.customized_output.mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex_lock_timeout" name="testing.ztest.customized_output.mutex_lock_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.semaphore" name="testing.ztest.customized_output.semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.t- test_thread_prio_dynamic" name="testing.ztest.customized_output.t- test_thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.te6" name="testing.ztest.customized_output.te6" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thrd B started." name="testing.ztest.customized_output.thrd B started." time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis" name="testing.ztest.customized_output.thread_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis_dynamic" name="testing.ztest.customized_output.thread_apis_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_isr" name="testing.ztest.customized_output.thread_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_no_wait_timeout" name="testing.ztest.customized_output.thread_flags_no_wait_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_signalled" name="testing.ztest.customized_output.thread_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio" name="testing.ztest.customized_output.thread_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio_dynamic" name="testing.ztest.customized_output.thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.timer" name="testing.ztest.customized_output.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.empty_test" name="testing.ztest.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.multi_value_tests" name="testing.ztest.mock.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.parameter_tests" name="testing.ztest.mock.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.return_value_tests" name="testing.ztest.mock.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_pass" name="testing.ztest.regular_output.assert_pass" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_skip" name="testing.ztest.regular_output.assert_skip" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_cancel_main_low_prio" name="testing.ztest.regular_output.poll_cancel_main_low_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_no_wait" name="testing.ztest.regular_output.poll_no_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wait" name="testing.ztest.regular_output.poll_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.multi_value_tests" name="testing.ztest.unit.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.parameter_tests" name="testing.ztest.unit.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.return_value_tests" name="testing.ztest.unit.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_mem_equal" name="testing.ztest.verbose_0.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_tests" name="testing.ztest.verbose_0.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.empty_test" name="testing.ztest.verbose_0.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_mem_equal" name="testing.ztest.verbose_1.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_tests" name="testing.ztest.verbose_1.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.empty_test" name="testing.ztest.verbose_1.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_msg_dropped_notification" name="testing.ztest.verbose_1.log_msg_dropped_notification" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_panic" name="testing.ztest.verbose_1.log_panic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_mem_equal" name="testing.ztest.verbose_2.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_tests" name="testing.ztest.verbose_2.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.empty_test" name="testing.ztest.verbose_2.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.assert_tests" name="testing.ztest.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.delay" name="testing.ztest.customized_output.delay" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_isr" name="testing.ztest.customized_output.event_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.event_flags_signalled" name="testing.ztest.customized_output.event_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.kernel_apis" name="testing.ztest.customized_output.kernel_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool" name="testing.ztest.customized_output.mempool" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mempool_dynamic" name="testing.ztest.customized_output.mempool_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.messageq" name="testing.ztest.customized_output.messageq" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex" name="testing.ztest.customized_output.mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.mutex_lock_timeout" name="testing.ztest.customized_output.mutex_lock_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.semaphore" name="testing.ztest.customized_output.semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.t- test_thread_prio_dynamic" name="testing.ztest.customized_output.t- test_thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.te6" name="testing.ztest.customized_output.te6" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thrd B started." name="testing.ztest.customized_output.thrd B started." time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis" name="testing.ztest.customized_output.thread_apis" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_apis_dynamic" name="testing.ztest.customized_output.thread_apis_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_isr" name="testing.ztest.customized_output.thread_flags_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_no_wait_timeout" name="testing.ztest.customized_output.thread_flags_no_wait_timeout" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_flags_signalled" name="testing.ztest.customized_output.thread_flags_signalled" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio" name="testing.ztest.customized_output.thread_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.thread_prio_dynamic" name="testing.ztest.customized_output.thread_prio_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.customized_output.timer" name="testing.ztest.customized_output.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.empty_test" name="testing.ztest.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.multi_value_tests" name="testing.ztest.mock.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.parameter_tests" name="testing.ztest.mock.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.mock.return_value_tests" name="testing.ztest.mock.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_pass" name="testing.ztest.regular_output.assert_pass" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_skip" name="testing.ztest.regular_output.assert_skip" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_cancel_main_low_prio" name="testing.ztest.regular_output.poll_cancel_main_low_prio" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_no_wait" name="testing.ztest.regular_output.poll_no_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.poll_wai zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.poll_wait" name="testing.ztest.regular_output.poll_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" name="testing.ztest.regular_output.test OS build zephyr-v2.0.0-1233-g3d4aef8f9987 *****" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.multi_value_tests" name="testing.ztest.unit.multi_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.parameter_tests" name="testing.ztest.unit.parameter_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.unit.return_value_tests" name="testing.ztest.unit.return_value_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_mem_equal" name="testing.ztest.verbose_0.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_tests" name="testing.ztest.verbose_0.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_0.empty_test" name="testing.ztest.verbose_0.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_mem_equal" name="testing.ztest.verbose_1.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_tests" name="testing.ztest.verbose_1.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.empty_test" name="testing.ztest.verbose_1.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_msg_dropped_notification" name="testing.ztest.verbose_1.log_msg_dropped_notification" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_1.log_panic" name="testing.ztest.verbose_1.log_panic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_mem_equal" name="testing.ztest.verbose_2.assert_mem_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_tests" name="testing.ztest.verbose_2.assert_tests" time="0">
      </testcase>
      <testcase classname="frdm_k64f:testing.ztest.verbose_2.empty_test" name="testing.ztest.verbose_2.empty_test" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_commit" name="system.settings.fcb.config_commit" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_compress_deleted" name="system.settings.fcb.config_compress_deleted" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_compress_reset" name="system.settings.fcb.config_compress_reset" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_empty_fcb" name="system.settings.fcb.config_empty_fcb" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_empty_lookups" name="system.settings.fcb.config_empty_lookups" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_getset_bytes" name="system.settings.fcb.config_getset_bytes" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_getset_int" name="system.settings.fcb.config_getset_int" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_getset_int64" name="system.settings.fcb.config_getset_int64" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_getset_unknown" name="system.settings.fcb.config_getset_unknown" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_insert" name="system.settings.fcb.config_insert" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_insert2" name="system.settings.fcb.config_insert2" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_insert3" name="system.settings.fcb.config_insert3" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_save_1_fcb" name="system.settings.fcb.config_save_1_fcb" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_save_2_fcb" name="system.settings.fcb.config_save_2_fcb" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_save_3_fcb" name="system.settings.fcb.config_save_3_fcb" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.config_save_one_fcb" name="system.settings.fcb.config_save_one_fcb" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.fcb.init" name="system.settings.fcb.init" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.functional.nvs.clear_settings" name="system.settings.functional.nvs.clear_settings" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.functional.nvs.direct_loading" name="system.settings.functional.nvs.direct_loading" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.functional.nvs.direct_loading_filter" name="system.settings.functional.nvs.direct_loading_filter" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.functional.nvs.register_and_loading" name="system.settings.functional.nvs.register_and_loading" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.functional.nvs.support_rtn" name="system.settings.functional.nvs.support_rtn" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_commit" name="system.settings.nffs.config_commit" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_compress_file" name="system.settings.nffs.config_compress_file" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_empty_file" name="system.settings.nffs.config_empty_file" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_empty_lookups" name="system.settings.nffs.config_empty_lookups" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_getset_bytes" name="system.settings.nffs.config_getset_bytes" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_getset_int" name="system.settings.nffs.config_getset_int" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_getset_int64" name="system.settings.nffs.config_getset_int64" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_getset_unknown" name="system.settings.nffs.config_getset_unknown" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_insert" name="system.settings.nffs.config_insert" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_multiple_in_file" name="system.settings.nffs.config_multiple_in_file" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_save_in_file" name="system.settings.nffs.config_save_in_file" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_save_one_file" name="system.settings.nffs.config_save_one_file" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_setup_nffs" name="system.settings.nffs.config_setup_nffs" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nffs.config_small_file" name="system.settings.nffs.config_small_file" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nvs.config_commit" name="system.settings.nvs.config_commit" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nvs.config_empty_lookups" name="system.settings.nvs.config_empty_lookups" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nvs.config_getset_int" name="system.settings.nvs.config_getset_int" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nvs.config_getset_int64" name="system.settings.nvs.config_getset_int64" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nvs.config_getset_unknown" name="system.settings.nvs.config_getset_unknown" time="0">
      </testcase>
      <testcase classname="frdm_k64f:system.settings.nvs.config_insert" name="system.settings.nvs.config_insert" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.byte_put_free" name="libraries.data_structures.byte_put_free" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.capacity" name="libraries.data_structures.capacity" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.rbtree.rbtree_spam" name="libraries.data_structures.rbtree.rbtree_spam" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.reset" name="libraries.data_structures.reset" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ring_buffer_main" name="libraries.data_structures.ring_buffer_main" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_alloc_put" name="libraries.data_structures.ringbuffer_alloc_put" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_declare_pow2" name="libraries.data_structures.ringbuffer_declare_pow2" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_declare_size" name="libraries.data_structures.ringbuffer_declare_size" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_init" name="libraries.data_structures.ringbuffer_init" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_pow2_put_get_thread_isr" name="libraries.data_structures.ringbuffer_pow2_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_put_get_isr" name="libraries.data_structures.ringbuffer_put_get_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_put_get_thread" name="libraries.data_structures.ringbuffer_put_get_thread" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_put_get_thread_isr" name="libraries.data_structures.ringbuffer_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_raw" name="libraries.data_structures.ringbuffer_raw" time="0">
      </testcase>
      <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_size_put_get_thread_isr" name="libraries.data_structures.ringbuffer_size_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.call_stacks_analyze_workq" name="portability.posix.call_stacks_analyze_workq" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.clock_support" name="portability.posix.clock_support" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.filter_handling" name="portability.posix.filter_handling" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_close" name="portability.posix.fs_close" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_fd_leak" name="portability.posix.fs_fd_leak" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_mkdir" name="portability.posix.fs_mkdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_mount" name="portability.posix.fs_mount" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_open" name="portability.posix.fs_open" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_read" name="portability.posix.fs_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_readdir" name="portability.posix.fs_readdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_unlink" name="portability.posix.fs_unlink" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_write" name="portability.posix.fs_write" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.mqueue" name="portability.posix.mqueue" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.mutex.mutex_normal" name="portability.posix.mutex.mutex_normal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.mutex.recursive_mutex" name="portability.posix.mutex.recursive_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_close" name="portability.posix.newlib.fs_close" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_fd_leak" name="portability.posix.newlib.fs_fd_leak" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_mkdir" name="portability.posix.newlib.fs_mkdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_mount" name="portability.posix.newlib.fs_mount" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_open" name="portability.posix.newlib.fs_open" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_read" name="portability.posix.newlib.fs_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_readdir" name="portability.posix.newlib.fs_readdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_unlink" name="portability.posix.newlib.fs_unlink" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_write" name="portability.posix.newlib.fs_write" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.gen_gz_inc_file_mtime_arg" name="portability.posix.newlib.gen_gz_inc_file_mtime_arg" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_clock" name="portability.posix.newlib.posix_clock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_mqueue" name="portability.posix.newlib.posix_mqueue" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_multiple_threads_single_key" name="portability.posix.newlib.posix_multiple_threads_single_key" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_normal_mutex" name="portability.posix.newlib.posix_normal_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_pthread_execution" name="portability.posix.newlib.posix_pthread_execution" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_pthread_termination" name="portability.posix.newlib.posix_pthread_termination" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_realtime" name="portability.posix.newlib.posix_realtime" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_recursive_mutex" name="portability.posix.newlib.posix_recursive_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_rw_lock" name="portability.posix.newlib.posix_rw_lock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_semaphore" name="portability.posix.newlib.posix_semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_single_thread_multiple_keys" name="portability.posix.newlib.posix_single_thread_multiple_keys" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_timer" name="portability.posix.newlib.posix_timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ring_buffer_main" name="portability.posix.newlib.ring_buffer_main" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ringbuffer_pow2_put_get_thread_isr" name="portability.posix.newlib.ringbuffer_pow2_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ringbuffer_raw" name="portability.posix.newlib.ringbuffer_raw" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ringbuffer_size_put_get_thread_isr" name="portability.posix.newlib.ringbuffer_size_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.te_ringbuffer_pow2_put_get_thread_isr" name="portability.posix.newlib.te_ringbuffer_pow2_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_clock" name="portability.posix.posix_clock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_mqueue" name="portability.posix.posix_mqueue" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_multiple_threads_single_key" name="portability.posix.posix_multiple_threads_single_key" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_normal_mutex" name="portability.posix.posix_normal_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_pthread_execution" name="portability.posix.posix_pthread_execution" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_pthread_termination" name="portability.posix.posix_pthread_termination" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_realtime" name="portability.posix.posix_realtime" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_recursive_mutex" name="portability.posix.posix_recursive_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_rw_lock" name="portability.posix.posix_rw_lock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_semaphore" name="portability.posix.posix_semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_single_thread_multiple_keys" name="portability.posix.posix_single_thread_multiple_keys" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_timer" name="portability.posix.posix_timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread" name="portability.posix.pthread" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_cancel" name="portability.posix.pthread_cancel" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_equal" name="portability.posix.pthread_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_join" name="portability.posix.pthread_join" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_key.multiple_threads_single_key" name="portability.posix.pthread_key.multiple_threads_single_key" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_key.single_thread_multiple_keys" name="portability.posix.pthread_key.single_thread_multiple_keys" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.rw_lock" name="portability.posix.rw_lock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.sched_policy" name="portability.posix.sched_policy" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.sema" name="portability.posix.sema" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.timer" name="portability.posix.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.timer_support" name="portability.posix.timer_support" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.call_stacks_analyze_workq" name="portability.posix.call_stacks_analyze_workq" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.clock_support" name="portability.posix.clock_support" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.filter_handling" name="portability.posix.filter_handling" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_close" name="portability.posix.fs_close" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_fd_leak" name="portability.posix.fs_fd_leak" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_mkdir" name="portability.posix.fs_mkdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_mount" name="portability.posix.fs_mount" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_open" name="portability.posix.fs_open" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_read" name="portability.posix.fs_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_readdir" name="portability.posix.fs_readdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_unlink" name="portability.posix.fs_unlink" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.fs_write" name="portability.posix.fs_write" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.mqueue" name="portability.posix.mqueue" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.mutex.mutex_normal" name="portability.posix.mutex.mutex_normal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.mutex.recursive_mutex" name="portability.posix.mutex.recursive_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_close" name="portability.posix.newlib.fs_close" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_fd_leak" name="portability.posix.newlib.fs_fd_leak" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_mkdir" name="portability.posix.newlib.fs_mkdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_mount" name="portability.posix.newlib.fs_mount" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_open" name="portability.posix.newlib.fs_open" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_read" name="portability.posix.newlib.fs_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_readdir" name="portability.posix.newlib.fs_readdir" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_unlink" name="portability.posix.newlib.fs_unlink" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.fs_write" name="portability.posix.newlib.fs_write" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.gen_gz_inc_file_mtime_arg" name="portability.posix.newlib.gen_gz_inc_file_mtime_arg" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_clock" name="portability.posix.newlib.posix_clock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_mqueue" name="portability.posix.newlib.posix_mqueue" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_multiple_threads_single_key" name="portability.posix.newlib.posix_multiple_threads_single_key" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_normal_mutex" name="portability.posix.newlib.posix_normal_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_pthread_execution" name="portability.posix.newlib.posix_pthread_execution" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_pthread_termination" name="portability.posix.newlib.posix_pthread_termination" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_realtime" name="portability.posix.newlib.posix_realtime" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_recursive_mutex" name="portability.posix.newlib.posix_recursive_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_rw_lock" name="portability.posix.newlib.posix_rw_lock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_semaphore" name="portability.posix.newlib.posix_semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_single_thread_multiple_keys" name="portability.posix.newlib.posix_single_thread_multiple_keys" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.posix_timer" name="portability.posix.newlib.posix_timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ring_buffer_main" name="portability.posix.newlib.ring_buffer_main" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ringbuffer_pow2_put_get_thread_isr" name="portability.posix.newlib.ringbuffer_pow2_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ringbuffer_raw" name="portability.posix.newlib.ringbuffer_raw" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.ringbuffer_size_put_get_thread_isr" name="portability.posix.newlib.ringbuffer_size_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.newlib.te_ringbuffer_pow2_put_get_thread_isr" name="portability.posix.newlib.te_ringbuffer_pow2_put_get_thread_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_clock" name="portability.posix.posix_clock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_mqueue" name="portability.posix.posix_mqueue" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_multiple_threads_single_key" name="portability.posix.posix_multiple_threads_single_key" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_normal_mutex" name="portability.posix.posix_normal_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_pthread_execution" name="portability.posix.posix_pthread_execution" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_pthread_termination" name="portability.posix.posix_pthread_termination" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_realtime" name="portability.posix.posix_realtime" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_recursive_mutex" name="portability.posix.posix_recursive_mutex" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_rw_lock" name="portability.posix.posix_rw_lock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_semaphore" name="portability.posix.posix_semaphore" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_single_thread_multiple_keys" name="portability.posix.posix_single_thread_multiple_keys" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.posix_timer" name="portability.posix.posix_timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread" name="portability.posix.pthread" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_cancel" name="portability.posix.pthread_cancel" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_equal" name="portability.posix.pthread_equal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_join" name="portability.posix.pthread_join" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_key.multiple_threads_single_key" name="portability.posix.pthread_key.multiple_threads_single_key" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.pthread_key.single_thread_multiple_keys" name="portability.posix.pthread_key.single_thread_multiple_keys" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.rw_lock" name="portability.posix.rw_lock" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.sched_policy" name="portability.posix.sched_policy" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.sema" name="portability.posix.sema" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.timer" name="portability.posix.timer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:portability.posix.timer_support" name="portability.posix.timer_support" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.arm_irq_vector_table" name="arch.interrupt.arm_irq_vector_table" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.arm_runtime_nmi" name="arch.interrupt.arm_runtime_nmi" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.fatal" name="arch.interrupt.fatal" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.idt_stub" name="arch.interrupt.idt_stub" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.irq_offload" name="arch.interrupt.irq_offload" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.isr_dynamic" name="arch.interrupt.isr_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.main" name="arch.interrupt.main" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nested_isr" name="arch.interrupt.nested_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nmi_test_isr" name="arch.interrupt.nmi_test_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nodyn.isr_dynamic" name="arch.interrupt.nodyn.isr_dynamic" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nodyn.nested_isr" name="arch.interrupt.nodyn.nested_isr" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.nodyn.prevent_interruption" name="arch.interrupt.nodyn.prevent_interruption" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.obj_tracing" name="arch.interrupt.obj_tracing" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.philosophers_tracing" name="arch.interrupt.philosophers_tracing" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.prevent_interruption" name="arch.interrupt.prevent_interruption" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.sem_give_limit" name="arch.interrupt.sem_give_limit" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.sem_multiple_threads_wait" name="arch.interrupt.sem_multiple_threads_wait" time="0">
      </testcase>
      <testcase classname="frdm_k64f:arch.interrupt.static_idt" name="arch.interrupt.static_idt" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.watchdog" name="peripheral.watchdog" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.watchdog.wdt" name="peripheral.watchdog.wdt" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.pwm.pwm_cycle" name="peripheral.pwm.pwm_cycle" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.pwm.pwm_usec" name="peripheral.pwm.pwm_usec" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.pwm.supervisor_access" name="peripheral.pwm.supervisor_access" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.mailbox.main" name="peripheral.mailbox.main" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_fill" name="peripheral.uart.poll.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_read" name="peripheral.uart.poll.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_in" name="peripheral.uart.poll.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_out" name="peripheral.uart.poll.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_fill" name="peripheral.uart.shell.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_read" name="peripheral.uart.shell.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_in" name="peripheral.uart.shell.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_out" name="peripheral.uart.shell.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_fill" name="peripheral.uart.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_read" name="peripheral.uart.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_poll_in" name="peripheral.uart.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_poll_out" name="peripheral.uart.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.chained_read" name="peripheral.uart_async_api.chained_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.double_buffer" name="peripheral.uart_async_api.double_buffer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.read_abort" name="peripheral.uart_async_api.read_abort" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.single_read" name="peripheral.uart_async_api.single_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.write_abort" name="peripheral.uart_async_api.write_abort" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_fill" name="peripheral.uart.poll.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_read" name="peripheral.uart.poll.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_in" name="peripheral.uart.poll.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_out" name="peripheral.uart.poll.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_fill" name="peripheral.uart.shell.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_read" name="peripheral.uart.shell.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_in" name="peripheral.uart.shell.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_out" name="peripheral.uart.shell.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_fill" name="peripheral.uart.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_read" name="peripheral.uart.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_poll_in" name="peripheral.uart.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_poll_out" name="peripheral.uart.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.chained_read" name="peripheral.uart_async_api.chained_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.double_buffer" name="peripheral.uart_async_api.double_buffer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.read_abort" name="peripheral.uart_async_api.read_abort" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.single_read" name="peripheral.uart_async_api.single_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.write_abort" name="peripheral.uart_async_api.write_abort" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_fill" name="peripheral.uart.poll.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_read" name="peripheral.uart.poll.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_in" name="peripheral.uart.poll.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_out" name="peripheral.uart.poll.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_fill" name="peripheral.uart.shell.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_read" name="peripheral.uart.shell.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_in" name="peripheral.uart.shell.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_out" name="peripheral.uart.shell.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_fill" name="peripheral.uart.uart_fifo_fill" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_read" name="peripheral.uart.uart_fifo_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_poll_in" name="peripheral.uart.uart_poll_in" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart.uart_poll_out" name="peripheral.uart.uart_poll_out" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.chained_read" name="peripheral.uart_async_api.chained_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.double_buffer" name="peripheral.uart_async_api.double_buffer" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.read_abort" name="peripheral.uart_async_api.read_abort" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.single_read" name="peripheral.uart_async_api.single_read" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.uart_async_api.write_abort" name="peripheral.uart_async_api.write_abort" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.can.adc_invalid_request" name="peripheral.can.adc_invalid_request" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.can.main" name="peripheral.can.main" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.can.adc_invalid_request" name="peripheral.can.adc_invalid_request" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.can.main" name="peripheral.can.main" time="0">
      </testcase>
      <testcase classname="frdm_k64f:peripheral.device_id.device_id_get" name="peripheral.device_id.device_id_get" time="0">
      </testcase>
  </testsuite>
</testsuites>
