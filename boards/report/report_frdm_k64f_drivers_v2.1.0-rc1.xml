<?xml version="1.0"?>
<testsuites>
    <testsuite tests="165" errors="0" failures="0" name="" skipped="5" time="0">
         <testcase classname="frdm_k64f:peripheral.spi.testing_spi" name="peripheral.spi.testing_spi" time="0">
         <skipped message="Skipped" type="skipped"/>
         </testcase>
         <testcase classname="frdm_k64f:peripheral.i2c.i2c_burst_gy271" name="peripheral.i2c.i2c_burst_gy271" time="0">
         <skipped message="Skipped" type="skipped"/>
         </testcase>
         <testcase classname="frdm_k64f:peripheral.i2c.i2c_gy271" name="peripheral.i2c.i2c_gy271" time="0">
         <skipped message="Skipped" type="skipped"/>
         </testcase>
         <testcase classname="frdm_k64f:peripheral.i2c.test" name="peripheral.i2c.test" time="0">
         <skipped message="Skipped" type="skipped"/>
         </testcase>
         <testcase classname="frdm_k64f:peripheral.i2c_slave.eeprom_slave" name="peripheral.i2c_slave.eeprom_slave" time="0">
         <skipped message="Skipped" type="skipped"/>
         </testcase>
          <testcase classname="frdm_k64f:tracing.openocd" name="tracing.openocd" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer" name="kernel.timer" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.monotonic" name="kernel.timer.monotonic" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.monotonic.timer" name="kernel.timer.monotonic.timer" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_duration_period" name="kernel.timer.tickless.timer_duration_period" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_expirefn_null" name="kernel.timer.tickless.timer_expirefn_null" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_k_define" name="kernel.timer.tickless.timer_k_define" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_period_0" name="kernel.timer.tickless.timer_period_0" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_periodicity" name="kernel.timer.tickless.timer_periodicity" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_remaining_get" name="kernel.timer.tickless.timer_remaining_get" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_status_get" name="kernel.timer.tickless.timer_status_get" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_status_get_anytime" name="kernel.timer.tickless.timer_status_get_anytime" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_status_sync" name="kernel.timer.tickless.timer_status_sync" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.tickless.timer_user_data" name="kernel.timer.tickless.timer_user_data" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.time_conversions" name="kernel.timer.time_conversions" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer" name="kernel.timer.timer" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_duration_period" name="kernel.timer.timer_duration_period" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_expirefn_null" name="kernel.timer.timer_expirefn_null" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_k_define" name="kernel.timer.timer_k_define" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_period_0" name="kernel.timer.timer_period_0" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_periodicity" name="kernel.timer.timer_periodicity" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_remaining_get" name="kernel.timer.timer_remaining_get" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_status_get" name="kernel.timer.timer_status_get" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_status_get_anytime" name="kernel.timer.timer_status_get_anytime" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_status_sync" name="kernel.timer.timer_status_sync" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.timer.timer_user_data" name="kernel.timer.timer_user_data" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.tickless.concept" name="kernel.tickless.concept" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.tickless.concept.tickless_slice" name="kernel.tickless.concept.tickless_slice" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.tickless.concept.tickless_sysclock" name="kernel.tickless.concept.tickless_sysclock" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.tickless.tickless" name="kernel.tickless.tickless" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.tickless.tickless_slice" name="kernel.tickless.tickless_slice" time="0">
          </testcase>
          <testcase classname="frdm_k64f:kernel.tickless.tickless_sysclock" name="kernel.tickless.tickless_sysclock" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_0" name="testing.ztest.verbose_0" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_mem_equal" name="testing.ztest.verbose_0.assert_mem_equal" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_0.assert_tests" name="testing.ztest.verbose_0.assert_tests" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_0.empty_test" name="testing.ztest.verbose_0.empty_test" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_1" name="testing.ztest.verbose_1" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_mem_equal" name="testing.ztest.verbose_1.assert_mem_equal" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_1.assert_tests" name="testing.ztest.verbose_1.assert_tests" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_1.empty_test" name="testing.ztest.verbose_1.empty_test" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_2" name="testing.ztest.verbose_2" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_mem_equal" name="testing.ztest.verbose_2.assert_mem_equal" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_2.assert_tests" name="testing.ztest.verbose_2.assert_tests" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.verbose_2.empty_test" name="testing.ztest.verbose_2.empty_test" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.regular_output" name="testing.ztest.regular_output" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.regular_output.assert_pass" name="testing.ztest.regular_output.assert_pass" time="0">
          </testcase>
          <testcase classname="frdm_k64f:testing.ztest.customized_output" name="testing.ztest.customized_output" time="0">
          </testcase>
          <testcase classname="frdm_k64f:system.settings.nvs.config_commit" name="system.settings.nvs.config_commit" time="0">
          </testcase>
          <testcase classname="frdm_k64f:system.settings.nvs.config_empty_lookups" name="system.settings.nvs.config_empty_lookups" time="0">
          </testcase>
          <testcase classname="frdm_k64f:system.settings.nvs.config_getset_int" name="system.settings.nvs.config_getset_int" time="0">
          </testcase>
          <testcase classname="frdm_k64f:system.settings.nvs.config_getset_int64" name="system.settings.nvs.config_getset_int64" time="0">
          </testcase>
          <testcase classname="frdm_k64f:system.settings.nvs.config_getset_unknown" name="system.settings.nvs.config_getset_unknown" time="0">
          </testcase>
          <testcase classname="frdm_k64f:system.settings.nvs.config_insert" name="system.settings.nvs.config_insert" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures" name="libraries.data_structures" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.byte_put_free" name="libraries.data_structures.byte_put_free" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.capacity" name="libraries.data_structures.capacity" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.rbtree.rbtree_spam" name="libraries.data_structures.rbtree.rbtree_spam" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.reset" name="libraries.data_structures.reset" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ring_buffer_main" name="libraries.data_structures.ring_buffer_main" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_alloc_put" name="libraries.data_structures.ringbuffer_alloc_put" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_declare_pow2" name="libraries.data_structures.ringbuffer_declare_pow2" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_declare_size" name="libraries.data_structures.ringbuffer_declare_size" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_init" name="libraries.data_structures.ringbuffer_init" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_pow2_put_get_thread_isr" name="libraries.data_structures.ringbuffer_pow2_put_get_thread_isr" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_put_get_isr" name="libraries.data_structures.ringbuffer_put_get_isr" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_put_get_thread" name="libraries.data_structures.ringbuffer_put_get_thread" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_put_get_thread_isr" name="libraries.data_structures.ringbuffer_put_get_thread_isr" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_raw" name="libraries.data_structures.ringbuffer_raw" time="0">
          </testcase>
          <testcase classname="frdm_k64f:libraries.data_structures.ringbuffer_size_put_get_thread_isr" name="libraries.data_structures.ringbuffer_size_put_get_thread_isr" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs" name="portability.posix.fs" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_close" name="portability.posix.fs.fs_close" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_fd_leak" name="portability.posix.fs.fs_fd_leak" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_mkdir" name="portability.posix.fs.fs_mkdir" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_mount" name="portability.posix.fs.fs_mount" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_open" name="portability.posix.fs.fs_open" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_read" name="portability.posix.fs.fs_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_readdir" name="portability.posix.fs.fs_readdir" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_unlink" name="portability.posix.fs.fs_unlink" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.fs_write" name="portability.posix.fs.fs_write" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib" name="portability.posix.fs.newlib" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_close" name="portability.posix.fs.newlib.fs_close" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_fd_leak" name="portability.posix.fs.newlib.fs_fd_leak" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_mkdir" name="portability.posix.fs.newlib.fs_mkdir" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_mount" name="portability.posix.fs.newlib.fs_mount" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_open" name="portability.posix.fs.newlib.fs_open" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_read" name="portability.posix.fs.newlib.fs_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_readdir" name="portability.posix.fs.newlib.fs_readdir" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_unlink" name="portability.posix.fs.newlib.fs_unlink" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs.newlib.fs_write" name="portability.posix.fs.newlib.fs_write" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_close" name="portability.posix.fs_close" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_mkdir" name="portability.posix.fs_mkdir" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_mount" name="portability.posix.fs_mount" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_open" name="portability.posix.fs_open" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_read" name="portability.posix.fs_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_readdir" name="portability.posix.fs_readdir" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_unlink" name="portability.posix.fs_unlink" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.fs_write" name="portability.posix.fs_write" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common" name="portability.posix.common" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib" name="portability.posix.common.newlib" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_clock" name="portability.posix.common.newlib.posix_clock" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_mqueue" name="portability.posix.common.newlib.posix_mqueue" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_multiple_threads_single_key" name="portability.posix.common.newlib.posix_multiple_threads_single_key" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_normal_mutex" name="portability.posix.common.newlib.posix_normal_mutex" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_pthread_execution" name="portability.posix.common.newlib.posix_pthread_execution" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_pthread_termination" name="portability.posix.common.newlib.posix_pthread_termination" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_realtime" name="portability.posix.common.newlib.posix_realtime" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_recursive_mutex" name="portability.posix.common.newlib.posix_recursive_mutex" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_rw_lock" name="portability.posix.common.newlib.posix_rw_lock" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_semaphore" name="portability.posix.common.newlib.posix_semaphore" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_single_thread_multiple_keys" name="portability.posix.common.newlib.posix_single_thread_multiple_keys" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.newlib.posix_timer" name="portability.posix.common.newlib.posix_timer" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_clock" name="portability.posix.common.posix_clock" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_mqueue" name="portability.posix.common.posix_mqueue" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_multiple_threads_single_key" name="portability.posix.common.posix_multiple_threads_single_key" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_normal_mutex" name="portability.posix.common.posix_normal_mutex" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_pthread_execution" name="portability.posix.common.posix_pthread_execution" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_pthread_termination" name="portability.posix.common.posix_pthread_termination" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_realtime" name="portability.posix.common.posix_realtime" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_recursive_mutex" name="portability.posix.common.posix_recursive_mutex" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_rw_lock" name="portability.posix.common.posix_rw_lock" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_semaphore" name="portability.posix.common.posix_semaphore" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_single_thread_multiple_keys" name="portability.posix.common.posix_single_thread_multiple_keys" time="0">
          </testcase>
          <testcase classname="frdm_k64f:portability.posix.common.posix_timer" name="portability.posix.common.posix_timer" time="0">
          </testcase>
          <testcase classname="frdm_k64f:arch.interrupt.arm.nmi" name="arch.interrupt.arm.nmi" time="0">
          </testcase>
          <testcase classname="frdm_k64f:arch.interrupt.arm.nmi.arm_runtime_nmi" name="arch.interrupt.arm.nmi.arm_runtime_nmi" time="0">
          </testcase>
          <testcase classname="frdm_k64f:arch.interrupt.arm.nmi.nmi_test_isr" name="arch.interrupt.arm.nmi.nmi_test_isr" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.watchdog" name="peripheral.watchdog" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.watchdog.wdt" name="peripheral.watchdog.wdt" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.pwm.pwm_cycle" name="peripheral.pwm.pwm_cycle" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.pwm.pwm_nsec" name="peripheral.pwm.pwm_nsec" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.pwm.pwm_usec" name="peripheral.pwm.pwm_usec" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.mailbox" name="peripheral.mailbox" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.mailbox.main" name="peripheral.mailbox.main" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_fill" name="peripheral.uart.poll.uart_fifo_fill" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.poll.uart_fifo_read" name="peripheral.uart.poll.uart_fifo_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_in" name="peripheral.uart.poll.uart_poll_in" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.poll.uart_poll_out" name="peripheral.uart.poll.uart_poll_out" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_fill" name="peripheral.uart.shell.uart_fifo_fill" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.shell.uart_fifo_read" name="peripheral.uart.shell.uart_fifo_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_in" name="peripheral.uart.shell.uart_poll_in" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.shell.uart_poll_out" name="peripheral.uart.shell.uart_poll_out" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_fill" name="peripheral.uart.uart_fifo_fill" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.uart_fifo_read" name="peripheral.uart.uart_fifo_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.uart_poll_in" name="peripheral.uart.uart_poll_in" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart.uart_poll_out" name="peripheral.uart.uart_poll_out" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart_async_api.chained_read" name="peripheral.uart_async_api.chained_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart_async_api.double_buffer" name="peripheral.uart_async_api.double_buffer" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart_async_api.read_abort" name="peripheral.uart_async_api.read_abort" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart_async_api.single_read" name="peripheral.uart_async_api.single_read" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.uart_async_api.write_abort" name="peripheral.uart_async_api.write_abort" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.filter_attach" name="peripheral.can.filter_attach" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.receive_timeout" name="peripheral.can.receive_timeout" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_and_forget" name="peripheral.can.send_and_forget" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_callback" name="peripheral.can.send_callback" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_invalid_dlc" name="peripheral.can.send_invalid_dlc" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_receive_buffer" name="peripheral.can.send_receive_buffer" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_receive_ext" name="peripheral.can.send_receive_ext" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_receive_ext_masked" name="peripheral.can.send_receive_ext_masked" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_receive_std" name="peripheral.can.send_receive_std" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_receive_std_masked" name="peripheral.can.send_receive_std_masked" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.send_receive_wrong_id" name="peripheral.can.send_receive_wrong_id" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.set_loopback" name="peripheral.can.set_loopback" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.can.stm32.filter_handling" name="peripheral.can.stm32.filter_handling" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.device_id" name="peripheral.device_id" time="0">
          </testcase>
          <testcase classname="frdm_k64f:peripheral.device_id.device_id_get" name="peripheral.device_id.device_id_get" time="0">
          </testcase>
  </testsuite>
</testsuites>
