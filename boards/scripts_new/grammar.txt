Created by rly version 0.2.3

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> DATA = expression
Rule 3     statement -> , expression
Rule 4     expression -> expression AND expression
Rule 5     expression -> expression OR expression
Rule 6     expression -> NOT expression
Rule 7     expression -> [ expression ]
Rule 8     expression -> ( expression )
Rule 9     expression -> NUMBER
Rule 10    expression -> DATA
Rule 11    expression -> expression + expression
Rule 12    expression -> expression - expression
Rule 13    expression -> expression * expression
Rule 14    expression -> expression / expression

Terminals, with rules where they appear

'                    : 
(                    : 8
)                    : 8
*                    : 13
+                    : 11
,                    : 3
-                    : 12
/                    : 14
:                    : 
<                    : 
=                    : 2
>                    : 
AND                  : 4
DATA                 : 2 10
EQUATE               : 
GTE                  : 
IN                   : 
LTE                  : 
NOEQUATE             : 
NOT                  : 6
NUMBER               : 9
OR                   : 5
[                    : 7
]                    : 7
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 4 4 5 5 6 7 8 11 11 12 12 13 13 14 14
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . DATA = expression
    (3) statement -> . , expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    DATA            shift and go to state 3
    ,               shift and go to state 4
    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 1 (statement -> expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14


state 3

    (2) statement -> DATA . = expression
    (10) expression -> DATA .

    =               shift and go to state 15
    AND             reduce using rule 10 (expression -> DATA .)
    OR              reduce using rule 10 (expression -> DATA .)
    +               reduce using rule 10 (expression -> DATA .)
    -               reduce using rule 10 (expression -> DATA .)
    *               reduce using rule 10 (expression -> DATA .)
    /               reduce using rule 10 (expression -> DATA .)
    $end            reduce using rule 10 (expression -> DATA .)


state 4

    (3) statement -> , . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 16

state 5

    (6) expression -> NOT . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 18

state 6

    (7) expression -> [ . expression ]
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 19

state 7

    (8) expression -> ( . expression )
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 20

state 8

    (9) expression -> NUMBER .

    AND             reduce using rule 9 (expression -> NUMBER .)
    OR              reduce using rule 9 (expression -> NUMBER .)
    +               reduce using rule 9 (expression -> NUMBER .)
    -               reduce using rule 9 (expression -> NUMBER .)
    *               reduce using rule 9 (expression -> NUMBER .)
    /               reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    ]               reduce using rule 9 (expression -> NUMBER .)
    )               reduce using rule 9 (expression -> NUMBER .)


state 9

    (4) expression -> expression AND . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 21

state 10

    (5) expression -> expression OR . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 22

state 11

    (11) expression -> expression + . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 23

state 12

    (12) expression -> expression - . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 24

state 13

    (13) expression -> expression * . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 25

state 14

    (14) expression -> expression / . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 26

state 15

    (2) statement -> DATA = . expression
    (4) expression -> . expression AND expression
    (5) expression -> . expression OR expression
    (6) expression -> . NOT expression
    (7) expression -> . [ expression ]
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . DATA
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression

    NOT             shift and go to state 5
    [               shift and go to state 6
    (               shift and go to state 7
    NUMBER          shift and go to state 8
    DATA            shift and go to state 17

    expression                     shift and go to state 27

state 16

    (3) statement -> , expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 3 (statement -> , expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14


state 17

    (10) expression -> DATA .

    AND             reduce using rule 10 (expression -> DATA .)
    OR              reduce using rule 10 (expression -> DATA .)
    +               reduce using rule 10 (expression -> DATA .)
    -               reduce using rule 10 (expression -> DATA .)
    *               reduce using rule 10 (expression -> DATA .)
    /               reduce using rule 10 (expression -> DATA .)
    $end            reduce using rule 10 (expression -> DATA .)
    ]               reduce using rule 10 (expression -> DATA .)
    )               reduce using rule 10 (expression -> DATA .)


state 18

    (6) expression -> NOT expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 6 (expression -> NOT expression .)
    ]               reduce using rule 6 (expression -> NOT expression .)
    )               reduce using rule 6 (expression -> NOT expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14

  ! AND             [ reduce using rule 6 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 6 (expression -> NOT expression .) ]
  ! +               [ reduce using rule 6 (expression -> NOT expression .) ]
  ! -               [ reduce using rule 6 (expression -> NOT expression .) ]
  ! *               [ reduce using rule 6 (expression -> NOT expression .) ]
  ! /               [ reduce using rule 6 (expression -> NOT expression .) ]


state 19

    (7) expression -> [ expression . ]
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    ]               shift and go to state 28
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14


state 20

    (8) expression -> ( expression . )
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    )               shift and go to state 29
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14


state 21

    (4) expression -> expression AND expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 4 (expression -> expression AND expression .)
    ]               reduce using rule 4 (expression -> expression AND expression .)
    )               reduce using rule 4 (expression -> expression AND expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14

  ! AND             [ reduce using rule 4 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 4 (expression -> expression AND expression .) ]
  ! +               [ reduce using rule 4 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 4 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 4 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression AND expression .) ]


state 22

    (5) expression -> expression OR expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 5 (expression -> expression OR expression .)
    ]               reduce using rule 5 (expression -> expression OR expression .)
    )               reduce using rule 5 (expression -> expression OR expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14

  ! AND             [ reduce using rule 5 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 5 (expression -> expression OR expression .) ]
  ! +               [ reduce using rule 5 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 5 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 5 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression OR expression .) ]


state 23

    (11) expression -> expression + expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 11 (expression -> expression + expression .)
    ]               reduce using rule 11 (expression -> expression + expression .)
    )               reduce using rule 11 (expression -> expression + expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14

  ! AND             [ reduce using rule 11 (expression -> expression + expression .) ]
  ! OR              [ reduce using rule 11 (expression -> expression + expression .) ]
  ! +               [ reduce using rule 11 (expression -> expression + expression .) ]
  ! -               [ reduce using rule 11 (expression -> expression + expression .) ]
  ! *               [ reduce using rule 11 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression + expression .) ]


state 24

    (12) expression -> expression - expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 12 (expression -> expression - expression .)
    ]               reduce using rule 12 (expression -> expression - expression .)
    )               reduce using rule 12 (expression -> expression - expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14

  ! AND             [ reduce using rule 12 (expression -> expression - expression .) ]
  ! OR              [ reduce using rule 12 (expression -> expression - expression .) ]
  ! +               [ reduce using rule 12 (expression -> expression - expression .) ]
  ! -               [ reduce using rule 12 (expression -> expression - expression .) ]
  ! *               [ reduce using rule 12 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression - expression .) ]


state 25

    (13) expression -> expression * expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 13 (expression -> expression * expression .)
    ]               reduce using rule 13 (expression -> expression * expression .)
    )               reduce using rule 13 (expression -> expression * expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14

  ! AND             [ reduce using rule 13 (expression -> expression * expression .) ]
  ! OR              [ reduce using rule 13 (expression -> expression * expression .) ]
  ! +               [ reduce using rule 13 (expression -> expression * expression .) ]
  ! -               [ reduce using rule 13 (expression -> expression * expression .) ]
  ! *               [ reduce using rule 13 (expression -> expression * expression .) ]
  ! /               [ reduce using rule 13 (expression -> expression * expression .) ]


state 26

    (14) expression -> expression / expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 14 (expression -> expression / expression .)
    ]               reduce using rule 14 (expression -> expression / expression .)
    )               reduce using rule 14 (expression -> expression / expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14

  ! AND             [ reduce using rule 14 (expression -> expression / expression .) ]
  ! OR              [ reduce using rule 14 (expression -> expression / expression .) ]
  ! +               [ reduce using rule 14 (expression -> expression / expression .) ]
  ! -               [ reduce using rule 14 (expression -> expression / expression .) ]
  ! *               [ reduce using rule 14 (expression -> expression / expression .) ]
  ! /               [ reduce using rule 14 (expression -> expression / expression .) ]


state 27

    (2) statement -> DATA = expression .
    (4) expression -> expression . AND expression
    (5) expression -> expression . OR expression
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 2 (statement -> DATA = expression .)
    AND             shift and go to state 9
    OR              shift and go to state 10
    +               shift and go to state 11
    -               shift and go to state 12
    *               shift and go to state 13
    /               shift and go to state 14


state 28

    (7) expression -> [ expression ] .

    AND             reduce using rule 7 (expression -> [ expression ] .)
    OR              reduce using rule 7 (expression -> [ expression ] .)
    +               reduce using rule 7 (expression -> [ expression ] .)
    -               reduce using rule 7 (expression -> [ expression ] .)
    *               reduce using rule 7 (expression -> [ expression ] .)
    /               reduce using rule 7 (expression -> [ expression ] .)
    $end            reduce using rule 7 (expression -> [ expression ] .)
    ]               reduce using rule 7 (expression -> [ expression ] .)
    )               reduce using rule 7 (expression -> [ expression ] .)


state 29

    (8) expression -> ( expression ) .

    AND             reduce using rule 8 (expression -> ( expression ) .)
    OR              reduce using rule 8 (expression -> ( expression ) .)
    +               reduce using rule 8 (expression -> ( expression ) .)
    -               reduce using rule 8 (expression -> ( expression ) .)
    *               reduce using rule 8 (expression -> ( expression ) .)
    /               reduce using rule 8 (expression -> ( expression ) .)
    $end            reduce using rule 8 (expression -> ( expression ) .)
    ]               reduce using rule 8 (expression -> ( expression ) .)
    )               reduce using rule 8 (expression -> ( expression ) .)


